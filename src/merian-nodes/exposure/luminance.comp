#version 460
#extension GL_GOOGLE_include_directive    : enable

#include "layout.glsl"
#include "common/camera.glsl"

const uint hist_size = gl_WorkGroupSize.x * gl_WorkGroupSize.y;
shared uint[hist_size] local_hist;
shared uint count;

void main() {
    float max_luminance;
    if (params.automatic == 0) {
        const float ev = ev_100(params.aperature, params.shutter_time, params.iso);
        max_luminance = ev_100_to_max_luminance(ev, params.iso, params.q);
    } else {
        const uint local_bin = histogram[gl_LocalInvocationIndex];
        local_hist[gl_LocalInvocationIndex] = local_bin * gl_LocalInvocationIndex;
        if (gl_LocalInvocationIndex == 0)
            count = histogram[hist_size];
        barrier();

        for (uint split = (hist_size >> 1); split > 0; split >>= 1) {
            if (uint(gl_LocalInvocationIndex) < split) {
              local_hist[gl_LocalInvocationIndex] += local_hist[gl_LocalInvocationIndex + split];
            }
            barrier();
        }

        if (gl_LocalInvocationIndex == 0) {
            const uvec2 image_size = textureSize(img_src, 0).rg;
            const float num_bright_pixels = max(count - float(local_bin), 1.0);
            const float average_bin = (local_hist[0] / num_bright_pixels) - 1.0;
            const float average_l = exp2(((average_bin / float(hist_size - 2.)) * params.max_log_histogram) + params.min_log_histogram);

            const float ev = ev_100_from_average(average_l, 100, params.K);
            max_luminance = ev_100_to_max_luminance(ev, 100, params.q);

            float last_max_luminance = params.reset == 1 ? max_luminance : luminance[0];
            if (isnan(last_max_luminance) || isinf(last_max_luminance)) last_max_luminance = max_luminance;

            const float tau = -params.timediff * (max_luminance > last_max_luminance ? params.speed_up : params.speed_down);
            max_luminance = last_max_luminance + (max_luminance - last_max_luminance) * (1 - exp(tau));
        }
    }

    if (gl_LocalInvocationIndex == 0) {
        luminance[0] = max_luminance;
    }
}
