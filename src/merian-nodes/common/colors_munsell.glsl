#include "common.glsl"

#ifndef _COLORS_MUNSELL_H_
#define _COLORS_MUNSELL_H_


const int munsell_hdim = 40;
const int munsell_cdim = 21;

const uint munsell_xy[21*40] = {
893596928, 888485006, 882914332, 877278059, 871117480, 860434938, 850145621, 840839360, 831598641, 824389517, 816721591, 810495460, 804007194, 792800344, 782117694, 771762649, 761800831, 752166499, 742794164, 729161098, 711433233, 893596928, 889402502, 884356109, 879113022, 873869940, 865087934, 854733069, 845623410, 836251577, 828321478, 822095366, 816917821, 811936894, 807218062, 799943213, 791161049, 782575390, 774317213, 766255197, 758419961, 750756095, 893596928, 890320002, 886387716, 881668897, 876753480, 871838086, 862269639, 853880872, 845098763, 837103107, 830352689, 825306190, 820456173, 815868240, 811476871, 807216265, 800857751, 792894620, 785163198, 777627269, 770287756, 893596928, 891434112, 888419331, 885076762, 881472060, 877801832, 874000542, 869412869, 862531262, 856698297, 850013328, 845163215, 840575136, 836248860, 832117928, 828154171, 824354368, 820685024, 817146514, 813673499, 810331368, 893596928, 892482689, 890778635, 888615724, 886256205, 883700086, 881143985, 879046681, 876621529, 874196389, 871705777, 868494237, 865806980, 864102751, 862464066, 860890714, 859317310, 857808991, 856363422, 854957865, 853582702, 893596928, 893858952, 893793306, 893334362, 892416637, 891236774, 889925850, 888811590, 887566138, 886255099, 885009652, 884026403, 882977550, 882453018, 882125096, 881862716, 881534634, 881272039, 881009244, 880680438, 880447825, 893596928, 895169683, 896414762, 897266577, 897790645, 898052577, 898248984, 898314379, 898117559, 897789541, 897592688, 897133724, 896936888, 896477824, 896280939, 896084053, 896149133, 896214143, 896278779, 896342085, 896441732, 893596928, 896808099, 899691589, 902181848, 904737546, 906834507, 908800379, 910110949, 911487025, 912600874, 913583640, 914238753, 914893902, 915221324, 915876305, 916269142, 916989090, 918166340, 919314767, 920364563, 921413807, 893596928, 897856687, 901985370, 905786376, 909914964, 913453736, 917516761, 920334655, 923349139, 926167005, 928329429, 930360770, 932195527, 933768178, 935209567, 937306166, 939598652, 940939704, 942187732, 943368288, 944482881, 893596928, 899036349, 904410228, 909456424, 914830242, 919548668, 924922419, 929051028, 933179622, 937308221, 939994987, 941567576, 943205685, 944516154, 945826441, 947202104, 948707910, 950508718, 952214850, 953854099, 955427441, 893596928, 900019402, 906572942, 913060941, 919876608, 926167908, 932983460, 938422785, 941896009, 944517275, 946614282, 948645616, 950939054, 952773777, 954739414, 956835864, 959193569, 961715699, 964011437, 966240468, 968338108, 893596928, 901395679, 909391032, 917845130, 927020111, 935867408, 942617477, 947204847, 951923264, 956445060, 960377049, 964177968, 967454502, 970599904, 973679768, 977414667, 980428463, 983704044, 986814614, 989766627, 992585515, 893596928, 903034112, 913192187, 924464373, 936654052, 944387272, 951137439, 957101168, 963458100, 969618403, 975909707, 981152452, 986722853, 992555368, 998977691, 1005334369, 1009003935, 1011887292, 1014574035, 1017129542, 1019553998, 893596928, 904410400, 916010301, 928986456, 940717417, 947402097, 953365866, 958281053, 962409809, 966341957, 970929448, 974927147, 978662702, 982201648, 985478451, 988558645, 991507767, 994325817, 997078331, 999634237, 1002124607, 893596928, 905721161, 918566290, 932132308, 942028298, 947009074, 951072334, 954087010, 956839530, 959264384, 961558164, 963720871, 965752506, 967653067, 969553628, 971323116, 973027067, 974731018, 976303897, 977876775, 979384116, 893596928, 906311011, 919680458, 932722219, 941504121, 945370795, 948254418, 950744809, 952907528, 954939173, 956839744, 958674778, 960378739, 962017162, 963655585, 965162935, 966604748, 968046560, 969422836, 970733571, 972044300, 893596928, 906573183, 919877124, 931804794, 940062419, 943142671, 945370941, 947271521, 948975492, 950613925, 952186820, 953694177, 955070462, 956446732, 957757465, 959068198, 960247858, 961427518, 962607177, 963721300, 964769887, 893596928, 906311059, 918763048, 929838767, 937375503, 941045588, 942880647, 944650165, 946354142, 947927042, 949434389, 950876198, 952186935, 953497671, 954742870, 955988069, 957102196, 958281857, 959330447, 960379036, 961427625, 893596928, 905721248, 917059140, 926627547, 933115717, 937703313, 940390348, 941570048, 942946325, 944257065, 945502268, 946681935, 947796064, 948910193, 949958785, 950941840, 951924895, 952907950, 953825468, 954677450, 955529431, 893596928, 904345007, 914241115, 922760957, 928593779, 932460488, 935671814, 938031138, 940062779, 941242449, 942422119, 943536252, 944584847, 945567906, 946550965, 947468486, 948386007, 949237991, 950089975, 950876423, 951662870, 893596928, 902772149, 911160936, 918370067, 923547545, 927283196, 929970210, 931870789, 934033501, 936065141, 937965708, 939669665, 940521654, 941373641, 942160093, 942946543, 943667457, 944388370, 945109283, 945830195, 946485571, 893596928, 900937139, 907753065, 913717019, 918304689, 921581585, 924006461, 925710430, 927611008, 929642654, 931477691, 933312726, 935016688, 936655112, 938228000, 939604278, 940325196, 941046113, 941701494, 942356874, 943012253, 893596928, 899560880, 905066081, 909850390, 913520569, 915879966, 917649489, 919025788, 920074403, 920926404, 922368226, 923678973, 924924184, 926103858, 927283530, 928397666, 929446264, 930494862, 931477923, 932460984, 933378508, 893596928, 898053543, 901920337, 905393923, 908146607, 910047267, 911489120, 912406673, 913127609, 913717479, 914569484, 915618094, 916666703, 917649774, 918632843, 919550375, 920402370, 921254365, 922040822, 922827278, 923613734, 893596928, 896480663, 899364416, 901658346, 903296914, 904411161, 904869987, 904673437, 904214738, 903559430, 902510904, 901200234, 900151702, 898972092, 899168734, 899365375, 899562015, 899758653, 899955291, 900151927, 900348563, 893596928, 895169927, 896546339, 897726140, 898381656, 898381804, 897792061, 897005692, 895629499, 893991151, 892156190, 890714442, 889207153, 887765385, 886258090, 885995976, 885733862, 885471746, 885209630, 885013048, 884750930, 893596928, 894186873, 894645769, 894776980, 894580510, 893925287, 892680213, 891500620, 889731209, 887765186, 885733616, 883702040, 881932597, 880490834, 879049066, 878590338, 878131610, 877672880, 877214150, 876820955, 876427760, 893596928, 893269357, 892745193, 891958886, 890910430, 889468755, 887699401, 886126611, 884029511, 881735801, 879245483, 877213897, 875509990, 873740545, 872233240, 870791471, 869349701, 868039002, 866662767, 865417603, 864172438, 893596928, 892548449, 891172303, 889599546, 887764644, 885864195, 883505002, 881604536, 879179785, 877017139, 874526815, 872298621, 868759710, 865286327, 862402766, 860371173, 858470651, 856570128, 854735140, 852965688, 851261771, 893596928, 891696467, 889468335, 886978056, 884356703, 882063017, 879179515, 876885819, 874329984, 871315389, 866072574, 861354010, 856832053, 852834376, 849426525, 845363315, 842348680, 839465117, 836647089, 833960133, 831404247, 893596928, 890844483, 887633289, 884422095, 881145365, 878327373, 875247242, 872494781, 867055344, 862009120, 856700752, 851982202, 846870438, 842414024, 838416358, 834418692, 830355475, 827013155, 823801907, 820721730, 817707088, 893596928, 889599275, 885405015, 881145218, 876950955, 873608651, 867710444, 861222410, 855389733, 849622591, 844052054, 838678125, 834352768, 829437589, 824719014, 820197049, 816133835, 812136153, 806958831, 798897926, 789526299, 893596928, 888747287, 883766574, 878851395, 874198357, 868365667, 860435824, 853620092, 847066503, 840775057, 834876827, 829699491, 824587690, 819148211, 815084984, 810497471, 806565316, 797586890, 788346319, 782579156, 775632345, 893596928, 888026372, 882259206, 876885253, 871314693, 863188228, 854799618, 847525123, 840709377, 833959167, 827995388, 821966076, 817575161, 812332279, 807810294, 800863476, 790508785, 781268210, 773207279, 767440107, 759313644, 893596928, 887239916, 880948438, 875115714, 867185841, 858338466, 849360019, 842019975, 834745468, 828257394, 822293609, 816526433, 811152473, 806564947, 797652044, 787887169, 777532469, 768226354, 760099882, 753153062, 746140706, 893596928, 886846682, 880161970, 874001549, 864302191, 855061590, 846017599, 838153260, 830813210, 824456203, 818033656, 812069851, 806826947, 798766000, 787297169, 779170689, 768750441, 759509840, 750203712, 743191344, 734671646, 893596928, 886650056, 879965329, 873215067, 862860333, 852767751, 843133889, 834155387, 826094397, 819737364, 813183720, 807219912, 798241445, 786707076, 777466475, 767046217, 757740072, 749613583, 740241909, 725103062, 708325815, 893596928, 886781111, 880227439, 873411623, 862729174, 852505449, 841888510, 832385694, 823865933, 815542791, 808333773, 800010664, 787296638, 776876371, 767635770, 758329624, 748957942, 739586259, 723923116, 707211397, 690958431, 893596928, 887239848, 880882766, 874394603, 864891723, 853947065, 843788848, 834286005, 824848706, 815935707, 808202375, 799682625, 784740310, 771960650, 760360656, 749809272, 740503037, 724315528, 706293014, 688729255, 671558715, 893596928, 887764121, 881865779, 875574180, 867250935, 856240728, 846016963, 836710723, 827207877, 818753619, 811347921, 803614499, 789786210, 777072037, 764882160, 753151042, 741878580, 723790319, 702621876, 682043142, 653075635, 
};

float
xy_to_monotone_hue_angle(vec2 xy)
{
  // the colours in the chart go clockwise, the angle will go counter clockwise, hence the sign.
  // also we subtract the angle of hue index==0 so the output will start at zero and grow monotonically.
  // this is required for the binary search to work correctly.
  const vec2 ill = vec2(0.31271, 0.32902);// now adapted to D65, not C (0.31006, 0.31616);
  return mod(2.0*M_PI-2.52-atan(xy.y-ill.y, xy.x-ill.x), 2.0*M_PI);
}


vec2
munsell_lookup(
    int hue_idx,
    int chroma_idx)
{
  hue_idx    = (hue_idx % munsell_hdim + munsell_hdim) % munsell_hdim; // unsigned modulo
  chroma_idx = clamp(chroma_idx, 0, munsell_cdim-1);                   // clamp to range
  return unpackHalf2x16(munsell_xy[(munsell_cdim * hue_idx + chroma_idx)]);
}

// compute which side of a line v0--v1 the point p lies
float
munsell_side(
    vec2 v0,
    vec2 v1,
    vec2 p)
{
  v1 -= v0; p -= v0;
  return v1.x * p.y - v1.y * p.x;
}

// forward method, interpolate same two triangles as the other direction
vec2
munsell_to_xy(const vec2 mhc) // 2d munsell coordinate: hue and chroma
{
  float hm = mhc.x * munsell_hdim;
  float cm = max(mhc.y, 0) * munsell_cdim;
  int hidxm = int(hm);
  int cidxm = int(cm);
  float hu = hm - hidxm;
  float cu = cm - cidxm;
  vec2 res0, res1, res2, res3;
  res3 = munsell_lookup(hidxm, cidxm+1); res2 = munsell_lookup(hidxm+1, cidxm+1);
  res0 = munsell_lookup(hidxm, cidxm  ); res1 = munsell_lookup(hidxm+1, cidxm);
  //  cu = 1
  //    3---2
  // t1 |  /|                    01  11
  //    |/  | t0
  //    0---1  hu = 1            00  10
  if(hu >= cu) // triangle 0
    return (1-hu) * res0 + (hu-cu) * res1 + (cu) * res2;
  else // t1
    return (hu) * res2 + (cu-hu) * res3 + (1-cu) * res0;
}

// inversion method
// convert xy to polar around illuminant (C)
// find matching munsell box and interpolate the corners
vec2
munsell_from_xy(const vec2 xy)
{
  int hidxm = 0, hidxM = munsell_hdim;
  int cidxm = 0, cidxM = munsell_cdim-1;
  const vec2 ill = vec2(0.31271, 0.32902);// now adapted to D65, not C (0.31006, 0.31616);
  const float theta = xy_to_monotone_hue_angle(xy);
  const float rad2  = dot(xy-ill,xy-ill);
  // while(true)
  for(int i=0;i<6;i++)
  { // quad tree refinement step using midpoint
    int hidx = (hidxm + hidxM)/2;
    int cidx = (cidxm + cidxM)/2;
    vec2 res = munsell_lookup(hidx, cidx);
    float th = xy_to_monotone_hue_angle(res);
    float r2 = dot(res-ill,res-ill);
    if(th <= theta) hidxm = hidx;
    else            hidxM = hidx;
    if(r2 <= rad2)  cidxm = cidx;
    else            cidxM = cidx;
    if(hidxM <= hidxm + 1 && cidxM <= cidxm + 1) // reached last level/resolution limit
      break;
  }

  // now we reached the leaf level and may have found our quad.
  // unfortunately the quad tree is just very approximate, so maybe
  // we'll be outside the quad. in this case, we'll walk the grid
  // a bit until we find a containing quad.
  // while(true)
  for(int i=0;i<6;i++)
  {
    vec2 res0, res1, res2, res3;
    // this polygon winds ccw:
    res3 = munsell_lookup(hidxm, cidxm+1); res2 = munsell_lookup(hidxm+1, cidxm+1);
    res0 = munsell_lookup(hidxm, cidxm  ); res1 = munsell_lookup(hidxm+1, cidxm);
    // these are all positive if xy is inside the polygon
    float s0 = munsell_side(res0, res1, xy), s1 = munsell_side(res1, res2, xy);
    float s2 = munsell_side(res2, res3, xy), s3 = munsell_side(res3, res0, xy);
    // step to next cells
    if     (s0 < 0 && cidxm > 0) cidxm--;
    else if(s0 < 0 && cidxm == 0) hidxm = ((hidxm + munsell_hdim/2) % munsell_hdim + munsell_hdim) % munsell_hdim; // other side of white
    else if(s2 < 0 && cidxm < munsell_cdim-2) cidxm++;
    if     (s1 < 0) hidxm++;
    else if(s3 < 0) hidxm--;
    if(s0 >= 0 && s1 >= 0 && s3 >= 0 && (s2 >= 0 || cidxm >= munsell_cdim-2))
    { // yay we're inside our quad!
      float t0 = munsell_side(res0, res1, res2); // size of triangle 0
      float t1 = munsell_side(res2, res3, res0); // size of triangle 1
      float u0, u1, u2, u3;
      if(cidxm > 0 && s0 + s1 <= t0)
      { // triangle 0
        u2 = s0 / t0;
        u0 = s1 / t0;
        u1 = 1.0-u0-u2;
        u3 = 0.0;
      }
      else
      { // triangle 1
        u2 = s3 / t1;
        u0 = s2 / t1;
        u3 = 1.0-u0-u2;
        u1 = 0.0;
      }
      // now interpolate grid corner coordinates via these barycentrics:
      float hi = u0 * hidxm + u1 * (hidxm+1.0) + u2 * (hidxm+1.0) + u3 *  hidxm;
      float ci = u0 * cidxm + u1 *  cidxm      + u2 * (cidxm+1.0) + u3 * (cidxm+1.0);
      return vec2(hi/munsell_hdim, max(0, ci/munsell_cdim));
    }
  }
}

#endif
