#version 460
#extension GL_GOOGLE_include_directive    : enable

#include "graph_layout.glsl"

layout(constant_id = 2) const uint WG_ROUNDED_IRR_SIZE_X = 1;
layout(constant_id = 3) const uint WG_ROUNDED_IRR_SIZE_Y = 1;

layout(set = 1, binding = 0) uniform sampler2D img_quartiles;

layout(push_constant, std140) uniform params_t { 
    int enable;
    float bias;
    float iqr_factor;
} pc;

void main() {
    const ivec2 ipos = ivec2(gl_GlobalInvocationID);
    if (any(greaterThanEqual(ipos, imageSize(img_irr_out)))) return;

    vec4 irr = texelFetch(img_irr, ipos, 0);
    vec4 moments = texelFetch(img_moments, ipos, 0);

    if (pc.enable == 0) {

        imageStore(img_irr_out, ipos, irr);
        imageStore(img_moments_out, ipos, moments);
        return;
    }

    const uvec2 rounded_size = uvec2(WG_ROUNDED_IRR_SIZE_X, WG_ROUNDED_IRR_SIZE_Y);
    const vec4 quantiles = texture(img_quartiles, (vec2(ipos) + 0.5) / rounded_size);
    const float max_l = pc.bias + quantiles.z + pc.iqr_factor * (quantiles.z - quantiles.y);

    if (moments.x > max_l /* = yuv_luminance(irr)*/) {
        const float factor = max_l / moments.x;
        irr.rgb *= factor;
        moments.rg *= vec2(factor, factor * factor);
    }

    imageStore(img_irr_out, ipos, irr);
    imageStore(img_moments_out, ipos, moments);
} 
