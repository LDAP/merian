#version 460
#extension GL_GOOGLE_include_directive    : enable

#include "layout.glsl"
#include "merian-shaders/color/colors_xyz.glsl"

const uint hist_size = gl_WorkGroupSize.x * gl_WorkGroupSize.y;
shared uint[hist_size] local_hist;
shared uint count;

uint get_bin(const vec3 color) {
    float l = XYZ_luminance(color);
    if (l < pow(2, params.min_log_histogram)) {
        return 0;
    }

    const float normalized = (log2(l) - params.min_log_histogram) / params.max_log_histogram;
    const uint bin = uint(normalized * (hist_size - 2) + 1);
    return clamp(bin, 0, hist_size - 1);
}

void main() {
    const ivec2 ipos = ivec2(gl_GlobalInvocationID);

    local_hist[gl_LocalInvocationIndex] = 0;
    if (gl_LocalInvocationIndex == 0)
        count = 0;
    barrier();

    if (all(lessThan(ipos, imageSize(img_out)))) {

        bool mask;
        if (params.metering == 0) {
            mask = true;
        } else if (params.metering == 1) {
            // Dirty but works :D
            mask = true;
            mask = mask && (ipos.x % max(uint(smoothstep(.1 * imageSize(img_out).r / 2, imageSize(img_out).r / 2, distance(imageSize(img_out) / 2, ipos)) * 13), 1)) == 0;
            mask = mask && (ipos.y % max(uint(smoothstep(.1 * imageSize(img_out).r / 2, imageSize(img_out).r / 2, distance(imageSize(img_out) / 2, ipos)) * 7), 1)) == 0;
        } else if (params.metering == 2) {
            mask = distance(imageSize(img_out) / 2, ipos) / min(imageSize(img_out).r, imageSize(img_out).g) < .5;
        } else {
            // should never happen
            mask = false;
        }

        if (mask) {
            const vec3 color = texelFetch(img_src, ipos, 0).rgb;
            const uint bin = get_bin(color);
            atomicAdd(local_hist[bin], 1);
            atomicAdd(count, 1);
        }
    }
    barrier();

    atomicAdd(histogram[gl_LocalInvocationIndex], local_hist[gl_LocalInvocationIndex]);
    // Number of pixel that are represented in the histogram
    if (gl_LocalInvocationIndex == 0) {
        atomicAdd(histogram[hist_size], count);
    }
}
