#version 460
#extension GL_GOOGLE_include_directive    : enable

#include "common/tonemap.glsl"
#include "config.h"

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z = 1) in;
layout (constant_id = 2) const int tonemap = 0;
layout (constant_id = 3) const int alpha_mode = 0;
layout (constant_id = 4) const int clamp_output = 1;


layout(set = 0, binding = 0) uniform sampler2D img_src;
layout(set = 0, binding = 1) uniform writeonly image2D img_output;

layout(push_constant) uniform params_t { 
    float param1;
    float param2;
    float param3;
    float param4;
    float param5;

    float perceptual_exp;
} params;

void main() {
    const ivec2 ipos = ivec2(gl_GlobalInvocationID);
    if (any(greaterThanEqual(ipos, imageSize(img_output)))) return;

    const vec4 rgb_in = texelFetch(img_src, ipos, 0);
    vec3 rgb_out;

    switch(tonemap) {
    case TONEMAP_NONE:
        rgb_out = rgb_in.rgb;
        break;
    case TONEMAP_CLAMP:
        rgb_out = tonemap_clamp(rgb_in.rgb);
        break;
    case TONEMAP_UNCHARTED_2:
        rgb_out = tonemap_uncharted2(rgb_in.rgb, params.param1, params.param2);
        break;
    case TONEMAP_REINHARD_EXTENDED:
        rgb_out = tonemap_reinhard(rgb_in.rgb, params.param1);
        break;
    case TONEMAP_ACES:
        rgb_out = tonemap_aces(rgb_in.rgb);
        break;
    case TONEMAP_ACES_APPROX:
        rgb_out = tonemap_aces_approx(rgb_in.rgb, params.param1, params.param2, params.param3, params.param4, params.param5);
        break;
    case TONEMAP_LOTTES:
        rgb_out = tonemap_lottes(rgb_in.rgb, params.param1, params.param2, params.param3, params.param4, params.param5);
        break;
    }

    if (clamp_output != 0)
        rgb_out = clamp(rgb_out, 0, 1);

    switch(alpha_mode) {
        case ALPHA_MODE_PASSTHROUGH:
            imageStore(img_output, ipos, vec4(rgb_out, rgb_in.a));
            break;
        case ALPHA_MODE_LUMINANCE:
            imageStore(img_output, ipos, vec4(rgb_out, yuv_luminance(rgb_out)));
            break;
        case ALPHA_MODE_PERCEPTUAL_LUMINANCE:
            imageStore(img_output, ipos, vec4(rgb_out, pow(yuv_luminance(rgb_out), 1. / params.perceptual_exp)));
            break;
    }
}
