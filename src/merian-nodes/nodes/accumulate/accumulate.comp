#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_control_flow_attributes : require

#include "graph_layout.glsl"
#include "merian-shaders/interpolate.glsl"

#define FILTER_MODE_NEAREST 0
#define FILTER_MODE_STOCHASTIC_BILINEAR 1

layout(constant_id = 2) const uint WG_ROUNDED_IRR_SIZE_X = 1;
layout(constant_id = 3) const uint WG_ROUNDED_IRR_SIZE_Y = 1;

layout (constant_id = 4) const int FILTER_MODE = FILTER_MODE_NEAREST;
layout (constant_id = 5) const bool EXTENDED_SEARCH = true;
layout (constant_id = 6) const bool REUSE_BORDER = false;
layout (constant_id = 7) const bool USE_MOTION_VECTORS = true;

layout(set = 1, binding = 0) uniform sampler2D img_quartiles;

layout(push_constant, std140) uniform pc_t { 
    int firefly_filter_enable;
    float firefly_bias;
    float firefly_ipr_factor;
    float firefly_hard_clamp;

    float accum_alpha;
    float accum_max_hist;
    float normal_reject_cos;
    float z_reject_percent;
    int clear;

    float adaptive_alpha_reduction;
    float adaptive_alpha_ipr_factor;

    uint iteration;
} pc;

#include "merian-shaders/normal_encode.glsl"
#include "merian-shaders/reprojection.glsl"
#include "merian-shaders/hash.glsl"
#include "merian-shaders/random.glsl"
#include "merian-shaders/color/colors_yuv.glsl"


void main() {
  const ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if (any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec4 src = texelFetch(img_src, ipos, 0); // contains second moment in a


  vec4 percentiles;
  if (pc.firefly_filter_enable != 0 || (pc.adaptive_alpha_reduction > 0.0 && pc.clear != 1 && pc.accum_alpha != 0)) {
    const uvec2 rounded_size = uvec2(WG_ROUNDED_IRR_SIZE_X, WG_ROUNDED_IRR_SIZE_Y);
    percentiles = texture(img_quartiles, (vec2(ipos) + 0.5) / rounded_size);
  }


  // FIREFLY CLAMPING/SUPPRESSION
  {
    float max_l = pc.firefly_hard_clamp;
    if (pc.firefly_filter_enable != 0) {
      max_l = min(max_l, pc.firefly_bias + percentiles.y + pc.firefly_ipr_factor * (percentiles.y - percentiles.x));
    }

    const float l = yuv_luminance(src.rgb);
    if (l > max_l) {
      const float factor = max_l / l;
      src.rgb *= factor;
      src.a   *= factor * factor;
    }
  }

  // CLEAR SHORTCUT
  if (pc.clear == 1 || pc.accum_alpha == 0) {
    imageStore(img_out, ipos, src);
    imageStore(img_history, ipos, uvec4(1, 0, 0, 0));
    return;
  }

  // REPROJECT
  ivec2 prev_ipos;
  float max_history = pc.accum_max_hist;
  uint rng_state = pcg3d16(uvec3(ipos, pc.iteration));
  if (USE_MOTION_VECTORS) {
    const vec2 mv = texelFetch(img_mv, ipos, 0).rg;
    vec2 prev_pos = ipos + mv;

    if (REUSE_BORDER) {
      // Attemp to reuse information at the image border.
      // This results in minor smearing but looks a lot better than
      // noise / SVGF blotches.
      if (reprojection_intersect_border(prev_pos, mv, imageSize(img_out) - 1)) {
        // reset history to converge faster
        max_history = 2.0;
      }
    }

    if (FILTER_MODE == FILTER_MODE_STOCHASTIC_BILINEAR) {
      prev_ipos = reproject_pixel_stochastic(prev_pos, XorShift32(rng_state));
    } else {
      // FILTER_MODE == FILTER_MODE_NEAREST
      prev_ipos = ivec2(round(prev_pos));
    }
  } else {
    prev_ipos = ipos;
    max_history = pc.accum_max_hist;
  }

  // GET CURRENT PIXEL INFO
  vec3 normal;
  f16vec2 grad_z;
  float linear_z;
  float vel_z;
  {
    const GBuffer gbuf = gbuffer_load_pixel(gbuffer, ipos);

    normal = gbuffer_get_normal(gbuf);
    grad_z = gbuffer_get_grad_z(gbuf);
    linear_z = gbuffer_get_linear_z(gbuf);
    vel_z = gbuffer_get_vel_z(gbuf);
  }


  // GET PREVIOUS PIXEL
  float prev_history = 0.0;
  vec4 prev_out = vec4(0);

  bool found = false;
  if (all(lessThan(prev_ipos, textureSize(img_src, 0))) &&
      all(greaterThanEqual(prev_ipos, ivec2(0)))) {

    
    const GBuffer prev_gbuf = gbuffer_load_pixel(prev_gbuffer, prev_ipos);
    found = reprojection_valid(normal,
                            gbuffer_get_normal(prev_gbuf),
                            pc.normal_reject_cos,
                            linear_z,
                            vel_z,
                            gbuffer_get_linear_z(prev_gbuf),
                            pc.z_reject_percent);

    if (found) {
      prev_history = texelFetch(img_prev_history, prev_ipos, 0).r;
      prev_out = texelFetch(img_prev_out, prev_ipos, 0);
    }
  }


  if (EXTENDED_SEARCH) {
    if (!found) {

      float sum_w = 0.0;

      [[unroll]]
      for(int i = 0; i <= 9; i++) {
        const ivec2 offset = ivec2(round(XorShift32Vec2(rng_state) * 4)) - 2;
        const ivec2 tc = prev_ipos + offset;

        if(any(greaterThanEqual(tc, textureSize(img_src, 0))) || any(lessThan(tc, ivec2(0))))
          continue;

        const GBuffer prev_gbuf = gbuffer_load_pixel(prev_gbuffer, tc);

        const float w = reprojection_weight(normal,
                                            gbuffer_get_normal(prev_gbuf),
                                            pc.normal_reject_cos * 0.8,
                                            linear_z,
                                            vel_z,
                                            offset,
                                            grad_z,
                                            gbuffer_get_linear_z(prev_gbuf),
                                            pc.z_reject_percent * 2.);

        if (w > 0.0001) {
          prev_history += w * texelFetch(img_prev_history, tc, 0).r;
          prev_out     += w * texelFetch(img_prev_out, tc, 0);
          sum_w        += w;
        }
      }

      if (sum_w > 0.001) {
        found = true;
        prev_out /= sum_w;
        prev_history /= sum_w;
      }

    }
  }


  if (found && !any(isnan(prev_out)) && !any(isinf(prev_out))) {

    if (pc.adaptive_alpha_reduction > 0.0) {
      const float ipr = pc.adaptive_alpha_ipr_factor * (percentiles.w - percentiles.z);
      const float prev_l = yuv_luminance(prev_out.rgb);
      float adaptive_alpha = (1.0 - pc.adaptive_alpha_reduction * linearstep(percentiles.w, percentiles.w + ipr, prev_l));
      adaptive_alpha      *= (1.0 - pc.adaptive_alpha_reduction * (1.0 - linearstep(percentiles.z - ipr, percentiles.z, prev_l)));

      // update history length to match reduced alpha:
      max_history = min(1.0 / (1.0 - adaptive_alpha), max_history);
    }

    const float new_history = min(prev_history + 1, max_history);
    const float alpha = max(1. - pc.accum_alpha, 1. / new_history);

    const vec4 result = mix(prev_out, src , alpha);

    imageStore(img_out, ipos, result);
    imageStore(img_history, ipos, uvec4(new_history, 0, 0, 0));
  } else {
    imageStore(img_out, ipos, src);
    imageStore(img_history, ipos, uvec4(1, 0, 0, 0));
  }
  
} 
