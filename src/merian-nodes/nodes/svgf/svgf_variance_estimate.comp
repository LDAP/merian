#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_control_flow_attributes : enable

#include "svgf_graph_layout.glsl"
#include "common/normal_encode.glsl"
#include "common/colors_yuv.glsl"
#include "config.h"

/*
 * Reads the accumulated irradiance and the moments, estimates the variance,
 * and prepares the filter input `img_filter_in`.
 */

layout (constant_id = 2) const int SVGF_ITERATIONS = 0;

layout(set = 1, binding = 0) uniform sampler2D unused; // needed to match the filter layout
layout(set = 1, binding = 1) uniform writeonly restrict image2D img_filter_in;

layout(push_constant, std140) uniform push_t {
    float normal_reject_cos;
    float depth_accept;
    float spatial_falloff;
    float spatial_bias;
} params;

#define SHARED_SIZE (gl_WorkGroupSize.x * gl_WorkGroupSize.y)

// update VE_SHARED_MEMORY_PER_PIXEL if you change anything here!
shared vec2 shared_moments[SHARED_SIZE];
shared vec4 shared_irr[SHARED_SIZE];
shared vec3 shared_normal[SHARED_SIZE];
shared float shared_z[SHARED_SIZE];

#define SHARED_INDEX(X, Y) ((Y) * gl_WorkGroupSize.x + X)

#define IS_ON_TILE (all(greaterThanEqual(gl_LocalInvocationID.xy, ivec2(VE_SPATIAL_RADIUS))) && all(lessThan(gl_LocalInvocationID.xy, gl_WorkGroupSize.xy - VE_SPATIAL_RADIUS)))
#define TILE_ID (ivec2(gl_LocalInvocationID.xy) - VE_SPATIAL_RADIUS)
#define TILE_SIZE (gl_WorkGroupSize.xy - 2 * VE_SPATIAL_RADIUS)

void main() {
  const ivec2 ipos = ivec2(gl_WorkGroupID.xy * TILE_SIZE) + TILE_ID;
  const uint shared_idx = SHARED_INDEX(gl_LocalInvocationID.x, gl_LocalInvocationID.y);

  if (SVGF_ITERATIONS == 0) {
    if (all(lessThan(ipos, imageSize(img_filter_in))) && IS_ON_TILE)
      imageStore(img_filter_in, ipos, vec4(texelFetch(img_irr, ipos, 0).rgb, 0));
    return;
  }

  // Load all necessary information into shared memory

  vec2 center_grad_z;
  {
    const GBuffer gbuf = gbuffer[gbuffer_index(ipos, imageSize(img_filter_in))];

    shared_moments[shared_idx]  = texelFetch(img_moments, ipos, 0).rg;
    shared_irr[shared_idx]      = texelFetch(img_irr, ipos, 0);
    shared_normal[shared_idx]   = geo_decode_normal(gbuf.enc_normal);
    shared_z[shared_idx]        = gbuf.linear_z;
    center_grad_z               = gbuf.grad_z;
  }
  barrier();

  if (any(greaterThanEqual(ipos, imageSize(img_filter_in))) || !IS_ON_TILE)
    return;

  #define center_irr_histlen shared_irr[shared_idx]
  #define center_moments shared_moments[shared_idx]
  #define center_normal shared_normal[shared_idx]
  #define center_linear_z shared_z[shared_idx]

  vec4 irr_histlen = center_irr_histlen;
  vec2 moments = center_moments;
  float sum_w = 1.0;

  const float kernel[] = {1., 2. / 3., 1. / 6.};

  // spatial filtering when variance is 0 leads to unnecessary filtering of surfaces which variance is really 0
  // however it prevents black trails.
  [[unroll]]
  for(int yy = -VE_SPATIAL_RADIUS; yy <= VE_SPATIAL_RADIUS; yy++) {
    [[unroll]]
    for(int xx = -VE_SPATIAL_RADIUS; xx <= VE_SPATIAL_RADIUS; xx++) {
      if(xx != 0 || yy != 0) { // added already
        const ivec2 p = ivec2(gl_LocalInvocationID.xy) + ivec2(xx, yy);

        float w = 1.0;
        // Weight neighbors with similar normals
        w *= smoothstep(params.normal_reject_cos, 1.0, dot(center_normal, shared_normal[SHARED_INDEX(p.x, p.y)]));
        // Weight neighbors with similar depth
        // w *= 1.0 - smoothstep(0.0, params.depth_reject_percent * max(gbuf.linear_z, neigh_gbuf.linear_z), abs(gbuf.linear_z - neigh_gbuf.linear_z));
        w *= exp(-10 * abs(center_linear_z + dot(center_grad_z, vec2(xx, yy)) - shared_z[SHARED_INDEX(p.x, p.y)]) / params.depth_accept);
        // smoothing kernel
        w *= kernel[abs(xx)] * kernel[abs(yy)];
        // Weight lower with increasing history
        //w *= 1.0 - irr_histlen.a / params.spatial_threshold;

        sum_w           += w;
        irr_histlen.rgb += w * shared_irr[SHARED_INDEX(p.x, p.y)].rgb;
        moments         += w * shared_moments[SHARED_INDEX(p.x, p.y)].rg;
      }
    }
  }

  irr_histlen.rgb /= sum_w;
  moments         /= sum_w;

  float variance = max(0.0, moments.y - moments.x * moments.x);
  const float center_variance = max(0.0, center_moments.y - center_moments.x * center_moments.x);
  const float alpha = clamp(params.spatial_bias / pow(irr_histlen.a, params.spatial_falloff), 0, 1);
  variance = mix(center_variance, variance, alpha);
  irr_histlen.rgb = mix(center_irr_histlen.rgb, irr_histlen.rgb, alpha);

  imageStore(img_filter_in, ipos, vec4(irr_histlen.rgb, variance));
}

