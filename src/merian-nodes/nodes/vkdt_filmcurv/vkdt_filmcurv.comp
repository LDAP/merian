#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable

#include "merian-shaders/colors/colors_rec2020.glsl"
#include "merian-shaders/colors/colors_dng.glsl"
#include "merian-shaders/colors/colors_dtucs.glsl"
#include "merian-shaders/colors/colors_munsell.glsl"

layout(local_size_x_id = 0, local_size_y_id = 1) in;

layout(push_constant) uniform constants {
  float brightness;
  float contrast;
  float bias;
  int   colourmode;
} params;

layout(binding = 0) uniform sampler2D img_in;
layout(binding = 1) uniform writeonly restrict image2D img_out;

#ifdef WRITE_CURVE
layout(binding = 2) uniform writeonly restrict image2D img_crv;
#endif

float
weibull_cdf(
    float x,  // input value (0, infty)
    float il, // weibull 1.0/lambda, scale parameter (0, infty)
    float k)  // weibull k, shape parameter          (0, infty)
{
  return 1.0 - exp(-pow(max(x, 1e-7)*il, k));
}

float // derivative of cdf:
weibull_pdf(float x, float il, float k)
{
  x = max(x, 1e-7);
  return k*il * pow(x*il, k-1.0) * exp(-pow(x*il, k));
}
vec3 // vector version
weibull_cdf(vec3 x, float il, float k)
{
  return 1.0 - exp(-pow(max(x, 1e-7)*il, vec3(k)));
}

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec3 col0 = texelFetch(img_in, ipos, 0).rgb;
  // Operates in rec2020
  col0 = rec709_to_rec2020(col0);

  float il = max(5e-3, params.brightness);
  float k  = max(1e-5, params.contrast);

  col0 += params.bias;
  vec3 col1 = weibull_cdf(col0, il, k);
  if(params.colourmode == 0)
  { // colour using aurelien's patented ucs:
    const mat3 xyz_to_rec2020 = mat3(
        1.7166511880, -0.6666843518, 0.0176398574, 
        -0.3556707838, 1.6164812366, -0.0427706133, 
        -0.2533662814, 0.0157685458, 0.9421031212);
    vec3 xyz0 = inverse(xyz_to_rec2020) * col0;
    vec3 xyz1 = inverse(xyz_to_rec2020) * col1;
    vec3 xyY0 = vec3(xyz0.xy / max(1e-4, dot(vec3(1),xyz0)), xyz0.y);
    vec3 xyY1 = vec3(xyz1.xy / max(1e-4, dot(vec3(1),xyz1)), xyz0.y);
    const float L_white = 1.0;
    vec3 jch0 = xyY_to_dt_UCS_JCH(xyY0, L_white);
    vec3 jch1 = xyY_to_dt_UCS_JCH(xyY1, L_white);
    jch1 = vec3(jch1.x, jch1.y, jch0.z);
    xyY1 = dt_UCS_JCH_to_xyY(jch1, L_white);
    xyz1 = vec3(xyY1.xy, 1.0-xyY1.x-xyY1.y) * xyz1.y / max(1e-4,xyY1.y);
    col1 = xyz_to_rec2020 * xyz1;
  }
  else if(params.colourmode == 2)
  { // colour reconstruction using munsell hue constancy.
    vec3 xyY0 = rec2020_to_xyY(col0);
    vec2 m0   = munsell_from_xy(xyY0.xy);
    vec3 xyY1 = rec2020_to_xyY(col1);
    vec2 m1   = munsell_from_xy(xyY1.xy);
    xyY1.xy   = munsell_to_xy(vec2(m0.x, m1.y));
    col1 = xyY_to_rec2020(xyY1);
  }
  else if(params.colourmode == 3)
  { // simple rgb/hsv hack:
    col1 = adjust_colour_dng(col0, col1);
  }
  else if(params.colourmode == 1)
  { // apply per channel
  }

#ifdef WRITE_CURVE
  if(all(lessThan(ipos, imageSize(img_crv))))
  {
    vec4 col_crv = vec4(0, 0, 0, 1);
    float of0 = 0;//0.1; // extend range outside [0,1]?
    float off = of0 * imageSize(img_crv).x;
    float x = ipos.x/float(imageSize(img_crv).x - off);
    float y = weibull_cdf(x, il, k);
    float ddx = weibull_pdf(x, il, k);
    const float w = 2.0; // stroke width
    float t = w * sqrt(1.0 + ddx*ddx); // line thinckness along const y
    float d = abs((1.0+of0-y) * (1.0-of0) * imageSize(img_crv).y - ipos.y);
    col_crv = max(col_crv, 0.2 * vec4(vec3(smoothstep(t, 0.0, d)), 1));
    imageStore(img_crv, ipos, col_crv);
  }
#endif

  col1 = rec2020_to_rec709(col1);

  imageStore(img_out, ipos, vec4(col1, 1));
}

