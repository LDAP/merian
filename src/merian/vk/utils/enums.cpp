// This file was is autogenerated for Vulkan v1.3.275.
// Created: 2024-07-04 17:16:56.694775

#include "enums.hpp"

#include <vulkan/vulkan.hpp>

namespace merian {

static constexpr std::array<VkImageLayout, 9> _VkImageLayout_values = {
    VK_IMAGE_LAYOUT_UNDEFINED,
    VK_IMAGE_LAYOUT_GENERAL,
    VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL,
    VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
    VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL,
    VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,
    VK_IMAGE_LAYOUT_PREINITIALIZED};

template<> constexpr uint32_t enum_size<VkImageLayout>() {
    return _VkImageLayout_values.size();
}

template<> const VkImageLayout* enum_values<VkImageLayout>() {
    return _VkImageLayout_values.data();
}

static constexpr std::array<VkAttachmentLoadOp, 3> _VkAttachmentLoadOp_values = {
    VK_ATTACHMENT_LOAD_OP_LOAD,
    VK_ATTACHMENT_LOAD_OP_CLEAR,
    VK_ATTACHMENT_LOAD_OP_DONT_CARE};

template<> constexpr uint32_t enum_size<VkAttachmentLoadOp>() {
    return _VkAttachmentLoadOp_values.size();
}

template<> const VkAttachmentLoadOp* enum_values<VkAttachmentLoadOp>() {
    return _VkAttachmentLoadOp_values.data();
}

static constexpr std::array<VkAttachmentStoreOp, 2> _VkAttachmentStoreOp_values = {
    VK_ATTACHMENT_STORE_OP_STORE,
    VK_ATTACHMENT_STORE_OP_DONT_CARE};

template<> constexpr uint32_t enum_size<VkAttachmentStoreOp>() {
    return _VkAttachmentStoreOp_values.size();
}

template<> const VkAttachmentStoreOp* enum_values<VkAttachmentStoreOp>() {
    return _VkAttachmentStoreOp_values.data();
}

static constexpr std::array<VkImageType, 3> _VkImageType_values = {
    VK_IMAGE_TYPE_1D,
    VK_IMAGE_TYPE_2D,
    VK_IMAGE_TYPE_3D};

template<> constexpr uint32_t enum_size<VkImageType>() {
    return _VkImageType_values.size();
}

template<> const VkImageType* enum_values<VkImageType>() {
    return _VkImageType_values.data();
}

static constexpr std::array<VkImageTiling, 2> _VkImageTiling_values = {
    VK_IMAGE_TILING_OPTIMAL,
    VK_IMAGE_TILING_LINEAR};

template<> constexpr uint32_t enum_size<VkImageTiling>() {
    return _VkImageTiling_values.size();
}

template<> const VkImageTiling* enum_values<VkImageTiling>() {
    return _VkImageTiling_values.data();
}

static constexpr std::array<VkImageViewType, 7> _VkImageViewType_values = {
    VK_IMAGE_VIEW_TYPE_1D,
    VK_IMAGE_VIEW_TYPE_2D,
    VK_IMAGE_VIEW_TYPE_3D,
    VK_IMAGE_VIEW_TYPE_CUBE,
    VK_IMAGE_VIEW_TYPE_1D_ARRAY,
    VK_IMAGE_VIEW_TYPE_2D_ARRAY,
    VK_IMAGE_VIEW_TYPE_CUBE_ARRAY};

template<> constexpr uint32_t enum_size<VkImageViewType>() {
    return _VkImageViewType_values.size();
}

template<> const VkImageViewType* enum_values<VkImageViewType>() {
    return _VkImageViewType_values.data();
}

static constexpr std::array<VkCommandBufferLevel, 2> _VkCommandBufferLevel_values = {
    VK_COMMAND_BUFFER_LEVEL_PRIMARY,
    VK_COMMAND_BUFFER_LEVEL_SECONDARY};

template<> constexpr uint32_t enum_size<VkCommandBufferLevel>() {
    return _VkCommandBufferLevel_values.size();
}

template<> const VkCommandBufferLevel* enum_values<VkCommandBufferLevel>() {
    return _VkCommandBufferLevel_values.data();
}

static constexpr std::array<VkComponentSwizzle, 7> _VkComponentSwizzle_values = {
    VK_COMPONENT_SWIZZLE_IDENTITY,
    VK_COMPONENT_SWIZZLE_ZERO,
    VK_COMPONENT_SWIZZLE_ONE,
    VK_COMPONENT_SWIZZLE_R,
    VK_COMPONENT_SWIZZLE_G,
    VK_COMPONENT_SWIZZLE_B,
    VK_COMPONENT_SWIZZLE_A};

template<> constexpr uint32_t enum_size<VkComponentSwizzle>() {
    return _VkComponentSwizzle_values.size();
}

template<> const VkComponentSwizzle* enum_values<VkComponentSwizzle>() {
    return _VkComponentSwizzle_values.data();
}

static constexpr std::array<VkDescriptorType, 11> _VkDescriptorType_values = {
    VK_DESCRIPTOR_TYPE_SAMPLER,
    VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER,
    VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE,
    VK_DESCRIPTOR_TYPE_STORAGE_IMAGE,
    VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER,
    VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC,
    VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT};

template<> constexpr uint32_t enum_size<VkDescriptorType>() {
    return _VkDescriptorType_values.size();
}

template<> const VkDescriptorType* enum_values<VkDescriptorType>() {
    return _VkDescriptorType_values.data();
}

static constexpr std::array<VkQueryType, 3> _VkQueryType_values = {
    VK_QUERY_TYPE_OCCLUSION,
    VK_QUERY_TYPE_PIPELINE_STATISTICS,
    VK_QUERY_TYPE_TIMESTAMP};

template<> constexpr uint32_t enum_size<VkQueryType>() {
    return _VkQueryType_values.size();
}

template<> const VkQueryType* enum_values<VkQueryType>() {
    return _VkQueryType_values.data();
}

static constexpr std::array<VkBorderColor, 6> _VkBorderColor_values = {
    VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK,
    VK_BORDER_COLOR_INT_TRANSPARENT_BLACK,
    VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK,
    VK_BORDER_COLOR_INT_OPAQUE_BLACK,
    VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE,
    VK_BORDER_COLOR_INT_OPAQUE_WHITE};

template<> constexpr uint32_t enum_size<VkBorderColor>() {
    return _VkBorderColor_values.size();
}

template<> const VkBorderColor* enum_values<VkBorderColor>() {
    return _VkBorderColor_values.data();
}

static constexpr std::array<VkPipelineBindPoint, 2> _VkPipelineBindPoint_values = {
    VK_PIPELINE_BIND_POINT_GRAPHICS,
    VK_PIPELINE_BIND_POINT_COMPUTE};

template<> constexpr uint32_t enum_size<VkPipelineBindPoint>() {
    return _VkPipelineBindPoint_values.size();
}

template<> const VkPipelineBindPoint* enum_values<VkPipelineBindPoint>() {
    return _VkPipelineBindPoint_values.data();
}

static constexpr std::array<VkPipelineCacheHeaderVersion, 1> _VkPipelineCacheHeaderVersion_values = {
    VK_PIPELINE_CACHE_HEADER_VERSION_ONE};

template<> constexpr uint32_t enum_size<VkPipelineCacheHeaderVersion>() {
    return _VkPipelineCacheHeaderVersion_values.size();
}

template<> const VkPipelineCacheHeaderVersion* enum_values<VkPipelineCacheHeaderVersion>() {
    return _VkPipelineCacheHeaderVersion_values.data();
}

static constexpr std::array<VkPrimitiveTopology, 11> _VkPrimitiveTopology_values = {
    VK_PRIMITIVE_TOPOLOGY_POINT_LIST,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY,
    VK_PRIMITIVE_TOPOLOGY_PATCH_LIST};

template<> constexpr uint32_t enum_size<VkPrimitiveTopology>() {
    return _VkPrimitiveTopology_values.size();
}

template<> const VkPrimitiveTopology* enum_values<VkPrimitiveTopology>() {
    return _VkPrimitiveTopology_values.data();
}

static constexpr std::array<VkSharingMode, 2> _VkSharingMode_values = {
    VK_SHARING_MODE_EXCLUSIVE,
    VK_SHARING_MODE_CONCURRENT};

template<> constexpr uint32_t enum_size<VkSharingMode>() {
    return _VkSharingMode_values.size();
}

template<> const VkSharingMode* enum_values<VkSharingMode>() {
    return _VkSharingMode_values.data();
}

static constexpr std::array<VkIndexType, 2> _VkIndexType_values = {
    VK_INDEX_TYPE_UINT16,
    VK_INDEX_TYPE_UINT32};

template<> constexpr uint32_t enum_size<VkIndexType>() {
    return _VkIndexType_values.size();
}

template<> const VkIndexType* enum_values<VkIndexType>() {
    return _VkIndexType_values.data();
}

static constexpr std::array<VkFilter, 2> _VkFilter_values = {
    VK_FILTER_NEAREST,
    VK_FILTER_LINEAR};

template<> constexpr uint32_t enum_size<VkFilter>() {
    return _VkFilter_values.size();
}

template<> const VkFilter* enum_values<VkFilter>() {
    return _VkFilter_values.data();
}

static constexpr std::array<VkSamplerMipmapMode, 2> _VkSamplerMipmapMode_values = {
    VK_SAMPLER_MIPMAP_MODE_NEAREST,
    VK_SAMPLER_MIPMAP_MODE_LINEAR};

template<> constexpr uint32_t enum_size<VkSamplerMipmapMode>() {
    return _VkSamplerMipmapMode_values.size();
}

template<> const VkSamplerMipmapMode* enum_values<VkSamplerMipmapMode>() {
    return _VkSamplerMipmapMode_values.data();
}

static constexpr std::array<VkSamplerAddressMode, 4> _VkSamplerAddressMode_values = {
    VK_SAMPLER_ADDRESS_MODE_REPEAT,
    VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER};

template<> constexpr uint32_t enum_size<VkSamplerAddressMode>() {
    return _VkSamplerAddressMode_values.size();
}

template<> const VkSamplerAddressMode* enum_values<VkSamplerAddressMode>() {
    return _VkSamplerAddressMode_values.data();
}

static constexpr std::array<VkCompareOp, 8> _VkCompareOp_values = {
    VK_COMPARE_OP_NEVER,
    VK_COMPARE_OP_LESS,
    VK_COMPARE_OP_EQUAL,
    VK_COMPARE_OP_LESS_OR_EQUAL,
    VK_COMPARE_OP_GREATER,
    VK_COMPARE_OP_NOT_EQUAL,
    VK_COMPARE_OP_GREATER_OR_EQUAL,
    VK_COMPARE_OP_ALWAYS};

template<> constexpr uint32_t enum_size<VkCompareOp>() {
    return _VkCompareOp_values.size();
}

template<> const VkCompareOp* enum_values<VkCompareOp>() {
    return _VkCompareOp_values.data();
}

static constexpr std::array<VkPolygonMode, 3> _VkPolygonMode_values = {
    VK_POLYGON_MODE_FILL,
    VK_POLYGON_MODE_LINE,
    VK_POLYGON_MODE_POINT};

template<> constexpr uint32_t enum_size<VkPolygonMode>() {
    return _VkPolygonMode_values.size();
}

template<> const VkPolygonMode* enum_values<VkPolygonMode>() {
    return _VkPolygonMode_values.data();
}

static constexpr std::array<VkFrontFace, 2> _VkFrontFace_values = {
    VK_FRONT_FACE_COUNTER_CLOCKWISE,
    VK_FRONT_FACE_CLOCKWISE};

template<> constexpr uint32_t enum_size<VkFrontFace>() {
    return _VkFrontFace_values.size();
}

template<> const VkFrontFace* enum_values<VkFrontFace>() {
    return _VkFrontFace_values.data();
}

static constexpr std::array<VkBlendFactor, 19> _VkBlendFactor_values = {
    VK_BLEND_FACTOR_ZERO,
    VK_BLEND_FACTOR_ONE,
    VK_BLEND_FACTOR_SRC_COLOR,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR,
    VK_BLEND_FACTOR_DST_COLOR,
    VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR,
    VK_BLEND_FACTOR_SRC_ALPHA,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA,
    VK_BLEND_FACTOR_DST_ALPHA,
    VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA,
    VK_BLEND_FACTOR_CONSTANT_COLOR,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR,
    VK_BLEND_FACTOR_CONSTANT_ALPHA,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA,
    VK_BLEND_FACTOR_SRC_ALPHA_SATURATE,
    VK_BLEND_FACTOR_SRC1_COLOR,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR,
    VK_BLEND_FACTOR_SRC1_ALPHA,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA};

template<> constexpr uint32_t enum_size<VkBlendFactor>() {
    return _VkBlendFactor_values.size();
}

template<> const VkBlendFactor* enum_values<VkBlendFactor>() {
    return _VkBlendFactor_values.data();
}

static constexpr std::array<VkBlendOp, 5> _VkBlendOp_values = {
    VK_BLEND_OP_ADD,
    VK_BLEND_OP_SUBTRACT,
    VK_BLEND_OP_REVERSE_SUBTRACT,
    VK_BLEND_OP_MIN,
    VK_BLEND_OP_MAX};

template<> constexpr uint32_t enum_size<VkBlendOp>() {
    return _VkBlendOp_values.size();
}

template<> const VkBlendOp* enum_values<VkBlendOp>() {
    return _VkBlendOp_values.data();
}

static constexpr std::array<VkStencilOp, 8> _VkStencilOp_values = {
    VK_STENCIL_OP_KEEP,
    VK_STENCIL_OP_ZERO,
    VK_STENCIL_OP_REPLACE,
    VK_STENCIL_OP_INCREMENT_AND_CLAMP,
    VK_STENCIL_OP_DECREMENT_AND_CLAMP,
    VK_STENCIL_OP_INVERT,
    VK_STENCIL_OP_INCREMENT_AND_WRAP,
    VK_STENCIL_OP_DECREMENT_AND_WRAP};

template<> constexpr uint32_t enum_size<VkStencilOp>() {
    return _VkStencilOp_values.size();
}

template<> const VkStencilOp* enum_values<VkStencilOp>() {
    return _VkStencilOp_values.data();
}

static constexpr std::array<VkLogicOp, 16> _VkLogicOp_values = {
    VK_LOGIC_OP_CLEAR,
    VK_LOGIC_OP_AND,
    VK_LOGIC_OP_AND_REVERSE,
    VK_LOGIC_OP_COPY,
    VK_LOGIC_OP_AND_INVERTED,
    VK_LOGIC_OP_NO_OP,
    VK_LOGIC_OP_XOR,
    VK_LOGIC_OP_OR,
    VK_LOGIC_OP_NOR,
    VK_LOGIC_OP_EQUIVALENT,
    VK_LOGIC_OP_INVERT,
    VK_LOGIC_OP_OR_REVERSE,
    VK_LOGIC_OP_COPY_INVERTED,
    VK_LOGIC_OP_OR_INVERTED,
    VK_LOGIC_OP_NAND,
    VK_LOGIC_OP_SET};

template<> constexpr uint32_t enum_size<VkLogicOp>() {
    return _VkLogicOp_values.size();
}

template<> const VkLogicOp* enum_values<VkLogicOp>() {
    return _VkLogicOp_values.data();
}

static constexpr std::array<VkInternalAllocationType, 1> _VkInternalAllocationType_values = {
    VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE};

template<> constexpr uint32_t enum_size<VkInternalAllocationType>() {
    return _VkInternalAllocationType_values.size();
}

template<> const VkInternalAllocationType* enum_values<VkInternalAllocationType>() {
    return _VkInternalAllocationType_values.data();
}

static constexpr std::array<VkSystemAllocationScope, 5> _VkSystemAllocationScope_values = {
    VK_SYSTEM_ALLOCATION_SCOPE_COMMAND,
    VK_SYSTEM_ALLOCATION_SCOPE_OBJECT,
    VK_SYSTEM_ALLOCATION_SCOPE_CACHE,
    VK_SYSTEM_ALLOCATION_SCOPE_DEVICE,
    VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE};

template<> constexpr uint32_t enum_size<VkSystemAllocationScope>() {
    return _VkSystemAllocationScope_values.size();
}

template<> const VkSystemAllocationScope* enum_values<VkSystemAllocationScope>() {
    return _VkSystemAllocationScope_values.data();
}

static constexpr std::array<VkPhysicalDeviceType, 5> _VkPhysicalDeviceType_values = {
    VK_PHYSICAL_DEVICE_TYPE_OTHER,
    VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU,
    VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU,
    VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU,
    VK_PHYSICAL_DEVICE_TYPE_CPU};

template<> constexpr uint32_t enum_size<VkPhysicalDeviceType>() {
    return _VkPhysicalDeviceType_values.size();
}

template<> const VkPhysicalDeviceType* enum_values<VkPhysicalDeviceType>() {
    return _VkPhysicalDeviceType_values.data();
}

static constexpr std::array<VkVertexInputRate, 2> _VkVertexInputRate_values = {
    VK_VERTEX_INPUT_RATE_VERTEX,
    VK_VERTEX_INPUT_RATE_INSTANCE};

template<> constexpr uint32_t enum_size<VkVertexInputRate>() {
    return _VkVertexInputRate_values.size();
}

template<> const VkVertexInputRate* enum_values<VkVertexInputRate>() {
    return _VkVertexInputRate_values.data();
}

static constexpr std::array<VkFormat, 185> _VkFormat_values = {
    VK_FORMAT_UNDEFINED,
    VK_FORMAT_R4G4_UNORM_PACK8,
    VK_FORMAT_R4G4B4A4_UNORM_PACK16,
    VK_FORMAT_B4G4R4A4_UNORM_PACK16,
    VK_FORMAT_R5G6B5_UNORM_PACK16,
    VK_FORMAT_B5G6R5_UNORM_PACK16,
    VK_FORMAT_R5G5B5A1_UNORM_PACK16,
    VK_FORMAT_B5G5R5A1_UNORM_PACK16,
    VK_FORMAT_A1R5G5B5_UNORM_PACK16,
    VK_FORMAT_R8_UNORM,
    VK_FORMAT_R8_SNORM,
    VK_FORMAT_R8_USCALED,
    VK_FORMAT_R8_SSCALED,
    VK_FORMAT_R8_UINT,
    VK_FORMAT_R8_SINT,
    VK_FORMAT_R8_SRGB,
    VK_FORMAT_R8G8_UNORM,
    VK_FORMAT_R8G8_SNORM,
    VK_FORMAT_R8G8_USCALED,
    VK_FORMAT_R8G8_SSCALED,
    VK_FORMAT_R8G8_UINT,
    VK_FORMAT_R8G8_SINT,
    VK_FORMAT_R8G8_SRGB,
    VK_FORMAT_R8G8B8_UNORM,
    VK_FORMAT_R8G8B8_SNORM,
    VK_FORMAT_R8G8B8_USCALED,
    VK_FORMAT_R8G8B8_SSCALED,
    VK_FORMAT_R8G8B8_UINT,
    VK_FORMAT_R8G8B8_SINT,
    VK_FORMAT_R8G8B8_SRGB,
    VK_FORMAT_B8G8R8_UNORM,
    VK_FORMAT_B8G8R8_SNORM,
    VK_FORMAT_B8G8R8_USCALED,
    VK_FORMAT_B8G8R8_SSCALED,
    VK_FORMAT_B8G8R8_UINT,
    VK_FORMAT_B8G8R8_SINT,
    VK_FORMAT_B8G8R8_SRGB,
    VK_FORMAT_R8G8B8A8_UNORM,
    VK_FORMAT_R8G8B8A8_SNORM,
    VK_FORMAT_R8G8B8A8_USCALED,
    VK_FORMAT_R8G8B8A8_SSCALED,
    VK_FORMAT_R8G8B8A8_UINT,
    VK_FORMAT_R8G8B8A8_SINT,
    VK_FORMAT_R8G8B8A8_SRGB,
    VK_FORMAT_B8G8R8A8_UNORM,
    VK_FORMAT_B8G8R8A8_SNORM,
    VK_FORMAT_B8G8R8A8_USCALED,
    VK_FORMAT_B8G8R8A8_SSCALED,
    VK_FORMAT_B8G8R8A8_UINT,
    VK_FORMAT_B8G8R8A8_SINT,
    VK_FORMAT_B8G8R8A8_SRGB,
    VK_FORMAT_A8B8G8R8_UNORM_PACK32,
    VK_FORMAT_A8B8G8R8_SNORM_PACK32,
    VK_FORMAT_A8B8G8R8_USCALED_PACK32,
    VK_FORMAT_A8B8G8R8_SSCALED_PACK32,
    VK_FORMAT_A8B8G8R8_UINT_PACK32,
    VK_FORMAT_A8B8G8R8_SINT_PACK32,
    VK_FORMAT_A8B8G8R8_SRGB_PACK32,
    VK_FORMAT_A2R10G10B10_UNORM_PACK32,
    VK_FORMAT_A2R10G10B10_SNORM_PACK32,
    VK_FORMAT_A2R10G10B10_USCALED_PACK32,
    VK_FORMAT_A2R10G10B10_SSCALED_PACK32,
    VK_FORMAT_A2R10G10B10_UINT_PACK32,
    VK_FORMAT_A2R10G10B10_SINT_PACK32,
    VK_FORMAT_A2B10G10R10_UNORM_PACK32,
    VK_FORMAT_A2B10G10R10_SNORM_PACK32,
    VK_FORMAT_A2B10G10R10_USCALED_PACK32,
    VK_FORMAT_A2B10G10R10_SSCALED_PACK32,
    VK_FORMAT_A2B10G10R10_UINT_PACK32,
    VK_FORMAT_A2B10G10R10_SINT_PACK32,
    VK_FORMAT_R16_UNORM,
    VK_FORMAT_R16_SNORM,
    VK_FORMAT_R16_USCALED,
    VK_FORMAT_R16_SSCALED,
    VK_FORMAT_R16_UINT,
    VK_FORMAT_R16_SINT,
    VK_FORMAT_R16_SFLOAT,
    VK_FORMAT_R16G16_UNORM,
    VK_FORMAT_R16G16_SNORM,
    VK_FORMAT_R16G16_USCALED,
    VK_FORMAT_R16G16_SSCALED,
    VK_FORMAT_R16G16_UINT,
    VK_FORMAT_R16G16_SINT,
    VK_FORMAT_R16G16_SFLOAT,
    VK_FORMAT_R16G16B16_UNORM,
    VK_FORMAT_R16G16B16_SNORM,
    VK_FORMAT_R16G16B16_USCALED,
    VK_FORMAT_R16G16B16_SSCALED,
    VK_FORMAT_R16G16B16_UINT,
    VK_FORMAT_R16G16B16_SINT,
    VK_FORMAT_R16G16B16_SFLOAT,
    VK_FORMAT_R16G16B16A16_UNORM,
    VK_FORMAT_R16G16B16A16_SNORM,
    VK_FORMAT_R16G16B16A16_USCALED,
    VK_FORMAT_R16G16B16A16_SSCALED,
    VK_FORMAT_R16G16B16A16_UINT,
    VK_FORMAT_R16G16B16A16_SINT,
    VK_FORMAT_R16G16B16A16_SFLOAT,
    VK_FORMAT_R32_UINT,
    VK_FORMAT_R32_SINT,
    VK_FORMAT_R32_SFLOAT,
    VK_FORMAT_R32G32_UINT,
    VK_FORMAT_R32G32_SINT,
    VK_FORMAT_R32G32_SFLOAT,
    VK_FORMAT_R32G32B32_UINT,
    VK_FORMAT_R32G32B32_SINT,
    VK_FORMAT_R32G32B32_SFLOAT,
    VK_FORMAT_R32G32B32A32_UINT,
    VK_FORMAT_R32G32B32A32_SINT,
    VK_FORMAT_R32G32B32A32_SFLOAT,
    VK_FORMAT_R64_UINT,
    VK_FORMAT_R64_SINT,
    VK_FORMAT_R64_SFLOAT,
    VK_FORMAT_R64G64_UINT,
    VK_FORMAT_R64G64_SINT,
    VK_FORMAT_R64G64_SFLOAT,
    VK_FORMAT_R64G64B64_UINT,
    VK_FORMAT_R64G64B64_SINT,
    VK_FORMAT_R64G64B64_SFLOAT,
    VK_FORMAT_R64G64B64A64_UINT,
    VK_FORMAT_R64G64B64A64_SINT,
    VK_FORMAT_R64G64B64A64_SFLOAT,
    VK_FORMAT_B10G11R11_UFLOAT_PACK32,
    VK_FORMAT_E5B9G9R9_UFLOAT_PACK32,
    VK_FORMAT_D16_UNORM,
    VK_FORMAT_X8_D24_UNORM_PACK32,
    VK_FORMAT_D32_SFLOAT,
    VK_FORMAT_S8_UINT,
    VK_FORMAT_D16_UNORM_S8_UINT,
    VK_FORMAT_D24_UNORM_S8_UINT,
    VK_FORMAT_D32_SFLOAT_S8_UINT,
    VK_FORMAT_BC1_RGB_UNORM_BLOCK,
    VK_FORMAT_BC1_RGB_SRGB_BLOCK,
    VK_FORMAT_BC1_RGBA_UNORM_BLOCK,
    VK_FORMAT_BC1_RGBA_SRGB_BLOCK,
    VK_FORMAT_BC2_UNORM_BLOCK,
    VK_FORMAT_BC2_SRGB_BLOCK,
    VK_FORMAT_BC3_UNORM_BLOCK,
    VK_FORMAT_BC3_SRGB_BLOCK,
    VK_FORMAT_BC4_UNORM_BLOCK,
    VK_FORMAT_BC4_SNORM_BLOCK,
    VK_FORMAT_BC5_UNORM_BLOCK,
    VK_FORMAT_BC5_SNORM_BLOCK,
    VK_FORMAT_BC6H_UFLOAT_BLOCK,
    VK_FORMAT_BC6H_SFLOAT_BLOCK,
    VK_FORMAT_BC7_UNORM_BLOCK,
    VK_FORMAT_BC7_SRGB_BLOCK,
    VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK,
    VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK,
    VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK,
    VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK,
    VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK,
    VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK,
    VK_FORMAT_EAC_R11_UNORM_BLOCK,
    VK_FORMAT_EAC_R11_SNORM_BLOCK,
    VK_FORMAT_EAC_R11G11_UNORM_BLOCK,
    VK_FORMAT_EAC_R11G11_SNORM_BLOCK,
    VK_FORMAT_ASTC_4x4_UNORM_BLOCK,
    VK_FORMAT_ASTC_4x4_SRGB_BLOCK,
    VK_FORMAT_ASTC_5x4_UNORM_BLOCK,
    VK_FORMAT_ASTC_5x4_SRGB_BLOCK,
    VK_FORMAT_ASTC_5x5_UNORM_BLOCK,
    VK_FORMAT_ASTC_5x5_SRGB_BLOCK,
    VK_FORMAT_ASTC_6x5_UNORM_BLOCK,
    VK_FORMAT_ASTC_6x5_SRGB_BLOCK,
    VK_FORMAT_ASTC_6x6_UNORM_BLOCK,
    VK_FORMAT_ASTC_6x6_SRGB_BLOCK,
    VK_FORMAT_ASTC_8x5_UNORM_BLOCK,
    VK_FORMAT_ASTC_8x5_SRGB_BLOCK,
    VK_FORMAT_ASTC_8x6_UNORM_BLOCK,
    VK_FORMAT_ASTC_8x6_SRGB_BLOCK,
    VK_FORMAT_ASTC_8x8_UNORM_BLOCK,
    VK_FORMAT_ASTC_8x8_SRGB_BLOCK,
    VK_FORMAT_ASTC_10x5_UNORM_BLOCK,
    VK_FORMAT_ASTC_10x5_SRGB_BLOCK,
    VK_FORMAT_ASTC_10x6_UNORM_BLOCK,
    VK_FORMAT_ASTC_10x6_SRGB_BLOCK,
    VK_FORMAT_ASTC_10x8_UNORM_BLOCK,
    VK_FORMAT_ASTC_10x8_SRGB_BLOCK,
    VK_FORMAT_ASTC_10x10_UNORM_BLOCK,
    VK_FORMAT_ASTC_10x10_SRGB_BLOCK,
    VK_FORMAT_ASTC_12x10_UNORM_BLOCK,
    VK_FORMAT_ASTC_12x10_SRGB_BLOCK,
    VK_FORMAT_ASTC_12x12_UNORM_BLOCK,
    VK_FORMAT_ASTC_12x12_SRGB_BLOCK};

template<> constexpr uint32_t enum_size<VkFormat>() {
    return _VkFormat_values.size();
}

template<> const VkFormat* enum_values<VkFormat>() {
    return _VkFormat_values.data();
}

static constexpr std::array<VkStructureType, 49> _VkStructureType_values = {
    VK_STRUCTURE_TYPE_APPLICATION_INFO,
    VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO,
    VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO,
    VK_STRUCTURE_TYPE_SUBMIT_INFO,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE,
    VK_STRUCTURE_TYPE_BIND_SPARSE_INFO,
    VK_STRUCTURE_TYPE_FENCE_CREATE_INFO,
    VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO,
    VK_STRUCTURE_TYPE_EVENT_CREATE_INFO,
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO,
    VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO,
    VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO,
    VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO,
    VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO,
    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO,
    VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO,
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
    VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO,
    VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,
    VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER,
    VK_STRUCTURE_TYPE_MEMORY_BARRIER,
    VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO,
    VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO};

template<> constexpr uint32_t enum_size<VkStructureType>() {
    return _VkStructureType_values.size();
}

template<> const VkStructureType* enum_values<VkStructureType>() {
    return _VkStructureType_values.data();
}

static constexpr std::array<VkSubpassContents, 2> _VkSubpassContents_values = {
    VK_SUBPASS_CONTENTS_INLINE,
    VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS};

template<> constexpr uint32_t enum_size<VkSubpassContents>() {
    return _VkSubpassContents_values.size();
}

template<> const VkSubpassContents* enum_values<VkSubpassContents>() {
    return _VkSubpassContents_values.data();
}

static constexpr std::array<VkResult, 19> _VkResult_values = {
    VK_SUCCESS,
    VK_NOT_READY,
    VK_TIMEOUT,
    VK_EVENT_SET,
    VK_EVENT_RESET,
    VK_INCOMPLETE,
    VK_ERROR_OUT_OF_HOST_MEMORY,
    VK_ERROR_OUT_OF_DEVICE_MEMORY,
    VK_ERROR_INITIALIZATION_FAILED,
    VK_ERROR_DEVICE_LOST,
    VK_ERROR_MEMORY_MAP_FAILED,
    VK_ERROR_LAYER_NOT_PRESENT,
    VK_ERROR_EXTENSION_NOT_PRESENT,
    VK_ERROR_FEATURE_NOT_PRESENT,
    VK_ERROR_INCOMPATIBLE_DRIVER,
    VK_ERROR_TOO_MANY_OBJECTS,
    VK_ERROR_FORMAT_NOT_SUPPORTED,
    VK_ERROR_FRAGMENTED_POOL,
    VK_ERROR_UNKNOWN};

template<> constexpr uint32_t enum_size<VkResult>() {
    return _VkResult_values.size();
}

template<> const VkResult* enum_values<VkResult>() {
    return _VkResult_values.data();
}

static constexpr std::array<VkDynamicState, 9> _VkDynamicState_values = {
    VK_DYNAMIC_STATE_VIEWPORT,
    VK_DYNAMIC_STATE_SCISSOR,
    VK_DYNAMIC_STATE_LINE_WIDTH,
    VK_DYNAMIC_STATE_DEPTH_BIAS,
    VK_DYNAMIC_STATE_BLEND_CONSTANTS,
    VK_DYNAMIC_STATE_DEPTH_BOUNDS,
    VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK,
    VK_DYNAMIC_STATE_STENCIL_WRITE_MASK,
    VK_DYNAMIC_STATE_STENCIL_REFERENCE};

template<> constexpr uint32_t enum_size<VkDynamicState>() {
    return _VkDynamicState_values.size();
}

template<> const VkDynamicState* enum_values<VkDynamicState>() {
    return _VkDynamicState_values.data();
}

static constexpr std::array<VkDescriptorUpdateTemplateType, 1> _VkDescriptorUpdateTemplateType_values = {
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET};

template<> constexpr uint32_t enum_size<VkDescriptorUpdateTemplateType>() {
    return _VkDescriptorUpdateTemplateType_values.size();
}

template<> const VkDescriptorUpdateTemplateType* enum_values<VkDescriptorUpdateTemplateType>() {
    return _VkDescriptorUpdateTemplateType_values.data();
}

static constexpr std::array<VkObjectType, 26> _VkObjectType_values = {
    VK_OBJECT_TYPE_UNKNOWN,
    VK_OBJECT_TYPE_INSTANCE,
    VK_OBJECT_TYPE_PHYSICAL_DEVICE,
    VK_OBJECT_TYPE_DEVICE,
    VK_OBJECT_TYPE_QUEUE,
    VK_OBJECT_TYPE_SEMAPHORE,
    VK_OBJECT_TYPE_COMMAND_BUFFER,
    VK_OBJECT_TYPE_FENCE,
    VK_OBJECT_TYPE_DEVICE_MEMORY,
    VK_OBJECT_TYPE_BUFFER,
    VK_OBJECT_TYPE_IMAGE,
    VK_OBJECT_TYPE_EVENT,
    VK_OBJECT_TYPE_QUERY_POOL,
    VK_OBJECT_TYPE_BUFFER_VIEW,
    VK_OBJECT_TYPE_IMAGE_VIEW,
    VK_OBJECT_TYPE_SHADER_MODULE,
    VK_OBJECT_TYPE_PIPELINE_CACHE,
    VK_OBJECT_TYPE_PIPELINE_LAYOUT,
    VK_OBJECT_TYPE_RENDER_PASS,
    VK_OBJECT_TYPE_PIPELINE,
    VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT,
    VK_OBJECT_TYPE_SAMPLER,
    VK_OBJECT_TYPE_DESCRIPTOR_POOL,
    VK_OBJECT_TYPE_DESCRIPTOR_SET,
    VK_OBJECT_TYPE_FRAMEBUFFER,
    VK_OBJECT_TYPE_COMMAND_POOL};

template<> constexpr uint32_t enum_size<VkObjectType>() {
    return _VkObjectType_values.size();
}

template<> const VkObjectType* enum_values<VkObjectType>() {
    return _VkObjectType_values.data();
}

static constexpr std::array<VkRayTracingInvocationReorderModeNV, 2> _VkRayTracingInvocationReorderModeNV_values = {
    VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV,
    VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV};

template<> constexpr uint32_t enum_size<VkRayTracingInvocationReorderModeNV>() {
    return _VkRayTracingInvocationReorderModeNV_values.size();
}

template<> const VkRayTracingInvocationReorderModeNV* enum_values<VkRayTracingInvocationReorderModeNV>() {
    return _VkRayTracingInvocationReorderModeNV_values.data();
}

static constexpr std::array<VkDirectDriverLoadingModeLUNARG, 2> _VkDirectDriverLoadingModeLUNARG_values = {
    VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG,
    VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG};

template<> constexpr uint32_t enum_size<VkDirectDriverLoadingModeLUNARG>() {
    return _VkDirectDriverLoadingModeLUNARG_values.size();
}

template<> const VkDirectDriverLoadingModeLUNARG* enum_values<VkDirectDriverLoadingModeLUNARG>() {
    return _VkDirectDriverLoadingModeLUNARG_values.data();
}

static constexpr std::array<VkSemaphoreType, 2> _VkSemaphoreType_values = {
    VK_SEMAPHORE_TYPE_BINARY,
    VK_SEMAPHORE_TYPE_TIMELINE};

template<> constexpr uint32_t enum_size<VkSemaphoreType>() {
    return _VkSemaphoreType_values.size();
}

template<> const VkSemaphoreType* enum_values<VkSemaphoreType>() {
    return _VkSemaphoreType_values.data();
}

static constexpr std::array<VkPresentModeKHR, 4> _VkPresentModeKHR_values = {
    VK_PRESENT_MODE_IMMEDIATE_KHR,
    VK_PRESENT_MODE_MAILBOX_KHR,
    VK_PRESENT_MODE_FIFO_KHR,
    VK_PRESENT_MODE_FIFO_RELAXED_KHR};

template<> constexpr uint32_t enum_size<VkPresentModeKHR>() {
    return _VkPresentModeKHR_values.size();
}

template<> const VkPresentModeKHR* enum_values<VkPresentModeKHR>() {
    return _VkPresentModeKHR_values.data();
}

static constexpr std::array<VkColorSpaceKHR, 2> _VkColorSpaceKHR_values = {
    VK_COLOR_SPACE_SRGB_NONLINEAR_KHR,
    VK_COLORSPACE_SRGB_NONLINEAR_KHR};

template<> constexpr uint32_t enum_size<VkColorSpaceKHR>() {
    return _VkColorSpaceKHR_values.size();
}

template<> const VkColorSpaceKHR* enum_values<VkColorSpaceKHR>() {
    return _VkColorSpaceKHR_values.data();
}

static constexpr std::array<VkTimeDomainKHR, 4> _VkTimeDomainKHR_values = {
    VK_TIME_DOMAIN_DEVICE_KHR,
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR,
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR,
    VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR};

template<> constexpr uint32_t enum_size<VkTimeDomainKHR>() {
    return _VkTimeDomainKHR_values.size();
}

template<> const VkTimeDomainKHR* enum_values<VkTimeDomainKHR>() {
    return _VkTimeDomainKHR_values.data();
}

static constexpr std::array<VkDebugReportObjectTypeEXT, 34> _VkDebugReportObjectTypeEXT_values = {
    VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT};

template<> constexpr uint32_t enum_size<VkDebugReportObjectTypeEXT>() {
    return _VkDebugReportObjectTypeEXT_values.size();
}

template<> const VkDebugReportObjectTypeEXT* enum_values<VkDebugReportObjectTypeEXT>() {
    return _VkDebugReportObjectTypeEXT_values.data();
}

static constexpr std::array<VkDeviceMemoryReportEventTypeEXT, 5> _VkDeviceMemoryReportEventTypeEXT_values = {
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT,
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT,
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT,
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT,
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT};

template<> constexpr uint32_t enum_size<VkDeviceMemoryReportEventTypeEXT>() {
    return _VkDeviceMemoryReportEventTypeEXT_values.size();
}

template<> const VkDeviceMemoryReportEventTypeEXT* enum_values<VkDeviceMemoryReportEventTypeEXT>() {
    return _VkDeviceMemoryReportEventTypeEXT_values.data();
}

static constexpr std::array<VkRasterizationOrderAMD, 2> _VkRasterizationOrderAMD_values = {
    VK_RASTERIZATION_ORDER_STRICT_AMD,
    VK_RASTERIZATION_ORDER_RELAXED_AMD};

template<> constexpr uint32_t enum_size<VkRasterizationOrderAMD>() {
    return _VkRasterizationOrderAMD_values.size();
}

template<> const VkRasterizationOrderAMD* enum_values<VkRasterizationOrderAMD>() {
    return _VkRasterizationOrderAMD_values.data();
}

static constexpr std::array<VkValidationCheckEXT, 2> _VkValidationCheckEXT_values = {
    VK_VALIDATION_CHECK_ALL_EXT,
    VK_VALIDATION_CHECK_SHADERS_EXT};

template<> constexpr uint32_t enum_size<VkValidationCheckEXT>() {
    return _VkValidationCheckEXT_values.size();
}

template<> const VkValidationCheckEXT* enum_values<VkValidationCheckEXT>() {
    return _VkValidationCheckEXT_values.data();
}

static constexpr std::array<VkValidationFeatureEnableEXT, 5> _VkValidationFeatureEnableEXT_values = {
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT,
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT,
    VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT,
    VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT,
    VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT};

template<> constexpr uint32_t enum_size<VkValidationFeatureEnableEXT>() {
    return _VkValidationFeatureEnableEXT_values.size();
}

template<> const VkValidationFeatureEnableEXT* enum_values<VkValidationFeatureEnableEXT>() {
    return _VkValidationFeatureEnableEXT_values.data();
}

static constexpr std::array<VkValidationFeatureDisableEXT, 8> _VkValidationFeatureDisableEXT_values = {
    VK_VALIDATION_FEATURE_DISABLE_ALL_EXT,
    VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT,
    VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT,
    VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT,
    VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT,
    VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT,
    VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT,
    VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT};

template<> constexpr uint32_t enum_size<VkValidationFeatureDisableEXT>() {
    return _VkValidationFeatureDisableEXT_values.size();
}

template<> const VkValidationFeatureDisableEXT* enum_values<VkValidationFeatureDisableEXT>() {
    return _VkValidationFeatureDisableEXT_values.data();
}

static constexpr std::array<VkLayerSettingTypeEXT, 8> _VkLayerSettingTypeEXT_values = {
    VK_LAYER_SETTING_TYPE_BOOL32_EXT,
    VK_LAYER_SETTING_TYPE_INT32_EXT,
    VK_LAYER_SETTING_TYPE_INT64_EXT,
    VK_LAYER_SETTING_TYPE_UINT32_EXT,
    VK_LAYER_SETTING_TYPE_UINT64_EXT,
    VK_LAYER_SETTING_TYPE_FLOAT32_EXT,
    VK_LAYER_SETTING_TYPE_FLOAT64_EXT,
    VK_LAYER_SETTING_TYPE_STRING_EXT};

template<> constexpr uint32_t enum_size<VkLayerSettingTypeEXT>() {
    return _VkLayerSettingTypeEXT_values.size();
}

template<> const VkLayerSettingTypeEXT* enum_values<VkLayerSettingTypeEXT>() {
    return _VkLayerSettingTypeEXT_values.data();
}

static constexpr std::array<VkIndirectCommandsTokenTypeNV, 8> _VkIndirectCommandsTokenTypeNV_values = {
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV};

template<> constexpr uint32_t enum_size<VkIndirectCommandsTokenTypeNV>() {
    return _VkIndirectCommandsTokenTypeNV_values.size();
}

template<> const VkIndirectCommandsTokenTypeNV* enum_values<VkIndirectCommandsTokenTypeNV>() {
    return _VkIndirectCommandsTokenTypeNV_values.data();
}

static constexpr std::array<VkDisplayPowerStateEXT, 3> _VkDisplayPowerStateEXT_values = {
    VK_DISPLAY_POWER_STATE_OFF_EXT,
    VK_DISPLAY_POWER_STATE_SUSPEND_EXT,
    VK_DISPLAY_POWER_STATE_ON_EXT};

template<> constexpr uint32_t enum_size<VkDisplayPowerStateEXT>() {
    return _VkDisplayPowerStateEXT_values.size();
}

template<> const VkDisplayPowerStateEXT* enum_values<VkDisplayPowerStateEXT>() {
    return _VkDisplayPowerStateEXT_values.data();
}

static constexpr std::array<VkDeviceEventTypeEXT, 1> _VkDeviceEventTypeEXT_values = {
    VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT};

template<> constexpr uint32_t enum_size<VkDeviceEventTypeEXT>() {
    return _VkDeviceEventTypeEXT_values.size();
}

template<> const VkDeviceEventTypeEXT* enum_values<VkDeviceEventTypeEXT>() {
    return _VkDeviceEventTypeEXT_values.data();
}

static constexpr std::array<VkDisplayEventTypeEXT, 1> _VkDisplayEventTypeEXT_values = {
    VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT};

template<> constexpr uint32_t enum_size<VkDisplayEventTypeEXT>() {
    return _VkDisplayEventTypeEXT_values.size();
}

template<> const VkDisplayEventTypeEXT* enum_values<VkDisplayEventTypeEXT>() {
    return _VkDisplayEventTypeEXT_values.data();
}

static constexpr std::array<VkViewportCoordinateSwizzleNV, 8> _VkViewportCoordinateSwizzleNV_values = {
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV};

template<> constexpr uint32_t enum_size<VkViewportCoordinateSwizzleNV>() {
    return _VkViewportCoordinateSwizzleNV_values.size();
}

template<> const VkViewportCoordinateSwizzleNV* enum_values<VkViewportCoordinateSwizzleNV>() {
    return _VkViewportCoordinateSwizzleNV_values.data();
}

static constexpr std::array<VkDiscardRectangleModeEXT, 2> _VkDiscardRectangleModeEXT_values = {
    VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT,
    VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT};

template<> constexpr uint32_t enum_size<VkDiscardRectangleModeEXT>() {
    return _VkDiscardRectangleModeEXT_values.size();
}

template<> const VkDiscardRectangleModeEXT* enum_values<VkDiscardRectangleModeEXT>() {
    return _VkDiscardRectangleModeEXT_values.data();
}

static constexpr std::array<VkPointClippingBehavior, 2> _VkPointClippingBehavior_values = {
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES,
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY};

template<> constexpr uint32_t enum_size<VkPointClippingBehavior>() {
    return _VkPointClippingBehavior_values.size();
}

template<> const VkPointClippingBehavior* enum_values<VkPointClippingBehavior>() {
    return _VkPointClippingBehavior_values.data();
}

static constexpr std::array<VkSamplerReductionMode, 3> _VkSamplerReductionMode_values = {
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE,
    VK_SAMPLER_REDUCTION_MODE_MIN,
    VK_SAMPLER_REDUCTION_MODE_MAX};

template<> constexpr uint32_t enum_size<VkSamplerReductionMode>() {
    return _VkSamplerReductionMode_values.size();
}

template<> const VkSamplerReductionMode* enum_values<VkSamplerReductionMode>() {
    return _VkSamplerReductionMode_values.data();
}

static constexpr std::array<VkTessellationDomainOrigin, 2> _VkTessellationDomainOrigin_values = {
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT,
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT};

template<> constexpr uint32_t enum_size<VkTessellationDomainOrigin>() {
    return _VkTessellationDomainOrigin_values.size();
}

template<> const VkTessellationDomainOrigin* enum_values<VkTessellationDomainOrigin>() {
    return _VkTessellationDomainOrigin_values.data();
}

static constexpr std::array<VkSamplerYcbcrModelConversion, 5> _VkSamplerYcbcrModelConversion_values = {
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020};

template<> constexpr uint32_t enum_size<VkSamplerYcbcrModelConversion>() {
    return _VkSamplerYcbcrModelConversion_values.size();
}

template<> const VkSamplerYcbcrModelConversion* enum_values<VkSamplerYcbcrModelConversion>() {
    return _VkSamplerYcbcrModelConversion_values.data();
}

static constexpr std::array<VkSamplerYcbcrRange, 2> _VkSamplerYcbcrRange_values = {
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL,
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW};

template<> constexpr uint32_t enum_size<VkSamplerYcbcrRange>() {
    return _VkSamplerYcbcrRange_values.size();
}

template<> const VkSamplerYcbcrRange* enum_values<VkSamplerYcbcrRange>() {
    return _VkSamplerYcbcrRange_values.data();
}

static constexpr std::array<VkChromaLocation, 2> _VkChromaLocation_values = {
    VK_CHROMA_LOCATION_COSITED_EVEN,
    VK_CHROMA_LOCATION_MIDPOINT};

template<> constexpr uint32_t enum_size<VkChromaLocation>() {
    return _VkChromaLocation_values.size();
}

template<> const VkChromaLocation* enum_values<VkChromaLocation>() {
    return _VkChromaLocation_values.data();
}

static constexpr std::array<VkBlendOverlapEXT, 3> _VkBlendOverlapEXT_values = {
    VK_BLEND_OVERLAP_UNCORRELATED_EXT,
    VK_BLEND_OVERLAP_DISJOINT_EXT,
    VK_BLEND_OVERLAP_CONJOINT_EXT};

template<> constexpr uint32_t enum_size<VkBlendOverlapEXT>() {
    return _VkBlendOverlapEXT_values.size();
}

template<> const VkBlendOverlapEXT* enum_values<VkBlendOverlapEXT>() {
    return _VkBlendOverlapEXT_values.data();
}

static constexpr std::array<VkCoverageModulationModeNV, 4> _VkCoverageModulationModeNV_values = {
    VK_COVERAGE_MODULATION_MODE_NONE_NV,
    VK_COVERAGE_MODULATION_MODE_RGB_NV,
    VK_COVERAGE_MODULATION_MODE_ALPHA_NV,
    VK_COVERAGE_MODULATION_MODE_RGBA_NV};

template<> constexpr uint32_t enum_size<VkCoverageModulationModeNV>() {
    return _VkCoverageModulationModeNV_values.size();
}

template<> const VkCoverageModulationModeNV* enum_values<VkCoverageModulationModeNV>() {
    return _VkCoverageModulationModeNV_values.data();
}

static constexpr std::array<VkCoverageReductionModeNV, 2> _VkCoverageReductionModeNV_values = {
    VK_COVERAGE_REDUCTION_MODE_MERGE_NV,
    VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV};

template<> constexpr uint32_t enum_size<VkCoverageReductionModeNV>() {
    return _VkCoverageReductionModeNV_values.size();
}

template<> const VkCoverageReductionModeNV* enum_values<VkCoverageReductionModeNV>() {
    return _VkCoverageReductionModeNV_values.data();
}

static constexpr std::array<VkValidationCacheHeaderVersionEXT, 1> _VkValidationCacheHeaderVersionEXT_values = {
    VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT};

template<> constexpr uint32_t enum_size<VkValidationCacheHeaderVersionEXT>() {
    return _VkValidationCacheHeaderVersionEXT_values.size();
}

template<> const VkValidationCacheHeaderVersionEXT* enum_values<VkValidationCacheHeaderVersionEXT>() {
    return _VkValidationCacheHeaderVersionEXT_values.data();
}

static constexpr std::array<VkShaderInfoTypeAMD, 3> _VkShaderInfoTypeAMD_values = {
    VK_SHADER_INFO_TYPE_STATISTICS_AMD,
    VK_SHADER_INFO_TYPE_BINARY_AMD,
    VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD};

template<> constexpr uint32_t enum_size<VkShaderInfoTypeAMD>() {
    return _VkShaderInfoTypeAMD_values.size();
}

template<> const VkShaderInfoTypeAMD* enum_values<VkShaderInfoTypeAMD>() {
    return _VkShaderInfoTypeAMD_values.data();
}

static constexpr std::array<VkQueueGlobalPriorityKHR, 8> _VkQueueGlobalPriorityKHR_values = {
    VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR,
    VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR,
    VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR,
    VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR,
    VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT,
    VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT,
    VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT,
    VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT};

template<> constexpr uint32_t enum_size<VkQueueGlobalPriorityKHR>() {
    return _VkQueueGlobalPriorityKHR_values.size();
}

template<> const VkQueueGlobalPriorityKHR* enum_values<VkQueueGlobalPriorityKHR>() {
    return _VkQueueGlobalPriorityKHR_values.data();
}

static constexpr std::array<VkConservativeRasterizationModeEXT, 3> _VkConservativeRasterizationModeEXT_values = {
    VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT,
    VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT,
    VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT};

template<> constexpr uint32_t enum_size<VkConservativeRasterizationModeEXT>() {
    return _VkConservativeRasterizationModeEXT_values.size();
}

template<> const VkConservativeRasterizationModeEXT* enum_values<VkConservativeRasterizationModeEXT>() {
    return _VkConservativeRasterizationModeEXT_values.data();
}

static constexpr std::array<VkVendorId, 7> _VkVendorId_values = {
    VK_VENDOR_ID_VIV,
    VK_VENDOR_ID_VSI,
    VK_VENDOR_ID_KAZAN,
    VK_VENDOR_ID_CODEPLAY,
    VK_VENDOR_ID_MESA,
    VK_VENDOR_ID_POCL,
    VK_VENDOR_ID_MOBILEYE};

template<> constexpr uint32_t enum_size<VkVendorId>() {
    return _VkVendorId_values.size();
}

template<> const VkVendorId* enum_values<VkVendorId>() {
    return _VkVendorId_values.data();
}

static constexpr std::array<VkDriverId, 26> _VkDriverId_values = {
    VK_DRIVER_ID_AMD_PROPRIETARY,
    VK_DRIVER_ID_AMD_OPEN_SOURCE,
    VK_DRIVER_ID_MESA_RADV,
    VK_DRIVER_ID_NVIDIA_PROPRIETARY,
    VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS,
    VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA,
    VK_DRIVER_ID_IMAGINATION_PROPRIETARY,
    VK_DRIVER_ID_QUALCOMM_PROPRIETARY,
    VK_DRIVER_ID_ARM_PROPRIETARY,
    VK_DRIVER_ID_GOOGLE_SWIFTSHADER,
    VK_DRIVER_ID_GGP_PROPRIETARY,
    VK_DRIVER_ID_BROADCOM_PROPRIETARY,
    VK_DRIVER_ID_MESA_LLVMPIPE,
    VK_DRIVER_ID_MOLTENVK,
    VK_DRIVER_ID_COREAVI_PROPRIETARY,
    VK_DRIVER_ID_JUICE_PROPRIETARY,
    VK_DRIVER_ID_VERISILICON_PROPRIETARY,
    VK_DRIVER_ID_MESA_TURNIP,
    VK_DRIVER_ID_MESA_V3DV,
    VK_DRIVER_ID_MESA_PANVK,
    VK_DRIVER_ID_SAMSUNG_PROPRIETARY,
    VK_DRIVER_ID_MESA_VENUS,
    VK_DRIVER_ID_MESA_DOZEN,
    VK_DRIVER_ID_MESA_NVK,
    VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA,
    VK_DRIVER_ID_MESA_AGXV};

template<> constexpr uint32_t enum_size<VkDriverId>() {
    return _VkDriverId_values.size();
}

template<> const VkDriverId* enum_values<VkDriverId>() {
    return _VkDriverId_values.data();
}

static constexpr std::array<VkShadingRatePaletteEntryNV, 12> _VkShadingRatePaletteEntryNV_values = {
    VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV,
    VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV,
    VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV,
    VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV,
    VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV};

template<> constexpr uint32_t enum_size<VkShadingRatePaletteEntryNV>() {
    return _VkShadingRatePaletteEntryNV_values.size();
}

template<> const VkShadingRatePaletteEntryNV* enum_values<VkShadingRatePaletteEntryNV>() {
    return _VkShadingRatePaletteEntryNV_values.data();
}

static constexpr std::array<VkCoarseSampleOrderTypeNV, 4> _VkCoarseSampleOrderTypeNV_values = {
    VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV,
    VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV,
    VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV,
    VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV};

template<> constexpr uint32_t enum_size<VkCoarseSampleOrderTypeNV>() {
    return _VkCoarseSampleOrderTypeNV_values.size();
}

template<> const VkCoarseSampleOrderTypeNV* enum_values<VkCoarseSampleOrderTypeNV>() {
    return _VkCoarseSampleOrderTypeNV_values.data();
}

static constexpr std::array<VkCopyAccelerationStructureModeKHR, 4> _VkCopyAccelerationStructureModeKHR_values = {
    VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR};

template<> constexpr uint32_t enum_size<VkCopyAccelerationStructureModeKHR>() {
    return _VkCopyAccelerationStructureModeKHR_values.size();
}

template<> const VkCopyAccelerationStructureModeKHR* enum_values<VkCopyAccelerationStructureModeKHR>() {
    return _VkCopyAccelerationStructureModeKHR_values.data();
}

static constexpr std::array<VkBuildAccelerationStructureModeKHR, 2> _VkBuildAccelerationStructureModeKHR_values = {
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR,
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR};

template<> constexpr uint32_t enum_size<VkBuildAccelerationStructureModeKHR>() {
    return _VkBuildAccelerationStructureModeKHR_values.size();
}

template<> const VkBuildAccelerationStructureModeKHR* enum_values<VkBuildAccelerationStructureModeKHR>() {
    return _VkBuildAccelerationStructureModeKHR_values.data();
}

static constexpr std::array<VkAccelerationStructureTypeKHR, 3> _VkAccelerationStructureTypeKHR_values = {
    VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR,
    VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR,
    VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR};

template<> constexpr uint32_t enum_size<VkAccelerationStructureTypeKHR>() {
    return _VkAccelerationStructureTypeKHR_values.size();
}

template<> const VkAccelerationStructureTypeKHR* enum_values<VkAccelerationStructureTypeKHR>() {
    return _VkAccelerationStructureTypeKHR_values.data();
}

static constexpr std::array<VkGeometryTypeKHR, 3> _VkGeometryTypeKHR_values = {
    VK_GEOMETRY_TYPE_TRIANGLES_KHR,
    VK_GEOMETRY_TYPE_AABBS_KHR,
    VK_GEOMETRY_TYPE_INSTANCES_KHR};

template<> constexpr uint32_t enum_size<VkGeometryTypeKHR>() {
    return _VkGeometryTypeKHR_values.size();
}

template<> const VkGeometryTypeKHR* enum_values<VkGeometryTypeKHR>() {
    return _VkGeometryTypeKHR_values.data();
}

static constexpr std::array<VkAccelerationStructureMemoryRequirementsTypeNV, 3> _VkAccelerationStructureMemoryRequirementsTypeNV_values = {
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV};

template<> constexpr uint32_t enum_size<VkAccelerationStructureMemoryRequirementsTypeNV>() {
    return _VkAccelerationStructureMemoryRequirementsTypeNV_values.size();
}

template<> const VkAccelerationStructureMemoryRequirementsTypeNV* enum_values<VkAccelerationStructureMemoryRequirementsTypeNV>() {
    return _VkAccelerationStructureMemoryRequirementsTypeNV_values.data();
}

static constexpr std::array<VkAccelerationStructureBuildTypeKHR, 3> _VkAccelerationStructureBuildTypeKHR_values = {
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR,
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR,
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR};

template<> constexpr uint32_t enum_size<VkAccelerationStructureBuildTypeKHR>() {
    return _VkAccelerationStructureBuildTypeKHR_values.size();
}

template<> const VkAccelerationStructureBuildTypeKHR* enum_values<VkAccelerationStructureBuildTypeKHR>() {
    return _VkAccelerationStructureBuildTypeKHR_values.data();
}

static constexpr std::array<VkRayTracingShaderGroupTypeKHR, 3> _VkRayTracingShaderGroupTypeKHR_values = {
    VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR};

template<> constexpr uint32_t enum_size<VkRayTracingShaderGroupTypeKHR>() {
    return _VkRayTracingShaderGroupTypeKHR_values.size();
}

template<> const VkRayTracingShaderGroupTypeKHR* enum_values<VkRayTracingShaderGroupTypeKHR>() {
    return _VkRayTracingShaderGroupTypeKHR_values.data();
}

static constexpr std::array<VkAccelerationStructureCompatibilityKHR, 2> _VkAccelerationStructureCompatibilityKHR_values = {
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR,
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR};

template<> constexpr uint32_t enum_size<VkAccelerationStructureCompatibilityKHR>() {
    return _VkAccelerationStructureCompatibilityKHR_values.size();
}

template<> const VkAccelerationStructureCompatibilityKHR* enum_values<VkAccelerationStructureCompatibilityKHR>() {
    return _VkAccelerationStructureCompatibilityKHR_values.data();
}

static constexpr std::array<VkShaderGroupShaderKHR, 4> _VkShaderGroupShaderKHR_values = {
    VK_SHADER_GROUP_SHADER_GENERAL_KHR,
    VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR,
    VK_SHADER_GROUP_SHADER_ANY_HIT_KHR,
    VK_SHADER_GROUP_SHADER_INTERSECTION_KHR};

template<> constexpr uint32_t enum_size<VkShaderGroupShaderKHR>() {
    return _VkShaderGroupShaderKHR_values.size();
}

template<> const VkShaderGroupShaderKHR* enum_values<VkShaderGroupShaderKHR>() {
    return _VkShaderGroupShaderKHR_values.data();
}

static constexpr std::array<VkMemoryOverallocationBehaviorAMD, 3> _VkMemoryOverallocationBehaviorAMD_values = {
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD};

template<> constexpr uint32_t enum_size<VkMemoryOverallocationBehaviorAMD>() {
    return _VkMemoryOverallocationBehaviorAMD_values.size();
}

template<> const VkMemoryOverallocationBehaviorAMD* enum_values<VkMemoryOverallocationBehaviorAMD>() {
    return _VkMemoryOverallocationBehaviorAMD_values.data();
}

static constexpr std::array<VkPerformanceCounterScopeKHR, 6> _VkPerformanceCounterScopeKHR_values = {
    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR,
    VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR,
    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR,
    VK_QUERY_SCOPE_COMMAND_BUFFER_KHR,
    VK_QUERY_SCOPE_RENDER_PASS_KHR,
    VK_QUERY_SCOPE_COMMAND_KHR};

template<> constexpr uint32_t enum_size<VkPerformanceCounterScopeKHR>() {
    return _VkPerformanceCounterScopeKHR_values.size();
}

template<> const VkPerformanceCounterScopeKHR* enum_values<VkPerformanceCounterScopeKHR>() {
    return _VkPerformanceCounterScopeKHR_values.data();
}

static constexpr std::array<VkPerformanceCounterUnitKHR, 11> _VkPerformanceCounterUnitKHR_values = {
    VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR,
    VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR,
    VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR,
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR,
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR,
    VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR,
    VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR,
    VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR,
    VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR,
    VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR,
    VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR};

template<> constexpr uint32_t enum_size<VkPerformanceCounterUnitKHR>() {
    return _VkPerformanceCounterUnitKHR_values.size();
}

template<> const VkPerformanceCounterUnitKHR* enum_values<VkPerformanceCounterUnitKHR>() {
    return _VkPerformanceCounterUnitKHR_values.data();
}

static constexpr std::array<VkPerformanceCounterStorageKHR, 6> _VkPerformanceCounterStorageKHR_values = {
    VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR,
    VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR,
    VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR,
    VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR,
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR,
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR};

template<> constexpr uint32_t enum_size<VkPerformanceCounterStorageKHR>() {
    return _VkPerformanceCounterStorageKHR_values.size();
}

template<> const VkPerformanceCounterStorageKHR* enum_values<VkPerformanceCounterStorageKHR>() {
    return _VkPerformanceCounterStorageKHR_values.data();
}

static constexpr std::array<VkPerformanceConfigurationTypeINTEL, 1> _VkPerformanceConfigurationTypeINTEL_values = {
    VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL};

template<> constexpr uint32_t enum_size<VkPerformanceConfigurationTypeINTEL>() {
    return _VkPerformanceConfigurationTypeINTEL_values.size();
}

template<> const VkPerformanceConfigurationTypeINTEL* enum_values<VkPerformanceConfigurationTypeINTEL>() {
    return _VkPerformanceConfigurationTypeINTEL_values.data();
}

static constexpr std::array<VkQueryPoolSamplingModeINTEL, 1> _VkQueryPoolSamplingModeINTEL_values = {
    VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL};

template<> constexpr uint32_t enum_size<VkQueryPoolSamplingModeINTEL>() {
    return _VkQueryPoolSamplingModeINTEL_values.size();
}

template<> const VkQueryPoolSamplingModeINTEL* enum_values<VkQueryPoolSamplingModeINTEL>() {
    return _VkQueryPoolSamplingModeINTEL_values.data();
}

static constexpr std::array<VkPerformanceOverrideTypeINTEL, 2> _VkPerformanceOverrideTypeINTEL_values = {
    VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL,
    VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL};

template<> constexpr uint32_t enum_size<VkPerformanceOverrideTypeINTEL>() {
    return _VkPerformanceOverrideTypeINTEL_values.size();
}

template<> const VkPerformanceOverrideTypeINTEL* enum_values<VkPerformanceOverrideTypeINTEL>() {
    return _VkPerformanceOverrideTypeINTEL_values.data();
}

static constexpr std::array<VkPerformanceParameterTypeINTEL, 2> _VkPerformanceParameterTypeINTEL_values = {
    VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL,
    VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL};

template<> constexpr uint32_t enum_size<VkPerformanceParameterTypeINTEL>() {
    return _VkPerformanceParameterTypeINTEL_values.size();
}

template<> const VkPerformanceParameterTypeINTEL* enum_values<VkPerformanceParameterTypeINTEL>() {
    return _VkPerformanceParameterTypeINTEL_values.data();
}

static constexpr std::array<VkPerformanceValueTypeINTEL, 5> _VkPerformanceValueTypeINTEL_values = {
    VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL,
    VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL,
    VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL,
    VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL,
    VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL};

template<> constexpr uint32_t enum_size<VkPerformanceValueTypeINTEL>() {
    return _VkPerformanceValueTypeINTEL_values.size();
}

template<> const VkPerformanceValueTypeINTEL* enum_values<VkPerformanceValueTypeINTEL>() {
    return _VkPerformanceValueTypeINTEL_values.data();
}

static constexpr std::array<VkShaderFloatControlsIndependence, 3> _VkShaderFloatControlsIndependence_values = {
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE};

template<> constexpr uint32_t enum_size<VkShaderFloatControlsIndependence>() {
    return _VkShaderFloatControlsIndependence_values.size();
}

template<> const VkShaderFloatControlsIndependence* enum_values<VkShaderFloatControlsIndependence>() {
    return _VkShaderFloatControlsIndependence_values.data();
}

static constexpr std::array<VkPipelineExecutableStatisticFormatKHR, 4> _VkPipelineExecutableStatisticFormatKHR_values = {
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR};

template<> constexpr uint32_t enum_size<VkPipelineExecutableStatisticFormatKHR>() {
    return _VkPipelineExecutableStatisticFormatKHR_values.size();
}

template<> const VkPipelineExecutableStatisticFormatKHR* enum_values<VkPipelineExecutableStatisticFormatKHR>() {
    return _VkPipelineExecutableStatisticFormatKHR_values.data();
}

static constexpr std::array<VkLineRasterizationModeEXT, 4> _VkLineRasterizationModeEXT_values = {
    VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT,
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT,
    VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT,
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT};

template<> constexpr uint32_t enum_size<VkLineRasterizationModeEXT>() {
    return _VkLineRasterizationModeEXT_values.size();
}

template<> const VkLineRasterizationModeEXT* enum_values<VkLineRasterizationModeEXT>() {
    return _VkLineRasterizationModeEXT_values.data();
}

static constexpr std::array<VkFragmentShadingRateCombinerOpKHR, 5> _VkFragmentShadingRateCombinerOpKHR_values = {
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR,
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR,
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR,
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR,
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR};

template<> constexpr uint32_t enum_size<VkFragmentShadingRateCombinerOpKHR>() {
    return _VkFragmentShadingRateCombinerOpKHR_values.size();
}

template<> const VkFragmentShadingRateCombinerOpKHR* enum_values<VkFragmentShadingRateCombinerOpKHR>() {
    return _VkFragmentShadingRateCombinerOpKHR_values.data();
}

static constexpr std::array<VkFragmentShadingRateNV, 12> _VkFragmentShadingRateNV_values = {
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV,
    VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV,
    VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV,
    VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV,
    VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV,
    VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV};

template<> constexpr uint32_t enum_size<VkFragmentShadingRateNV>() {
    return _VkFragmentShadingRateNV_values.size();
}

template<> const VkFragmentShadingRateNV* enum_values<VkFragmentShadingRateNV>() {
    return _VkFragmentShadingRateNV_values.data();
}

static constexpr std::array<VkFragmentShadingRateTypeNV, 2> _VkFragmentShadingRateTypeNV_values = {
    VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV,
    VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV};

template<> constexpr uint32_t enum_size<VkFragmentShadingRateTypeNV>() {
    return _VkFragmentShadingRateTypeNV_values.size();
}

template<> const VkFragmentShadingRateTypeNV* enum_values<VkFragmentShadingRateTypeNV>() {
    return _VkFragmentShadingRateTypeNV_values.data();
}

static constexpr std::array<VkSubpassMergeStatusEXT, 14> _VkSubpassMergeStatusEXT_values = {
    VK_SUBPASS_MERGE_STATUS_MERGED_EXT,
    VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT};

template<> constexpr uint32_t enum_size<VkSubpassMergeStatusEXT>() {
    return _VkSubpassMergeStatusEXT_values.size();
}

template<> const VkSubpassMergeStatusEXT* enum_values<VkSubpassMergeStatusEXT>() {
    return _VkSubpassMergeStatusEXT_values.data();
}

static constexpr std::array<VkProvokingVertexModeEXT, 2> _VkProvokingVertexModeEXT_values = {
    VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT,
    VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT};

template<> constexpr uint32_t enum_size<VkProvokingVertexModeEXT>() {
    return _VkProvokingVertexModeEXT_values.size();
}

template<> const VkProvokingVertexModeEXT* enum_values<VkProvokingVertexModeEXT>() {
    return _VkProvokingVertexModeEXT_values.data();
}

static constexpr std::array<VkAccelerationStructureMotionInstanceTypeNV, 3> _VkAccelerationStructureMotionInstanceTypeNV_values = {
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV,
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV,
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV};

template<> constexpr uint32_t enum_size<VkAccelerationStructureMotionInstanceTypeNV>() {
    return _VkAccelerationStructureMotionInstanceTypeNV_values.size();
}

template<> const VkAccelerationStructureMotionInstanceTypeNV* enum_values<VkAccelerationStructureMotionInstanceTypeNV>() {
    return _VkAccelerationStructureMotionInstanceTypeNV_values.data();
}

static constexpr std::array<VkDeviceAddressBindingTypeEXT, 2> _VkDeviceAddressBindingTypeEXT_values = {
    VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT,
    VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT};

template<> constexpr uint32_t enum_size<VkDeviceAddressBindingTypeEXT>() {
    return _VkDeviceAddressBindingTypeEXT_values.size();
}

template<> const VkDeviceAddressBindingTypeEXT* enum_values<VkDeviceAddressBindingTypeEXT>() {
    return _VkDeviceAddressBindingTypeEXT_values.data();
}

static constexpr std::array<VkQueryResultStatusKHR, 3> _VkQueryResultStatusKHR_values = {
    VK_QUERY_RESULT_STATUS_ERROR_KHR,
    VK_QUERY_RESULT_STATUS_NOT_READY_KHR,
    VK_QUERY_RESULT_STATUS_COMPLETE_KHR};

template<> constexpr uint32_t enum_size<VkQueryResultStatusKHR>() {
    return _VkQueryResultStatusKHR_values.size();
}

template<> const VkQueryResultStatusKHR* enum_values<VkQueryResultStatusKHR>() {
    return _VkQueryResultStatusKHR_values.data();
}

static constexpr std::array<VkVideoEncodeTuningModeKHR, 5> _VkVideoEncodeTuningModeKHR_values = {
    VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR,
    VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR,
    VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR,
    VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR,
    VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR};

template<> constexpr uint32_t enum_size<VkVideoEncodeTuningModeKHR>() {
    return _VkVideoEncodeTuningModeKHR_values.size();
}

template<> const VkVideoEncodeTuningModeKHR* enum_values<VkVideoEncodeTuningModeKHR>() {
    return _VkVideoEncodeTuningModeKHR_values.data();
}

static constexpr std::array<VkPipelineRobustnessBufferBehaviorEXT, 4> _VkPipelineRobustnessBufferBehaviorEXT_values = {
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT,
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT,
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT,
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT};

template<> constexpr uint32_t enum_size<VkPipelineRobustnessBufferBehaviorEXT>() {
    return _VkPipelineRobustnessBufferBehaviorEXT_values.size();
}

template<> const VkPipelineRobustnessBufferBehaviorEXT* enum_values<VkPipelineRobustnessBufferBehaviorEXT>() {
    return _VkPipelineRobustnessBufferBehaviorEXT_values.data();
}

static constexpr std::array<VkPipelineRobustnessImageBehaviorEXT, 4> _VkPipelineRobustnessImageBehaviorEXT_values = {
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT,
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT,
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT,
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT};

template<> constexpr uint32_t enum_size<VkPipelineRobustnessImageBehaviorEXT>() {
    return _VkPipelineRobustnessImageBehaviorEXT_values.size();
}

template<> const VkPipelineRobustnessImageBehaviorEXT* enum_values<VkPipelineRobustnessImageBehaviorEXT>() {
    return _VkPipelineRobustnessImageBehaviorEXT_values.data();
}

static constexpr std::array<VkOpticalFlowPerformanceLevelNV, 4> _VkOpticalFlowPerformanceLevelNV_values = {
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV,
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV,
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV,
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV};

template<> constexpr uint32_t enum_size<VkOpticalFlowPerformanceLevelNV>() {
    return _VkOpticalFlowPerformanceLevelNV_values.size();
}

template<> const VkOpticalFlowPerformanceLevelNV* enum_values<VkOpticalFlowPerformanceLevelNV>() {
    return _VkOpticalFlowPerformanceLevelNV_values.data();
}

static constexpr std::array<VkOpticalFlowSessionBindingPointNV, 9> _VkOpticalFlowSessionBindingPointNV_values = {
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV};

template<> constexpr uint32_t enum_size<VkOpticalFlowSessionBindingPointNV>() {
    return _VkOpticalFlowSessionBindingPointNV_values.size();
}

template<> const VkOpticalFlowSessionBindingPointNV* enum_values<VkOpticalFlowSessionBindingPointNV>() {
    return _VkOpticalFlowSessionBindingPointNV_values.data();
}

static constexpr std::array<VkMicromapTypeEXT, 1> _VkMicromapTypeEXT_values = {
    VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT};

template<> constexpr uint32_t enum_size<VkMicromapTypeEXT>() {
    return _VkMicromapTypeEXT_values.size();
}

template<> const VkMicromapTypeEXT* enum_values<VkMicromapTypeEXT>() {
    return _VkMicromapTypeEXT_values.data();
}

static constexpr std::array<VkCopyMicromapModeEXT, 4> _VkCopyMicromapModeEXT_values = {
    VK_COPY_MICROMAP_MODE_CLONE_EXT,
    VK_COPY_MICROMAP_MODE_SERIALIZE_EXT,
    VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT,
    VK_COPY_MICROMAP_MODE_COMPACT_EXT};

template<> constexpr uint32_t enum_size<VkCopyMicromapModeEXT>() {
    return _VkCopyMicromapModeEXT_values.size();
}

template<> const VkCopyMicromapModeEXT* enum_values<VkCopyMicromapModeEXT>() {
    return _VkCopyMicromapModeEXT_values.data();
}

static constexpr std::array<VkBuildMicromapModeEXT, 1> _VkBuildMicromapModeEXT_values = {
    VK_BUILD_MICROMAP_MODE_BUILD_EXT};

template<> constexpr uint32_t enum_size<VkBuildMicromapModeEXT>() {
    return _VkBuildMicromapModeEXT_values.size();
}

template<> const VkBuildMicromapModeEXT* enum_values<VkBuildMicromapModeEXT>() {
    return _VkBuildMicromapModeEXT_values.data();
}

static constexpr std::array<VkOpacityMicromapFormatEXT, 2> _VkOpacityMicromapFormatEXT_values = {
    VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT,
    VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT};

template<> constexpr uint32_t enum_size<VkOpacityMicromapFormatEXT>() {
    return _VkOpacityMicromapFormatEXT_values.size();
}

template<> const VkOpacityMicromapFormatEXT* enum_values<VkOpacityMicromapFormatEXT>() {
    return _VkOpacityMicromapFormatEXT_values.data();
}

static constexpr std::array<VkOpacityMicromapSpecialIndexEXT, 4> _VkOpacityMicromapSpecialIndexEXT_values = {
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT,
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT,
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT,
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT};

template<> constexpr uint32_t enum_size<VkOpacityMicromapSpecialIndexEXT>() {
    return _VkOpacityMicromapSpecialIndexEXT_values.size();
}

template<> const VkOpacityMicromapSpecialIndexEXT* enum_values<VkOpacityMicromapSpecialIndexEXT>() {
    return _VkOpacityMicromapSpecialIndexEXT_values.data();
}

static constexpr std::array<VkDepthBiasRepresentationEXT, 3> _VkDepthBiasRepresentationEXT_values = {
    VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT,
    VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT,
    VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT};

template<> constexpr uint32_t enum_size<VkDepthBiasRepresentationEXT>() {
    return _VkDepthBiasRepresentationEXT_values.size();
}

template<> const VkDepthBiasRepresentationEXT* enum_values<VkDepthBiasRepresentationEXT>() {
    return _VkDepthBiasRepresentationEXT_values.data();
}

static constexpr std::array<VkDeviceFaultAddressTypeEXT, 7> _VkDeviceFaultAddressTypeEXT_values = {
    VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT,
    VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT,
    VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT,
    VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT,
    VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT,
    VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT,
    VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT};

template<> constexpr uint32_t enum_size<VkDeviceFaultAddressTypeEXT>() {
    return _VkDeviceFaultAddressTypeEXT_values.size();
}

template<> const VkDeviceFaultAddressTypeEXT* enum_values<VkDeviceFaultAddressTypeEXT>() {
    return _VkDeviceFaultAddressTypeEXT_values.data();
}

static constexpr std::array<VkDeviceFaultVendorBinaryHeaderVersionEXT, 1> _VkDeviceFaultVendorBinaryHeaderVersionEXT_values = {
    VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT};

template<> constexpr uint32_t enum_size<VkDeviceFaultVendorBinaryHeaderVersionEXT>() {
    return _VkDeviceFaultVendorBinaryHeaderVersionEXT_values.size();
}

template<> const VkDeviceFaultVendorBinaryHeaderVersionEXT* enum_values<VkDeviceFaultVendorBinaryHeaderVersionEXT>() {
    return _VkDeviceFaultVendorBinaryHeaderVersionEXT_values.data();
}

static constexpr std::array<VkShaderCodeTypeEXT, 2> _VkShaderCodeTypeEXT_values = {
    VK_SHADER_CODE_TYPE_BINARY_EXT,
    VK_SHADER_CODE_TYPE_SPIRV_EXT};

template<> constexpr uint32_t enum_size<VkShaderCodeTypeEXT>() {
    return _VkShaderCodeTypeEXT_values.size();
}

template<> const VkShaderCodeTypeEXT* enum_values<VkShaderCodeTypeEXT>() {
    return _VkShaderCodeTypeEXT_values.data();
}

static constexpr std::array<VkScopeKHR, 4> _VkScopeKHR_values = {
    VK_SCOPE_DEVICE_KHR,
    VK_SCOPE_WORKGROUP_KHR,
    VK_SCOPE_SUBGROUP_KHR,
    VK_SCOPE_QUEUE_FAMILY_KHR};

template<> constexpr uint32_t enum_size<VkScopeKHR>() {
    return _VkScopeKHR_values.size();
}

template<> const VkScopeKHR* enum_values<VkScopeKHR>() {
    return _VkScopeKHR_values.data();
}

static constexpr std::array<VkComponentTypeKHR, 11> _VkComponentTypeKHR_values = {
    VK_COMPONENT_TYPE_FLOAT16_KHR,
    VK_COMPONENT_TYPE_FLOAT32_KHR,
    VK_COMPONENT_TYPE_FLOAT64_KHR,
    VK_COMPONENT_TYPE_SINT8_KHR,
    VK_COMPONENT_TYPE_SINT16_KHR,
    VK_COMPONENT_TYPE_SINT32_KHR,
    VK_COMPONENT_TYPE_SINT64_KHR,
    VK_COMPONENT_TYPE_UINT8_KHR,
    VK_COMPONENT_TYPE_UINT16_KHR,
    VK_COMPONENT_TYPE_UINT32_KHR,
    VK_COMPONENT_TYPE_UINT64_KHR};

template<> constexpr uint32_t enum_size<VkComponentTypeKHR>() {
    return _VkComponentTypeKHR_values.size();
}

template<> const VkComponentTypeKHR* enum_values<VkComponentTypeKHR>() {
    return _VkComponentTypeKHR_values.data();
}

static constexpr std::array<VkCubicFilterWeightsQCOM, 4> _VkCubicFilterWeightsQCOM_values = {
    VK_CUBIC_FILTER_WEIGHTS_CATMULL_ROM_QCOM,
    VK_CUBIC_FILTER_WEIGHTS_ZERO_TANGENT_CARDINAL_QCOM,
    VK_CUBIC_FILTER_WEIGHTS_B_SPLINE_QCOM,
    VK_CUBIC_FILTER_WEIGHTS_MITCHELL_NETRAVALI_QCOM};

template<> constexpr uint32_t enum_size<VkCubicFilterWeightsQCOM>() {
    return _VkCubicFilterWeightsQCOM_values.size();
}

template<> const VkCubicFilterWeightsQCOM* enum_values<VkCubicFilterWeightsQCOM>() {
    return _VkCubicFilterWeightsQCOM_values.data();
}

static constexpr std::array<VkBlockMatchWindowCompareModeQCOM, 2> _VkBlockMatchWindowCompareModeQCOM_values = {
    VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MIN_QCOM,
    VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_QCOM};

template<> constexpr uint32_t enum_size<VkBlockMatchWindowCompareModeQCOM>() {
    return _VkBlockMatchWindowCompareModeQCOM_values.size();
}

template<> const VkBlockMatchWindowCompareModeQCOM* enum_values<VkBlockMatchWindowCompareModeQCOM>() {
    return _VkBlockMatchWindowCompareModeQCOM_values.data();
}

static constexpr std::array<VkLayeredDriverUnderlyingApiMSFT, 2> _VkLayeredDriverUnderlyingApiMSFT_values = {
    VK_LAYERED_DRIVER_UNDERLYING_API_NONE_MSFT,
    VK_LAYERED_DRIVER_UNDERLYING_API_D3D12_MSFT};

template<> constexpr uint32_t enum_size<VkLayeredDriverUnderlyingApiMSFT>() {
    return _VkLayeredDriverUnderlyingApiMSFT_values.size();
}

template<> const VkLayeredDriverUnderlyingApiMSFT* enum_values<VkLayeredDriverUnderlyingApiMSFT>() {
    return _VkLayeredDriverUnderlyingApiMSFT_values.data();
}

static constexpr std::array<VkLatencyMarkerNV, 12> _VkLatencyMarkerNV_values = {
    VK_LATENCY_MARKER_SIMULATION_START_NV,
    VK_LATENCY_MARKER_SIMULATION_END_NV,
    VK_LATENCY_MARKER_RENDERSUBMIT_START_NV,
    VK_LATENCY_MARKER_RENDERSUBMIT_END_NV,
    VK_LATENCY_MARKER_PRESENT_START_NV,
    VK_LATENCY_MARKER_PRESENT_END_NV,
    VK_LATENCY_MARKER_INPUT_SAMPLE_NV,
    VK_LATENCY_MARKER_TRIGGER_FLASH_NV,
    VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_START_NV,
    VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_END_NV,
    VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_START_NV,
    VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_END_NV};

template<> constexpr uint32_t enum_size<VkLatencyMarkerNV>() {
    return _VkLatencyMarkerNV_values.size();
}

template<> const VkLatencyMarkerNV* enum_values<VkLatencyMarkerNV>() {
    return _VkLatencyMarkerNV_values.data();
}

static constexpr std::array<VkOutOfBandQueueTypeNV, 2> _VkOutOfBandQueueTypeNV_values = {
    VK_OUT_OF_BAND_QUEUE_TYPE_RENDER_NV,
    VK_OUT_OF_BAND_QUEUE_TYPE_PRESENT_NV};

template<> constexpr uint32_t enum_size<VkOutOfBandQueueTypeNV>() {
    return _VkOutOfBandQueueTypeNV_values.size();
}

template<> const VkOutOfBandQueueTypeNV* enum_values<VkOutOfBandQueueTypeNV>() {
    return _VkOutOfBandQueueTypeNV_values.data();
}


}
