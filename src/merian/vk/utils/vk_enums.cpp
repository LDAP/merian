// This file was is autogenerated for Vulkan v1.3.275.
// Created: 2024-07-05 14:06:17.002190

#include "merian/utils/enums.hpp"

#include <vulkan/vulkan.hpp>

namespace merian {

static constexpr std::array<VULKAN_HPP_NAMESPACE::ImageLayout, 9> _ImageLayout_values = {
    VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined,
    VULKAN_HPP_NAMESPACE::ImageLayout::eGeneral,
    VULKAN_HPP_NAMESPACE::ImageLayout::eColorAttachmentOptimal,
    VULKAN_HPP_NAMESPACE::ImageLayout::eDepthStencilAttachmentOptimal,
    VULKAN_HPP_NAMESPACE::ImageLayout::eDepthStencilReadOnlyOptimal,
    VULKAN_HPP_NAMESPACE::ImageLayout::eShaderReadOnlyOptimal,
    VULKAN_HPP_NAMESPACE::ImageLayout::eTransferSrcOptimal,
    VULKAN_HPP_NAMESPACE::ImageLayout::eTransferDstOptimal,
    VULKAN_HPP_NAMESPACE::ImageLayout::ePreinitialized};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::ImageLayout>() {
    return _ImageLayout_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::ImageLayout* enum_values<VULKAN_HPP_NAMESPACE::ImageLayout>() {
    return _ImageLayout_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::ImageLayout>(VULKAN_HPP_NAMESPACE::ImageLayout value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::AttachmentLoadOp, 3> _AttachmentLoadOp_values = {
    VULKAN_HPP_NAMESPACE::AttachmentLoadOp::eLoad,
    VULKAN_HPP_NAMESPACE::AttachmentLoadOp::eClear,
    VULKAN_HPP_NAMESPACE::AttachmentLoadOp::eDontCare};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::AttachmentLoadOp>() {
    return _AttachmentLoadOp_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::AttachmentLoadOp* enum_values<VULKAN_HPP_NAMESPACE::AttachmentLoadOp>() {
    return _AttachmentLoadOp_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::AttachmentLoadOp>(VULKAN_HPP_NAMESPACE::AttachmentLoadOp value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::AttachmentStoreOp, 2> _AttachmentStoreOp_values = {
    VULKAN_HPP_NAMESPACE::AttachmentStoreOp::eStore,
    VULKAN_HPP_NAMESPACE::AttachmentStoreOp::eDontCare};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::AttachmentStoreOp>() {
    return _AttachmentStoreOp_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::AttachmentStoreOp* enum_values<VULKAN_HPP_NAMESPACE::AttachmentStoreOp>() {
    return _AttachmentStoreOp_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::AttachmentStoreOp>(VULKAN_HPP_NAMESPACE::AttachmentStoreOp value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::ImageType, 3> _ImageType_values = {
    VULKAN_HPP_NAMESPACE::ImageType::e1D,
    VULKAN_HPP_NAMESPACE::ImageType::e2D,
    VULKAN_HPP_NAMESPACE::ImageType::e3D};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::ImageType>() {
    return _ImageType_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::ImageType* enum_values<VULKAN_HPP_NAMESPACE::ImageType>() {
    return _ImageType_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::ImageType>(VULKAN_HPP_NAMESPACE::ImageType value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::ImageTiling, 2> _ImageTiling_values = {
    VULKAN_HPP_NAMESPACE::ImageTiling::eOptimal,
    VULKAN_HPP_NAMESPACE::ImageTiling::eLinear};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::ImageTiling>() {
    return _ImageTiling_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::ImageTiling* enum_values<VULKAN_HPP_NAMESPACE::ImageTiling>() {
    return _ImageTiling_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::ImageTiling>(VULKAN_HPP_NAMESPACE::ImageTiling value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::ImageViewType, 7> _ImageViewType_values = {
    VULKAN_HPP_NAMESPACE::ImageViewType::e1D,
    VULKAN_HPP_NAMESPACE::ImageViewType::e2D,
    VULKAN_HPP_NAMESPACE::ImageViewType::e3D,
    VULKAN_HPP_NAMESPACE::ImageViewType::eCube,
    VULKAN_HPP_NAMESPACE::ImageViewType::e1DArray,
    VULKAN_HPP_NAMESPACE::ImageViewType::e2DArray,
    VULKAN_HPP_NAMESPACE::ImageViewType::eCubeArray};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::ImageViewType>() {
    return _ImageViewType_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::ImageViewType* enum_values<VULKAN_HPP_NAMESPACE::ImageViewType>() {
    return _ImageViewType_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::ImageViewType>(VULKAN_HPP_NAMESPACE::ImageViewType value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::CommandBufferLevel, 2> _CommandBufferLevel_values = {
    VULKAN_HPP_NAMESPACE::CommandBufferLevel::ePrimary,
    VULKAN_HPP_NAMESPACE::CommandBufferLevel::eSecondary};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::CommandBufferLevel>() {
    return _CommandBufferLevel_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::CommandBufferLevel* enum_values<VULKAN_HPP_NAMESPACE::CommandBufferLevel>() {
    return _CommandBufferLevel_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::CommandBufferLevel>(VULKAN_HPP_NAMESPACE::CommandBufferLevel value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::ComponentSwizzle, 7> _ComponentSwizzle_values = {
    VULKAN_HPP_NAMESPACE::ComponentSwizzle::eIdentity,
    VULKAN_HPP_NAMESPACE::ComponentSwizzle::eZero,
    VULKAN_HPP_NAMESPACE::ComponentSwizzle::eOne,
    VULKAN_HPP_NAMESPACE::ComponentSwizzle::eR,
    VULKAN_HPP_NAMESPACE::ComponentSwizzle::eG,
    VULKAN_HPP_NAMESPACE::ComponentSwizzle::eB,
    VULKAN_HPP_NAMESPACE::ComponentSwizzle::eA};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::ComponentSwizzle>() {
    return _ComponentSwizzle_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::ComponentSwizzle* enum_values<VULKAN_HPP_NAMESPACE::ComponentSwizzle>() {
    return _ComponentSwizzle_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::ComponentSwizzle>(VULKAN_HPP_NAMESPACE::ComponentSwizzle value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::DescriptorType, 11> _DescriptorType_values = {
    VULKAN_HPP_NAMESPACE::DescriptorType::eSampler,
    VULKAN_HPP_NAMESPACE::DescriptorType::eCombinedImageSampler,
    VULKAN_HPP_NAMESPACE::DescriptorType::eSampledImage,
    VULKAN_HPP_NAMESPACE::DescriptorType::eStorageImage,
    VULKAN_HPP_NAMESPACE::DescriptorType::eUniformTexelBuffer,
    VULKAN_HPP_NAMESPACE::DescriptorType::eStorageTexelBuffer,
    VULKAN_HPP_NAMESPACE::DescriptorType::eUniformBuffer,
    VULKAN_HPP_NAMESPACE::DescriptorType::eStorageBuffer,
    VULKAN_HPP_NAMESPACE::DescriptorType::eUniformBufferDynamic,
    VULKAN_HPP_NAMESPACE::DescriptorType::eStorageBufferDynamic,
    VULKAN_HPP_NAMESPACE::DescriptorType::eInputAttachment};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::DescriptorType>() {
    return _DescriptorType_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::DescriptorType* enum_values<VULKAN_HPP_NAMESPACE::DescriptorType>() {
    return _DescriptorType_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::DescriptorType>(VULKAN_HPP_NAMESPACE::DescriptorType value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::QueryType, 3> _QueryType_values = {
    VULKAN_HPP_NAMESPACE::QueryType::eOcclusion,
    VULKAN_HPP_NAMESPACE::QueryType::ePipelineStatistics,
    VULKAN_HPP_NAMESPACE::QueryType::eTimestamp};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::QueryType>() {
    return _QueryType_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::QueryType* enum_values<VULKAN_HPP_NAMESPACE::QueryType>() {
    return _QueryType_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::QueryType>(VULKAN_HPP_NAMESPACE::QueryType value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::BorderColor, 6> _BorderColor_values = {
    VULKAN_HPP_NAMESPACE::BorderColor::eFloatTransparentBlack,
    VULKAN_HPP_NAMESPACE::BorderColor::eIntTransparentBlack,
    VULKAN_HPP_NAMESPACE::BorderColor::eFloatOpaqueBlack,
    VULKAN_HPP_NAMESPACE::BorderColor::eIntOpaqueBlack,
    VULKAN_HPP_NAMESPACE::BorderColor::eFloatOpaqueWhite,
    VULKAN_HPP_NAMESPACE::BorderColor::eIntOpaqueWhite};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::BorderColor>() {
    return _BorderColor_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::BorderColor* enum_values<VULKAN_HPP_NAMESPACE::BorderColor>() {
    return _BorderColor_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::BorderColor>(VULKAN_HPP_NAMESPACE::BorderColor value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::PipelineBindPoint, 2> _PipelineBindPoint_values = {
    VULKAN_HPP_NAMESPACE::PipelineBindPoint::eGraphics,
    VULKAN_HPP_NAMESPACE::PipelineBindPoint::eCompute};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::PipelineBindPoint>() {
    return _PipelineBindPoint_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::PipelineBindPoint* enum_values<VULKAN_HPP_NAMESPACE::PipelineBindPoint>() {
    return _PipelineBindPoint_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::PipelineBindPoint>(VULKAN_HPP_NAMESPACE::PipelineBindPoint value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::PipelineCacheHeaderVersion, 1> _PipelineCacheHeaderVersion_values = {
    VULKAN_HPP_NAMESPACE::PipelineCacheHeaderVersion::eOne};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::PipelineCacheHeaderVersion>() {
    return _PipelineCacheHeaderVersion_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::PipelineCacheHeaderVersion* enum_values<VULKAN_HPP_NAMESPACE::PipelineCacheHeaderVersion>() {
    return _PipelineCacheHeaderVersion_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::PipelineCacheHeaderVersion>(VULKAN_HPP_NAMESPACE::PipelineCacheHeaderVersion value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::PrimitiveTopology, 11> _PrimitiveTopology_values = {
    VULKAN_HPP_NAMESPACE::PrimitiveTopology::ePointList,
    VULKAN_HPP_NAMESPACE::PrimitiveTopology::eLineList,
    VULKAN_HPP_NAMESPACE::PrimitiveTopology::eLineStrip,
    VULKAN_HPP_NAMESPACE::PrimitiveTopology::eTriangleList,
    VULKAN_HPP_NAMESPACE::PrimitiveTopology::eTriangleStrip,
    VULKAN_HPP_NAMESPACE::PrimitiveTopology::eTriangleFan,
    VULKAN_HPP_NAMESPACE::PrimitiveTopology::eLineListWithAdjacency,
    VULKAN_HPP_NAMESPACE::PrimitiveTopology::eLineStripWithAdjacency,
    VULKAN_HPP_NAMESPACE::PrimitiveTopology::eTriangleListWithAdjacency,
    VULKAN_HPP_NAMESPACE::PrimitiveTopology::eTriangleStripWithAdjacency,
    VULKAN_HPP_NAMESPACE::PrimitiveTopology::ePatchList};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::PrimitiveTopology>() {
    return _PrimitiveTopology_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::PrimitiveTopology* enum_values<VULKAN_HPP_NAMESPACE::PrimitiveTopology>() {
    return _PrimitiveTopology_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::PrimitiveTopology>(VULKAN_HPP_NAMESPACE::PrimitiveTopology value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::SharingMode, 2> _SharingMode_values = {
    VULKAN_HPP_NAMESPACE::SharingMode::eExclusive,
    VULKAN_HPP_NAMESPACE::SharingMode::eConcurrent};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::SharingMode>() {
    return _SharingMode_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::SharingMode* enum_values<VULKAN_HPP_NAMESPACE::SharingMode>() {
    return _SharingMode_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::SharingMode>(VULKAN_HPP_NAMESPACE::SharingMode value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::IndexType, 2> _IndexType_values = {
    VULKAN_HPP_NAMESPACE::IndexType::eUint16,
    VULKAN_HPP_NAMESPACE::IndexType::eUint32};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::IndexType>() {
    return _IndexType_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::IndexType* enum_values<VULKAN_HPP_NAMESPACE::IndexType>() {
    return _IndexType_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::IndexType>(VULKAN_HPP_NAMESPACE::IndexType value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::Filter, 2> _Filter_values = {
    VULKAN_HPP_NAMESPACE::Filter::eNearest,
    VULKAN_HPP_NAMESPACE::Filter::eLinear};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::Filter>() {
    return _Filter_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::Filter* enum_values<VULKAN_HPP_NAMESPACE::Filter>() {
    return _Filter_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::Filter>(VULKAN_HPP_NAMESPACE::Filter value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::SamplerMipmapMode, 2> _SamplerMipmapMode_values = {
    VULKAN_HPP_NAMESPACE::SamplerMipmapMode::eNearest,
    VULKAN_HPP_NAMESPACE::SamplerMipmapMode::eLinear};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::SamplerMipmapMode>() {
    return _SamplerMipmapMode_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::SamplerMipmapMode* enum_values<VULKAN_HPP_NAMESPACE::SamplerMipmapMode>() {
    return _SamplerMipmapMode_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::SamplerMipmapMode>(VULKAN_HPP_NAMESPACE::SamplerMipmapMode value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::SamplerAddressMode, 4> _SamplerAddressMode_values = {
    VULKAN_HPP_NAMESPACE::SamplerAddressMode::eRepeat,
    VULKAN_HPP_NAMESPACE::SamplerAddressMode::eMirroredRepeat,
    VULKAN_HPP_NAMESPACE::SamplerAddressMode::eClampToEdge,
    VULKAN_HPP_NAMESPACE::SamplerAddressMode::eClampToBorder};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::SamplerAddressMode>() {
    return _SamplerAddressMode_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::SamplerAddressMode* enum_values<VULKAN_HPP_NAMESPACE::SamplerAddressMode>() {
    return _SamplerAddressMode_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::SamplerAddressMode>(VULKAN_HPP_NAMESPACE::SamplerAddressMode value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::CompareOp, 8> _CompareOp_values = {
    VULKAN_HPP_NAMESPACE::CompareOp::eNever,
    VULKAN_HPP_NAMESPACE::CompareOp::eLess,
    VULKAN_HPP_NAMESPACE::CompareOp::eEqual,
    VULKAN_HPP_NAMESPACE::CompareOp::eLessOrEqual,
    VULKAN_HPP_NAMESPACE::CompareOp::eGreater,
    VULKAN_HPP_NAMESPACE::CompareOp::eNotEqual,
    VULKAN_HPP_NAMESPACE::CompareOp::eGreaterOrEqual,
    VULKAN_HPP_NAMESPACE::CompareOp::eAlways};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::CompareOp>() {
    return _CompareOp_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::CompareOp* enum_values<VULKAN_HPP_NAMESPACE::CompareOp>() {
    return _CompareOp_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::CompareOp>(VULKAN_HPP_NAMESPACE::CompareOp value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::PolygonMode, 3> _PolygonMode_values = {
    VULKAN_HPP_NAMESPACE::PolygonMode::eFill,
    VULKAN_HPP_NAMESPACE::PolygonMode::eLine,
    VULKAN_HPP_NAMESPACE::PolygonMode::ePoint};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::PolygonMode>() {
    return _PolygonMode_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::PolygonMode* enum_values<VULKAN_HPP_NAMESPACE::PolygonMode>() {
    return _PolygonMode_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::PolygonMode>(VULKAN_HPP_NAMESPACE::PolygonMode value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::FrontFace, 2> _FrontFace_values = {
    VULKAN_HPP_NAMESPACE::FrontFace::eCounterClockwise,
    VULKAN_HPP_NAMESPACE::FrontFace::eClockwise};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::FrontFace>() {
    return _FrontFace_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::FrontFace* enum_values<VULKAN_HPP_NAMESPACE::FrontFace>() {
    return _FrontFace_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::FrontFace>(VULKAN_HPP_NAMESPACE::FrontFace value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::BlendFactor, 19> _BlendFactor_values = {
    VULKAN_HPP_NAMESPACE::BlendFactor::eZero,
    VULKAN_HPP_NAMESPACE::BlendFactor::eOne,
    VULKAN_HPP_NAMESPACE::BlendFactor::eSrcColor,
    VULKAN_HPP_NAMESPACE::BlendFactor::eOneMinusSrcColor,
    VULKAN_HPP_NAMESPACE::BlendFactor::eDstColor,
    VULKAN_HPP_NAMESPACE::BlendFactor::eOneMinusDstColor,
    VULKAN_HPP_NAMESPACE::BlendFactor::eSrcAlpha,
    VULKAN_HPP_NAMESPACE::BlendFactor::eOneMinusSrcAlpha,
    VULKAN_HPP_NAMESPACE::BlendFactor::eDstAlpha,
    VULKAN_HPP_NAMESPACE::BlendFactor::eOneMinusDstAlpha,
    VULKAN_HPP_NAMESPACE::BlendFactor::eConstantColor,
    VULKAN_HPP_NAMESPACE::BlendFactor::eOneMinusConstantColor,
    VULKAN_HPP_NAMESPACE::BlendFactor::eConstantAlpha,
    VULKAN_HPP_NAMESPACE::BlendFactor::eOneMinusConstantAlpha,
    VULKAN_HPP_NAMESPACE::BlendFactor::eSrcAlphaSaturate,
    VULKAN_HPP_NAMESPACE::BlendFactor::eSrc1Color,
    VULKAN_HPP_NAMESPACE::BlendFactor::eOneMinusSrc1Color,
    VULKAN_HPP_NAMESPACE::BlendFactor::eSrc1Alpha,
    VULKAN_HPP_NAMESPACE::BlendFactor::eOneMinusSrc1Alpha};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::BlendFactor>() {
    return _BlendFactor_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::BlendFactor* enum_values<VULKAN_HPP_NAMESPACE::BlendFactor>() {
    return _BlendFactor_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::BlendFactor>(VULKAN_HPP_NAMESPACE::BlendFactor value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::BlendOp, 5> _BlendOp_values = {
    VULKAN_HPP_NAMESPACE::BlendOp::eAdd,
    VULKAN_HPP_NAMESPACE::BlendOp::eSubtract,
    VULKAN_HPP_NAMESPACE::BlendOp::eReverseSubtract,
    VULKAN_HPP_NAMESPACE::BlendOp::eMin,
    VULKAN_HPP_NAMESPACE::BlendOp::eMax};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::BlendOp>() {
    return _BlendOp_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::BlendOp* enum_values<VULKAN_HPP_NAMESPACE::BlendOp>() {
    return _BlendOp_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::BlendOp>(VULKAN_HPP_NAMESPACE::BlendOp value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::StencilOp, 8> _StencilOp_values = {
    VULKAN_HPP_NAMESPACE::StencilOp::eKeep,
    VULKAN_HPP_NAMESPACE::StencilOp::eZero,
    VULKAN_HPP_NAMESPACE::StencilOp::eReplace,
    VULKAN_HPP_NAMESPACE::StencilOp::eIncrementAndClamp,
    VULKAN_HPP_NAMESPACE::StencilOp::eDecrementAndClamp,
    VULKAN_HPP_NAMESPACE::StencilOp::eInvert,
    VULKAN_HPP_NAMESPACE::StencilOp::eIncrementAndWrap,
    VULKAN_HPP_NAMESPACE::StencilOp::eDecrementAndWrap};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::StencilOp>() {
    return _StencilOp_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::StencilOp* enum_values<VULKAN_HPP_NAMESPACE::StencilOp>() {
    return _StencilOp_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::StencilOp>(VULKAN_HPP_NAMESPACE::StencilOp value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::LogicOp, 16> _LogicOp_values = {
    VULKAN_HPP_NAMESPACE::LogicOp::eClear,
    VULKAN_HPP_NAMESPACE::LogicOp::eAnd,
    VULKAN_HPP_NAMESPACE::LogicOp::eAndReverse,
    VULKAN_HPP_NAMESPACE::LogicOp::eCopy,
    VULKAN_HPP_NAMESPACE::LogicOp::eAndInverted,
    VULKAN_HPP_NAMESPACE::LogicOp::eNoOp,
    VULKAN_HPP_NAMESPACE::LogicOp::eXor,
    VULKAN_HPP_NAMESPACE::LogicOp::eOr,
    VULKAN_HPP_NAMESPACE::LogicOp::eNor,
    VULKAN_HPP_NAMESPACE::LogicOp::eEquivalent,
    VULKAN_HPP_NAMESPACE::LogicOp::eInvert,
    VULKAN_HPP_NAMESPACE::LogicOp::eOrReverse,
    VULKAN_HPP_NAMESPACE::LogicOp::eCopyInverted,
    VULKAN_HPP_NAMESPACE::LogicOp::eOrInverted,
    VULKAN_HPP_NAMESPACE::LogicOp::eNand,
    VULKAN_HPP_NAMESPACE::LogicOp::eSet};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::LogicOp>() {
    return _LogicOp_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::LogicOp* enum_values<VULKAN_HPP_NAMESPACE::LogicOp>() {
    return _LogicOp_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::LogicOp>(VULKAN_HPP_NAMESPACE::LogicOp value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::InternalAllocationType, 1> _InternalAllocationType_values = {
    VULKAN_HPP_NAMESPACE::InternalAllocationType::eExecutable};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::InternalAllocationType>() {
    return _InternalAllocationType_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::InternalAllocationType* enum_values<VULKAN_HPP_NAMESPACE::InternalAllocationType>() {
    return _InternalAllocationType_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::InternalAllocationType>(VULKAN_HPP_NAMESPACE::InternalAllocationType value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::SystemAllocationScope, 5> _SystemAllocationScope_values = {
    VULKAN_HPP_NAMESPACE::SystemAllocationScope::eCommand,
    VULKAN_HPP_NAMESPACE::SystemAllocationScope::eObject,
    VULKAN_HPP_NAMESPACE::SystemAllocationScope::eCache,
    VULKAN_HPP_NAMESPACE::SystemAllocationScope::eDevice,
    VULKAN_HPP_NAMESPACE::SystemAllocationScope::eInstance};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::SystemAllocationScope>() {
    return _SystemAllocationScope_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::SystemAllocationScope* enum_values<VULKAN_HPP_NAMESPACE::SystemAllocationScope>() {
    return _SystemAllocationScope_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::SystemAllocationScope>(VULKAN_HPP_NAMESPACE::SystemAllocationScope value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::PhysicalDeviceType, 5> _PhysicalDeviceType_values = {
    VULKAN_HPP_NAMESPACE::PhysicalDeviceType::eOther,
    VULKAN_HPP_NAMESPACE::PhysicalDeviceType::eIntegratedGpu,
    VULKAN_HPP_NAMESPACE::PhysicalDeviceType::eDiscreteGpu,
    VULKAN_HPP_NAMESPACE::PhysicalDeviceType::eVirtualGpu,
    VULKAN_HPP_NAMESPACE::PhysicalDeviceType::eCpu};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::PhysicalDeviceType>() {
    return _PhysicalDeviceType_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::PhysicalDeviceType* enum_values<VULKAN_HPP_NAMESPACE::PhysicalDeviceType>() {
    return _PhysicalDeviceType_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::PhysicalDeviceType>(VULKAN_HPP_NAMESPACE::PhysicalDeviceType value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::VertexInputRate, 2> _VertexInputRate_values = {
    VULKAN_HPP_NAMESPACE::VertexInputRate::eVertex,
    VULKAN_HPP_NAMESPACE::VertexInputRate::eInstance};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::VertexInputRate>() {
    return _VertexInputRate_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::VertexInputRate* enum_values<VULKAN_HPP_NAMESPACE::VertexInputRate>() {
    return _VertexInputRate_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::VertexInputRate>(VULKAN_HPP_NAMESPACE::VertexInputRate value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::Format, 185> _Format_values = {
    VULKAN_HPP_NAMESPACE::Format::eUndefined,
    VULKAN_HPP_NAMESPACE::Format::eR4G4UnormPack8,
    VULKAN_HPP_NAMESPACE::Format::eR4G4B4A4UnormPack16,
    VULKAN_HPP_NAMESPACE::Format::eB4G4R4A4UnormPack16,
    VULKAN_HPP_NAMESPACE::Format::eR5G6B5UnormPack16,
    VULKAN_HPP_NAMESPACE::Format::eB5G6R5UnormPack16,
    VULKAN_HPP_NAMESPACE::Format::eR5G5B5A1UnormPack16,
    VULKAN_HPP_NAMESPACE::Format::eB5G5R5A1UnormPack16,
    VULKAN_HPP_NAMESPACE::Format::eA1R5G5B5UnormPack16,
    VULKAN_HPP_NAMESPACE::Format::eR8Unorm,
    VULKAN_HPP_NAMESPACE::Format::eR8Snorm,
    VULKAN_HPP_NAMESPACE::Format::eR8Uscaled,
    VULKAN_HPP_NAMESPACE::Format::eR8Sscaled,
    VULKAN_HPP_NAMESPACE::Format::eR8Uint,
    VULKAN_HPP_NAMESPACE::Format::eR8Sint,
    VULKAN_HPP_NAMESPACE::Format::eR8Srgb,
    VULKAN_HPP_NAMESPACE::Format::eR8G8Unorm,
    VULKAN_HPP_NAMESPACE::Format::eR8G8Snorm,
    VULKAN_HPP_NAMESPACE::Format::eR8G8Uscaled,
    VULKAN_HPP_NAMESPACE::Format::eR8G8Sscaled,
    VULKAN_HPP_NAMESPACE::Format::eR8G8Uint,
    VULKAN_HPP_NAMESPACE::Format::eR8G8Sint,
    VULKAN_HPP_NAMESPACE::Format::eR8G8Srgb,
    VULKAN_HPP_NAMESPACE::Format::eR8G8B8Unorm,
    VULKAN_HPP_NAMESPACE::Format::eR8G8B8Snorm,
    VULKAN_HPP_NAMESPACE::Format::eR8G8B8Uscaled,
    VULKAN_HPP_NAMESPACE::Format::eR8G8B8Sscaled,
    VULKAN_HPP_NAMESPACE::Format::eR8G8B8Uint,
    VULKAN_HPP_NAMESPACE::Format::eR8G8B8Sint,
    VULKAN_HPP_NAMESPACE::Format::eR8G8B8Srgb,
    VULKAN_HPP_NAMESPACE::Format::eB8G8R8Unorm,
    VULKAN_HPP_NAMESPACE::Format::eB8G8R8Snorm,
    VULKAN_HPP_NAMESPACE::Format::eB8G8R8Uscaled,
    VULKAN_HPP_NAMESPACE::Format::eB8G8R8Sscaled,
    VULKAN_HPP_NAMESPACE::Format::eB8G8R8Uint,
    VULKAN_HPP_NAMESPACE::Format::eB8G8R8Sint,
    VULKAN_HPP_NAMESPACE::Format::eB8G8R8Srgb,
    VULKAN_HPP_NAMESPACE::Format::eR8G8B8A8Unorm,
    VULKAN_HPP_NAMESPACE::Format::eR8G8B8A8Snorm,
    VULKAN_HPP_NAMESPACE::Format::eR8G8B8A8Uscaled,
    VULKAN_HPP_NAMESPACE::Format::eR8G8B8A8Sscaled,
    VULKAN_HPP_NAMESPACE::Format::eR8G8B8A8Uint,
    VULKAN_HPP_NAMESPACE::Format::eR8G8B8A8Sint,
    VULKAN_HPP_NAMESPACE::Format::eR8G8B8A8Srgb,
    VULKAN_HPP_NAMESPACE::Format::eB8G8R8A8Unorm,
    VULKAN_HPP_NAMESPACE::Format::eB8G8R8A8Snorm,
    VULKAN_HPP_NAMESPACE::Format::eB8G8R8A8Uscaled,
    VULKAN_HPP_NAMESPACE::Format::eB8G8R8A8Sscaled,
    VULKAN_HPP_NAMESPACE::Format::eB8G8R8A8Uint,
    VULKAN_HPP_NAMESPACE::Format::eB8G8R8A8Sint,
    VULKAN_HPP_NAMESPACE::Format::eB8G8R8A8Srgb,
    VULKAN_HPP_NAMESPACE::Format::eA8B8G8R8UnormPack32,
    VULKAN_HPP_NAMESPACE::Format::eA8B8G8R8SnormPack32,
    VULKAN_HPP_NAMESPACE::Format::eA8B8G8R8UscaledPack32,
    VULKAN_HPP_NAMESPACE::Format::eA8B8G8R8SscaledPack32,
    VULKAN_HPP_NAMESPACE::Format::eA8B8G8R8UintPack32,
    VULKAN_HPP_NAMESPACE::Format::eA8B8G8R8SintPack32,
    VULKAN_HPP_NAMESPACE::Format::eA8B8G8R8SrgbPack32,
    VULKAN_HPP_NAMESPACE::Format::eA2R10G10B10UnormPack32,
    VULKAN_HPP_NAMESPACE::Format::eA2R10G10B10SnormPack32,
    VULKAN_HPP_NAMESPACE::Format::eA2R10G10B10UscaledPack32,
    VULKAN_HPP_NAMESPACE::Format::eA2R10G10B10SscaledPack32,
    VULKAN_HPP_NAMESPACE::Format::eA2R10G10B10UintPack32,
    VULKAN_HPP_NAMESPACE::Format::eA2R10G10B10SintPack32,
    VULKAN_HPP_NAMESPACE::Format::eA2B10G10R10UnormPack32,
    VULKAN_HPP_NAMESPACE::Format::eA2B10G10R10SnormPack32,
    VULKAN_HPP_NAMESPACE::Format::eA2B10G10R10UscaledPack32,
    VULKAN_HPP_NAMESPACE::Format::eA2B10G10R10SscaledPack32,
    VULKAN_HPP_NAMESPACE::Format::eA2B10G10R10UintPack32,
    VULKAN_HPP_NAMESPACE::Format::eA2B10G10R10SintPack32,
    VULKAN_HPP_NAMESPACE::Format::eR16Unorm,
    VULKAN_HPP_NAMESPACE::Format::eR16Snorm,
    VULKAN_HPP_NAMESPACE::Format::eR16Uscaled,
    VULKAN_HPP_NAMESPACE::Format::eR16Sscaled,
    VULKAN_HPP_NAMESPACE::Format::eR16Uint,
    VULKAN_HPP_NAMESPACE::Format::eR16Sint,
    VULKAN_HPP_NAMESPACE::Format::eR16Sfloat,
    VULKAN_HPP_NAMESPACE::Format::eR16G16Unorm,
    VULKAN_HPP_NAMESPACE::Format::eR16G16Snorm,
    VULKAN_HPP_NAMESPACE::Format::eR16G16Uscaled,
    VULKAN_HPP_NAMESPACE::Format::eR16G16Sscaled,
    VULKAN_HPP_NAMESPACE::Format::eR16G16Uint,
    VULKAN_HPP_NAMESPACE::Format::eR16G16Sint,
    VULKAN_HPP_NAMESPACE::Format::eR16G16Sfloat,
    VULKAN_HPP_NAMESPACE::Format::eR16G16B16Unorm,
    VULKAN_HPP_NAMESPACE::Format::eR16G16B16Snorm,
    VULKAN_HPP_NAMESPACE::Format::eR16G16B16Uscaled,
    VULKAN_HPP_NAMESPACE::Format::eR16G16B16Sscaled,
    VULKAN_HPP_NAMESPACE::Format::eR16G16B16Uint,
    VULKAN_HPP_NAMESPACE::Format::eR16G16B16Sint,
    VULKAN_HPP_NAMESPACE::Format::eR16G16B16Sfloat,
    VULKAN_HPP_NAMESPACE::Format::eR16G16B16A16Unorm,
    VULKAN_HPP_NAMESPACE::Format::eR16G16B16A16Snorm,
    VULKAN_HPP_NAMESPACE::Format::eR16G16B16A16Uscaled,
    VULKAN_HPP_NAMESPACE::Format::eR16G16B16A16Sscaled,
    VULKAN_HPP_NAMESPACE::Format::eR16G16B16A16Uint,
    VULKAN_HPP_NAMESPACE::Format::eR16G16B16A16Sint,
    VULKAN_HPP_NAMESPACE::Format::eR16G16B16A16Sfloat,
    VULKAN_HPP_NAMESPACE::Format::eR32Uint,
    VULKAN_HPP_NAMESPACE::Format::eR32Sint,
    VULKAN_HPP_NAMESPACE::Format::eR32Sfloat,
    VULKAN_HPP_NAMESPACE::Format::eR32G32Uint,
    VULKAN_HPP_NAMESPACE::Format::eR32G32Sint,
    VULKAN_HPP_NAMESPACE::Format::eR32G32Sfloat,
    VULKAN_HPP_NAMESPACE::Format::eR32G32B32Uint,
    VULKAN_HPP_NAMESPACE::Format::eR32G32B32Sint,
    VULKAN_HPP_NAMESPACE::Format::eR32G32B32Sfloat,
    VULKAN_HPP_NAMESPACE::Format::eR32G32B32A32Uint,
    VULKAN_HPP_NAMESPACE::Format::eR32G32B32A32Sint,
    VULKAN_HPP_NAMESPACE::Format::eR32G32B32A32Sfloat,
    VULKAN_HPP_NAMESPACE::Format::eR64Uint,
    VULKAN_HPP_NAMESPACE::Format::eR64Sint,
    VULKAN_HPP_NAMESPACE::Format::eR64Sfloat,
    VULKAN_HPP_NAMESPACE::Format::eR64G64Uint,
    VULKAN_HPP_NAMESPACE::Format::eR64G64Sint,
    VULKAN_HPP_NAMESPACE::Format::eR64G64Sfloat,
    VULKAN_HPP_NAMESPACE::Format::eR64G64B64Uint,
    VULKAN_HPP_NAMESPACE::Format::eR64G64B64Sint,
    VULKAN_HPP_NAMESPACE::Format::eR64G64B64Sfloat,
    VULKAN_HPP_NAMESPACE::Format::eR64G64B64A64Uint,
    VULKAN_HPP_NAMESPACE::Format::eR64G64B64A64Sint,
    VULKAN_HPP_NAMESPACE::Format::eR64G64B64A64Sfloat,
    VULKAN_HPP_NAMESPACE::Format::eB10G11R11UfloatPack32,
    VULKAN_HPP_NAMESPACE::Format::eE5B9G9R9UfloatPack32,
    VULKAN_HPP_NAMESPACE::Format::eD16Unorm,
    VULKAN_HPP_NAMESPACE::Format::eX8D24UnormPack32,
    VULKAN_HPP_NAMESPACE::Format::eD32Sfloat,
    VULKAN_HPP_NAMESPACE::Format::eS8Uint,
    VULKAN_HPP_NAMESPACE::Format::eD16UnormS8Uint,
    VULKAN_HPP_NAMESPACE::Format::eD24UnormS8Uint,
    VULKAN_HPP_NAMESPACE::Format::eD32SfloatS8Uint,
    VULKAN_HPP_NAMESPACE::Format::eBc1RgbUnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eBc1RgbSrgbBlock,
    VULKAN_HPP_NAMESPACE::Format::eBc1RgbaUnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eBc1RgbaSrgbBlock,
    VULKAN_HPP_NAMESPACE::Format::eBc2UnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eBc2SrgbBlock,
    VULKAN_HPP_NAMESPACE::Format::eBc3UnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eBc3SrgbBlock,
    VULKAN_HPP_NAMESPACE::Format::eBc4UnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eBc4SnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eBc5UnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eBc5SnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eBc6HUfloatBlock,
    VULKAN_HPP_NAMESPACE::Format::eBc6HSfloatBlock,
    VULKAN_HPP_NAMESPACE::Format::eBc7UnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eBc7SrgbBlock,
    VULKAN_HPP_NAMESPACE::Format::eEtc2R8G8B8UnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eEtc2R8G8B8SrgbBlock,
    VULKAN_HPP_NAMESPACE::Format::eEtc2R8G8B8A1UnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eEtc2R8G8B8A1SrgbBlock,
    VULKAN_HPP_NAMESPACE::Format::eEtc2R8G8B8A8UnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eEtc2R8G8B8A8SrgbBlock,
    VULKAN_HPP_NAMESPACE::Format::eEacR11UnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eEacR11SnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eEacR11G11UnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eEacR11G11SnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc4x4UnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc4x4SrgbBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc5x4UnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc5x4SrgbBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc5x5UnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc5x5SrgbBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc6x5UnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc6x5SrgbBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc6x6UnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc6x6SrgbBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc8x5UnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc8x5SrgbBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc8x6UnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc8x6SrgbBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc8x8UnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc8x8SrgbBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc10x5UnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc10x5SrgbBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc10x6UnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc10x6SrgbBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc10x8UnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc10x8SrgbBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc10x10UnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc10x10SrgbBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc12x10UnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc12x10SrgbBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc12x12UnormBlock,
    VULKAN_HPP_NAMESPACE::Format::eAstc12x12SrgbBlock};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::Format>() {
    return _Format_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::Format* enum_values<VULKAN_HPP_NAMESPACE::Format>() {
    return _Format_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::Format>(VULKAN_HPP_NAMESPACE::Format value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::StructureType, 49> _StructureType_values = {
    VULKAN_HPP_NAMESPACE::StructureType::eApplicationInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eInstanceCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eDeviceQueueCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eDeviceCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eSubmitInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eMemoryAllocateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eMappedMemoryRange,
    VULKAN_HPP_NAMESPACE::StructureType::eBindSparseInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eFenceCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eSemaphoreCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eEventCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eQueryPoolCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eBufferCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eBufferViewCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eImageCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eImageViewCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eShaderModuleCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::ePipelineCacheCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::ePipelineShaderStageCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::ePipelineVertexInputStateCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::ePipelineInputAssemblyStateCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::ePipelineTessellationStateCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::ePipelineViewportStateCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::ePipelineRasterizationStateCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::ePipelineMultisampleStateCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::ePipelineDepthStencilStateCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::ePipelineColorBlendStateCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::ePipelineDynamicStateCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eGraphicsPipelineCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eComputePipelineCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::ePipelineLayoutCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eSamplerCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eDescriptorSetLayoutCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eDescriptorPoolCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eDescriptorSetAllocateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eWriteDescriptorSet,
    VULKAN_HPP_NAMESPACE::StructureType::eCopyDescriptorSet,
    VULKAN_HPP_NAMESPACE::StructureType::eFramebufferCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eRenderPassCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eCommandPoolCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eCommandBufferAllocateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eCommandBufferInheritanceInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eCommandBufferBeginInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eRenderPassBeginInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eBufferMemoryBarrier,
    VULKAN_HPP_NAMESPACE::StructureType::eImageMemoryBarrier,
    VULKAN_HPP_NAMESPACE::StructureType::eMemoryBarrier,
    VULKAN_HPP_NAMESPACE::StructureType::eLoaderInstanceCreateInfo,
    VULKAN_HPP_NAMESPACE::StructureType::eLoaderDeviceCreateInfo};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::StructureType>() {
    return _StructureType_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::StructureType* enum_values<VULKAN_HPP_NAMESPACE::StructureType>() {
    return _StructureType_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::StructureType>(VULKAN_HPP_NAMESPACE::StructureType value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::SubpassContents, 2> _SubpassContents_values = {
    VULKAN_HPP_NAMESPACE::SubpassContents::eInline,
    VULKAN_HPP_NAMESPACE::SubpassContents::eSecondaryCommandBuffers};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::SubpassContents>() {
    return _SubpassContents_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::SubpassContents* enum_values<VULKAN_HPP_NAMESPACE::SubpassContents>() {
    return _SubpassContents_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::SubpassContents>(VULKAN_HPP_NAMESPACE::SubpassContents value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::Result, 19> _Result_values = {
    VULKAN_HPP_NAMESPACE::Result::eSuccess,
    VULKAN_HPP_NAMESPACE::Result::eNotReady,
    VULKAN_HPP_NAMESPACE::Result::eTimeout,
    VULKAN_HPP_NAMESPACE::Result::eEventSet,
    VULKAN_HPP_NAMESPACE::Result::eEventReset,
    VULKAN_HPP_NAMESPACE::Result::eIncomplete,
    VULKAN_HPP_NAMESPACE::Result::eErrorOutOfHostMemory,
    VULKAN_HPP_NAMESPACE::Result::eErrorOutOfDeviceMemory,
    VULKAN_HPP_NAMESPACE::Result::eErrorInitializationFailed,
    VULKAN_HPP_NAMESPACE::Result::eErrorDeviceLost,
    VULKAN_HPP_NAMESPACE::Result::eErrorMemoryMapFailed,
    VULKAN_HPP_NAMESPACE::Result::eErrorLayerNotPresent,
    VULKAN_HPP_NAMESPACE::Result::eErrorExtensionNotPresent,
    VULKAN_HPP_NAMESPACE::Result::eErrorFeatureNotPresent,
    VULKAN_HPP_NAMESPACE::Result::eErrorIncompatibleDriver,
    VULKAN_HPP_NAMESPACE::Result::eErrorTooManyObjects,
    VULKAN_HPP_NAMESPACE::Result::eErrorFormatNotSupported,
    VULKAN_HPP_NAMESPACE::Result::eErrorFragmentedPool,
    VULKAN_HPP_NAMESPACE::Result::eErrorUnknown};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::Result>() {
    return _Result_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::Result* enum_values<VULKAN_HPP_NAMESPACE::Result>() {
    return _Result_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::Result>(VULKAN_HPP_NAMESPACE::Result value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::DynamicState, 9> _DynamicState_values = {
    VULKAN_HPP_NAMESPACE::DynamicState::eViewport,
    VULKAN_HPP_NAMESPACE::DynamicState::eScissor,
    VULKAN_HPP_NAMESPACE::DynamicState::eLineWidth,
    VULKAN_HPP_NAMESPACE::DynamicState::eDepthBias,
    VULKAN_HPP_NAMESPACE::DynamicState::eBlendConstants,
    VULKAN_HPP_NAMESPACE::DynamicState::eDepthBounds,
    VULKAN_HPP_NAMESPACE::DynamicState::eStencilCompareMask,
    VULKAN_HPP_NAMESPACE::DynamicState::eStencilWriteMask,
    VULKAN_HPP_NAMESPACE::DynamicState::eStencilReference};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::DynamicState>() {
    return _DynamicState_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::DynamicState* enum_values<VULKAN_HPP_NAMESPACE::DynamicState>() {
    return _DynamicState_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::DynamicState>(VULKAN_HPP_NAMESPACE::DynamicState value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::DescriptorUpdateTemplateType, 1> _DescriptorUpdateTemplateType_values = {
    VULKAN_HPP_NAMESPACE::DescriptorUpdateTemplateType::eDescriptorSet};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::DescriptorUpdateTemplateType>() {
    return _DescriptorUpdateTemplateType_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::DescriptorUpdateTemplateType* enum_values<VULKAN_HPP_NAMESPACE::DescriptorUpdateTemplateType>() {
    return _DescriptorUpdateTemplateType_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::DescriptorUpdateTemplateType>(VULKAN_HPP_NAMESPACE::DescriptorUpdateTemplateType value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::ObjectType, 26> _ObjectType_values = {
    VULKAN_HPP_NAMESPACE::ObjectType::eUnknown,
    VULKAN_HPP_NAMESPACE::ObjectType::eInstance,
    VULKAN_HPP_NAMESPACE::ObjectType::ePhysicalDevice,
    VULKAN_HPP_NAMESPACE::ObjectType::eDevice,
    VULKAN_HPP_NAMESPACE::ObjectType::eQueue,
    VULKAN_HPP_NAMESPACE::ObjectType::eSemaphore,
    VULKAN_HPP_NAMESPACE::ObjectType::eCommandBuffer,
    VULKAN_HPP_NAMESPACE::ObjectType::eFence,
    VULKAN_HPP_NAMESPACE::ObjectType::eDeviceMemory,
    VULKAN_HPP_NAMESPACE::ObjectType::eBuffer,
    VULKAN_HPP_NAMESPACE::ObjectType::eImage,
    VULKAN_HPP_NAMESPACE::ObjectType::eEvent,
    VULKAN_HPP_NAMESPACE::ObjectType::eQueryPool,
    VULKAN_HPP_NAMESPACE::ObjectType::eBufferView,
    VULKAN_HPP_NAMESPACE::ObjectType::eImageView,
    VULKAN_HPP_NAMESPACE::ObjectType::eShaderModule,
    VULKAN_HPP_NAMESPACE::ObjectType::ePipelineCache,
    VULKAN_HPP_NAMESPACE::ObjectType::ePipelineLayout,
    VULKAN_HPP_NAMESPACE::ObjectType::eRenderPass,
    VULKAN_HPP_NAMESPACE::ObjectType::ePipeline,
    VULKAN_HPP_NAMESPACE::ObjectType::eDescriptorSetLayout,
    VULKAN_HPP_NAMESPACE::ObjectType::eSampler,
    VULKAN_HPP_NAMESPACE::ObjectType::eDescriptorPool,
    VULKAN_HPP_NAMESPACE::ObjectType::eDescriptorSet,
    VULKAN_HPP_NAMESPACE::ObjectType::eFramebuffer,
    VULKAN_HPP_NAMESPACE::ObjectType::eCommandPool};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::ObjectType>() {
    return _ObjectType_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::ObjectType* enum_values<VULKAN_HPP_NAMESPACE::ObjectType>() {
    return _ObjectType_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::ObjectType>(VULKAN_HPP_NAMESPACE::ObjectType value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::RayTracingInvocationReorderModeNV, 2> _RayTracingInvocationReorderModeNV_values = {
    VULKAN_HPP_NAMESPACE::RayTracingInvocationReorderModeNV::eNone,
    VULKAN_HPP_NAMESPACE::RayTracingInvocationReorderModeNV::eReorder};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::RayTracingInvocationReorderModeNV>() {
    return _RayTracingInvocationReorderModeNV_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::RayTracingInvocationReorderModeNV* enum_values<VULKAN_HPP_NAMESPACE::RayTracingInvocationReorderModeNV>() {
    return _RayTracingInvocationReorderModeNV_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::RayTracingInvocationReorderModeNV>(VULKAN_HPP_NAMESPACE::RayTracingInvocationReorderModeNV value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::DirectDriverLoadingModeLUNARG, 2> _DirectDriverLoadingModeLUNARG_values = {
    VULKAN_HPP_NAMESPACE::DirectDriverLoadingModeLUNARG::eExclusive,
    VULKAN_HPP_NAMESPACE::DirectDriverLoadingModeLUNARG::eInclusive};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::DirectDriverLoadingModeLUNARG>() {
    return _DirectDriverLoadingModeLUNARG_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::DirectDriverLoadingModeLUNARG* enum_values<VULKAN_HPP_NAMESPACE::DirectDriverLoadingModeLUNARG>() {
    return _DirectDriverLoadingModeLUNARG_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::DirectDriverLoadingModeLUNARG>(VULKAN_HPP_NAMESPACE::DirectDriverLoadingModeLUNARG value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::SemaphoreType, 2> _SemaphoreType_values = {
    VULKAN_HPP_NAMESPACE::SemaphoreType::eBinary,
    VULKAN_HPP_NAMESPACE::SemaphoreType::eTimeline};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::SemaphoreType>() {
    return _SemaphoreType_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::SemaphoreType* enum_values<VULKAN_HPP_NAMESPACE::SemaphoreType>() {
    return _SemaphoreType_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::SemaphoreType>(VULKAN_HPP_NAMESPACE::SemaphoreType value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::PresentModeKHR, 4> _PresentModeKHR_values = {
    VULKAN_HPP_NAMESPACE::PresentModeKHR::eImmediate,
    VULKAN_HPP_NAMESPACE::PresentModeKHR::eMailbox,
    VULKAN_HPP_NAMESPACE::PresentModeKHR::eFifo,
    VULKAN_HPP_NAMESPACE::PresentModeKHR::eFifoRelaxed};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::PresentModeKHR>() {
    return _PresentModeKHR_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::PresentModeKHR* enum_values<VULKAN_HPP_NAMESPACE::PresentModeKHR>() {
    return _PresentModeKHR_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::PresentModeKHR>(VULKAN_HPP_NAMESPACE::PresentModeKHR value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::ColorSpaceKHR, 1> _ColorSpaceKHR_values = {
    VULKAN_HPP_NAMESPACE::ColorSpaceKHR::eSrgbNonlinear};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::ColorSpaceKHR>() {
    return _ColorSpaceKHR_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::ColorSpaceKHR* enum_values<VULKAN_HPP_NAMESPACE::ColorSpaceKHR>() {
    return _ColorSpaceKHR_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::ColorSpaceKHR>(VULKAN_HPP_NAMESPACE::ColorSpaceKHR value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::TimeDomainKHR, 4> _TimeDomainKHR_values = {
    VULKAN_HPP_NAMESPACE::TimeDomainKHR::eDevice,
    VULKAN_HPP_NAMESPACE::TimeDomainKHR::eClockMonotonic,
    VULKAN_HPP_NAMESPACE::TimeDomainKHR::eClockMonotonicRaw,
    VULKAN_HPP_NAMESPACE::TimeDomainKHR::eQueryPerformanceCounter};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::TimeDomainKHR>() {
    return _TimeDomainKHR_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::TimeDomainKHR* enum_values<VULKAN_HPP_NAMESPACE::TimeDomainKHR>() {
    return _TimeDomainKHR_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::TimeDomainKHR>(VULKAN_HPP_NAMESPACE::TimeDomainKHR value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT, 32> _DebugReportObjectTypeEXT_values = {
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eUnknown,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eInstance,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::ePhysicalDevice,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eDevice,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eQueue,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eSemaphore,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eCommandBuffer,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eFence,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eDeviceMemory,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eBuffer,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eImage,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eEvent,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eQueryPool,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eBufferView,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eImageView,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eShaderModule,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::ePipelineCache,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::ePipelineLayout,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eRenderPass,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::ePipeline,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eDescriptorSetLayout,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eSampler,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eDescriptorPool,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eDescriptorSet,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eFramebuffer,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eCommandPool,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eSurfaceKHR,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eSwapchainKHR,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eDebugReportCallbackEXT,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eDisplayKHR,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eDisplayModeKHR,
    VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT::eValidationCacheEXT};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT>() {
    return _DebugReportObjectTypeEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT* enum_values<VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT>() {
    return _DebugReportObjectTypeEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT>(VULKAN_HPP_NAMESPACE::DebugReportObjectTypeEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::DeviceMemoryReportEventTypeEXT, 5> _DeviceMemoryReportEventTypeEXT_values = {
    VULKAN_HPP_NAMESPACE::DeviceMemoryReportEventTypeEXT::eAllocate,
    VULKAN_HPP_NAMESPACE::DeviceMemoryReportEventTypeEXT::eFree,
    VULKAN_HPP_NAMESPACE::DeviceMemoryReportEventTypeEXT::eImport,
    VULKAN_HPP_NAMESPACE::DeviceMemoryReportEventTypeEXT::eUnimport,
    VULKAN_HPP_NAMESPACE::DeviceMemoryReportEventTypeEXT::eAllocationFailed};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::DeviceMemoryReportEventTypeEXT>() {
    return _DeviceMemoryReportEventTypeEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::DeviceMemoryReportEventTypeEXT* enum_values<VULKAN_HPP_NAMESPACE::DeviceMemoryReportEventTypeEXT>() {
    return _DeviceMemoryReportEventTypeEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::DeviceMemoryReportEventTypeEXT>(VULKAN_HPP_NAMESPACE::DeviceMemoryReportEventTypeEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::RasterizationOrderAMD, 2> _RasterizationOrderAMD_values = {
    VULKAN_HPP_NAMESPACE::RasterizationOrderAMD::eStrict,
    VULKAN_HPP_NAMESPACE::RasterizationOrderAMD::eRelaxed};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::RasterizationOrderAMD>() {
    return _RasterizationOrderAMD_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::RasterizationOrderAMD* enum_values<VULKAN_HPP_NAMESPACE::RasterizationOrderAMD>() {
    return _RasterizationOrderAMD_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::RasterizationOrderAMD>(VULKAN_HPP_NAMESPACE::RasterizationOrderAMD value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::ValidationCheckEXT, 2> _ValidationCheckEXT_values = {
    VULKAN_HPP_NAMESPACE::ValidationCheckEXT::eAll,
    VULKAN_HPP_NAMESPACE::ValidationCheckEXT::eShaders};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::ValidationCheckEXT>() {
    return _ValidationCheckEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::ValidationCheckEXT* enum_values<VULKAN_HPP_NAMESPACE::ValidationCheckEXT>() {
    return _ValidationCheckEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::ValidationCheckEXT>(VULKAN_HPP_NAMESPACE::ValidationCheckEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::ValidationFeatureEnableEXT, 5> _ValidationFeatureEnableEXT_values = {
    VULKAN_HPP_NAMESPACE::ValidationFeatureEnableEXT::eGpuAssisted,
    VULKAN_HPP_NAMESPACE::ValidationFeatureEnableEXT::eGpuAssistedReserveBindingSlot,
    VULKAN_HPP_NAMESPACE::ValidationFeatureEnableEXT::eBestPractices,
    VULKAN_HPP_NAMESPACE::ValidationFeatureEnableEXT::eDebugPrintf,
    VULKAN_HPP_NAMESPACE::ValidationFeatureEnableEXT::eSynchronizationValidation};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::ValidationFeatureEnableEXT>() {
    return _ValidationFeatureEnableEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::ValidationFeatureEnableEXT* enum_values<VULKAN_HPP_NAMESPACE::ValidationFeatureEnableEXT>() {
    return _ValidationFeatureEnableEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::ValidationFeatureEnableEXT>(VULKAN_HPP_NAMESPACE::ValidationFeatureEnableEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::ValidationFeatureDisableEXT, 8> _ValidationFeatureDisableEXT_values = {
    VULKAN_HPP_NAMESPACE::ValidationFeatureDisableEXT::eAll,
    VULKAN_HPP_NAMESPACE::ValidationFeatureDisableEXT::eShaders,
    VULKAN_HPP_NAMESPACE::ValidationFeatureDisableEXT::eThreadSafety,
    VULKAN_HPP_NAMESPACE::ValidationFeatureDisableEXT::eApiParameters,
    VULKAN_HPP_NAMESPACE::ValidationFeatureDisableEXT::eObjectLifetimes,
    VULKAN_HPP_NAMESPACE::ValidationFeatureDisableEXT::eCoreChecks,
    VULKAN_HPP_NAMESPACE::ValidationFeatureDisableEXT::eUniqueHandles,
    VULKAN_HPP_NAMESPACE::ValidationFeatureDisableEXT::eShaderValidationCache};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::ValidationFeatureDisableEXT>() {
    return _ValidationFeatureDisableEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::ValidationFeatureDisableEXT* enum_values<VULKAN_HPP_NAMESPACE::ValidationFeatureDisableEXT>() {
    return _ValidationFeatureDisableEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::ValidationFeatureDisableEXT>(VULKAN_HPP_NAMESPACE::ValidationFeatureDisableEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::LayerSettingTypeEXT, 8> _LayerSettingTypeEXT_values = {
    VULKAN_HPP_NAMESPACE::LayerSettingTypeEXT::eBool32,
    VULKAN_HPP_NAMESPACE::LayerSettingTypeEXT::eInt32,
    VULKAN_HPP_NAMESPACE::LayerSettingTypeEXT::eInt64,
    VULKAN_HPP_NAMESPACE::LayerSettingTypeEXT::eUint32,
    VULKAN_HPP_NAMESPACE::LayerSettingTypeEXT::eUint64,
    VULKAN_HPP_NAMESPACE::LayerSettingTypeEXT::eFloat32,
    VULKAN_HPP_NAMESPACE::LayerSettingTypeEXT::eFloat64,
    VULKAN_HPP_NAMESPACE::LayerSettingTypeEXT::eString};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::LayerSettingTypeEXT>() {
    return _LayerSettingTypeEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::LayerSettingTypeEXT* enum_values<VULKAN_HPP_NAMESPACE::LayerSettingTypeEXT>() {
    return _LayerSettingTypeEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::LayerSettingTypeEXT>(VULKAN_HPP_NAMESPACE::LayerSettingTypeEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::IndirectCommandsTokenTypeNV, 8> _IndirectCommandsTokenTypeNV_values = {
    VULKAN_HPP_NAMESPACE::IndirectCommandsTokenTypeNV::eShaderGroup,
    VULKAN_HPP_NAMESPACE::IndirectCommandsTokenTypeNV::eStateFlags,
    VULKAN_HPP_NAMESPACE::IndirectCommandsTokenTypeNV::eIndexBuffer,
    VULKAN_HPP_NAMESPACE::IndirectCommandsTokenTypeNV::eVertexBuffer,
    VULKAN_HPP_NAMESPACE::IndirectCommandsTokenTypeNV::ePushConstant,
    VULKAN_HPP_NAMESPACE::IndirectCommandsTokenTypeNV::eDrawIndexed,
    VULKAN_HPP_NAMESPACE::IndirectCommandsTokenTypeNV::eDraw,
    VULKAN_HPP_NAMESPACE::IndirectCommandsTokenTypeNV::eDrawTasks};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::IndirectCommandsTokenTypeNV>() {
    return _IndirectCommandsTokenTypeNV_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::IndirectCommandsTokenTypeNV* enum_values<VULKAN_HPP_NAMESPACE::IndirectCommandsTokenTypeNV>() {
    return _IndirectCommandsTokenTypeNV_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::IndirectCommandsTokenTypeNV>(VULKAN_HPP_NAMESPACE::IndirectCommandsTokenTypeNV value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::DisplayPowerStateEXT, 3> _DisplayPowerStateEXT_values = {
    VULKAN_HPP_NAMESPACE::DisplayPowerStateEXT::eOff,
    VULKAN_HPP_NAMESPACE::DisplayPowerStateEXT::eSuspend,
    VULKAN_HPP_NAMESPACE::DisplayPowerStateEXT::eOn};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::DisplayPowerStateEXT>() {
    return _DisplayPowerStateEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::DisplayPowerStateEXT* enum_values<VULKAN_HPP_NAMESPACE::DisplayPowerStateEXT>() {
    return _DisplayPowerStateEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::DisplayPowerStateEXT>(VULKAN_HPP_NAMESPACE::DisplayPowerStateEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::DeviceEventTypeEXT, 1> _DeviceEventTypeEXT_values = {
    VULKAN_HPP_NAMESPACE::DeviceEventTypeEXT::eDisplayHotplug};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::DeviceEventTypeEXT>() {
    return _DeviceEventTypeEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::DeviceEventTypeEXT* enum_values<VULKAN_HPP_NAMESPACE::DeviceEventTypeEXT>() {
    return _DeviceEventTypeEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::DeviceEventTypeEXT>(VULKAN_HPP_NAMESPACE::DeviceEventTypeEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::DisplayEventTypeEXT, 1> _DisplayEventTypeEXT_values = {
    VULKAN_HPP_NAMESPACE::DisplayEventTypeEXT::eFirstPixelOut};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::DisplayEventTypeEXT>() {
    return _DisplayEventTypeEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::DisplayEventTypeEXT* enum_values<VULKAN_HPP_NAMESPACE::DisplayEventTypeEXT>() {
    return _DisplayEventTypeEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::DisplayEventTypeEXT>(VULKAN_HPP_NAMESPACE::DisplayEventTypeEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::ViewportCoordinateSwizzleNV, 8> _ViewportCoordinateSwizzleNV_values = {
    VULKAN_HPP_NAMESPACE::ViewportCoordinateSwizzleNV::ePositiveX,
    VULKAN_HPP_NAMESPACE::ViewportCoordinateSwizzleNV::eNegativeX,
    VULKAN_HPP_NAMESPACE::ViewportCoordinateSwizzleNV::ePositiveY,
    VULKAN_HPP_NAMESPACE::ViewportCoordinateSwizzleNV::eNegativeY,
    VULKAN_HPP_NAMESPACE::ViewportCoordinateSwizzleNV::ePositiveZ,
    VULKAN_HPP_NAMESPACE::ViewportCoordinateSwizzleNV::eNegativeZ,
    VULKAN_HPP_NAMESPACE::ViewportCoordinateSwizzleNV::ePositiveW,
    VULKAN_HPP_NAMESPACE::ViewportCoordinateSwizzleNV::eNegativeW};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::ViewportCoordinateSwizzleNV>() {
    return _ViewportCoordinateSwizzleNV_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::ViewportCoordinateSwizzleNV* enum_values<VULKAN_HPP_NAMESPACE::ViewportCoordinateSwizzleNV>() {
    return _ViewportCoordinateSwizzleNV_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::ViewportCoordinateSwizzleNV>(VULKAN_HPP_NAMESPACE::ViewportCoordinateSwizzleNV value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::DiscardRectangleModeEXT, 2> _DiscardRectangleModeEXT_values = {
    VULKAN_HPP_NAMESPACE::DiscardRectangleModeEXT::eInclusive,
    VULKAN_HPP_NAMESPACE::DiscardRectangleModeEXT::eExclusive};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::DiscardRectangleModeEXT>() {
    return _DiscardRectangleModeEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::DiscardRectangleModeEXT* enum_values<VULKAN_HPP_NAMESPACE::DiscardRectangleModeEXT>() {
    return _DiscardRectangleModeEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::DiscardRectangleModeEXT>(VULKAN_HPP_NAMESPACE::DiscardRectangleModeEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::PointClippingBehavior, 2> _PointClippingBehavior_values = {
    VULKAN_HPP_NAMESPACE::PointClippingBehavior::eAllClipPlanes,
    VULKAN_HPP_NAMESPACE::PointClippingBehavior::eUserClipPlanesOnly};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::PointClippingBehavior>() {
    return _PointClippingBehavior_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::PointClippingBehavior* enum_values<VULKAN_HPP_NAMESPACE::PointClippingBehavior>() {
    return _PointClippingBehavior_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::PointClippingBehavior>(VULKAN_HPP_NAMESPACE::PointClippingBehavior value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::SamplerReductionMode, 3> _SamplerReductionMode_values = {
    VULKAN_HPP_NAMESPACE::SamplerReductionMode::eWeightedAverage,
    VULKAN_HPP_NAMESPACE::SamplerReductionMode::eMin,
    VULKAN_HPP_NAMESPACE::SamplerReductionMode::eMax};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::SamplerReductionMode>() {
    return _SamplerReductionMode_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::SamplerReductionMode* enum_values<VULKAN_HPP_NAMESPACE::SamplerReductionMode>() {
    return _SamplerReductionMode_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::SamplerReductionMode>(VULKAN_HPP_NAMESPACE::SamplerReductionMode value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::TessellationDomainOrigin, 2> _TessellationDomainOrigin_values = {
    VULKAN_HPP_NAMESPACE::TessellationDomainOrigin::eUpperLeft,
    VULKAN_HPP_NAMESPACE::TessellationDomainOrigin::eLowerLeft};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::TessellationDomainOrigin>() {
    return _TessellationDomainOrigin_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::TessellationDomainOrigin* enum_values<VULKAN_HPP_NAMESPACE::TessellationDomainOrigin>() {
    return _TessellationDomainOrigin_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::TessellationDomainOrigin>(VULKAN_HPP_NAMESPACE::TessellationDomainOrigin value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::SamplerYcbcrModelConversion, 5> _SamplerYcbcrModelConversion_values = {
    VULKAN_HPP_NAMESPACE::SamplerYcbcrModelConversion::eRgbIdentity,
    VULKAN_HPP_NAMESPACE::SamplerYcbcrModelConversion::eYcbcrIdentity,
    VULKAN_HPP_NAMESPACE::SamplerYcbcrModelConversion::eYcbcr709,
    VULKAN_HPP_NAMESPACE::SamplerYcbcrModelConversion::eYcbcr601,
    VULKAN_HPP_NAMESPACE::SamplerYcbcrModelConversion::eYcbcr2020};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::SamplerYcbcrModelConversion>() {
    return _SamplerYcbcrModelConversion_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::SamplerYcbcrModelConversion* enum_values<VULKAN_HPP_NAMESPACE::SamplerYcbcrModelConversion>() {
    return _SamplerYcbcrModelConversion_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::SamplerYcbcrModelConversion>(VULKAN_HPP_NAMESPACE::SamplerYcbcrModelConversion value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::SamplerYcbcrRange, 2> _SamplerYcbcrRange_values = {
    VULKAN_HPP_NAMESPACE::SamplerYcbcrRange::eItuFull,
    VULKAN_HPP_NAMESPACE::SamplerYcbcrRange::eItuNarrow};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::SamplerYcbcrRange>() {
    return _SamplerYcbcrRange_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::SamplerYcbcrRange* enum_values<VULKAN_HPP_NAMESPACE::SamplerYcbcrRange>() {
    return _SamplerYcbcrRange_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::SamplerYcbcrRange>(VULKAN_HPP_NAMESPACE::SamplerYcbcrRange value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::ChromaLocation, 2> _ChromaLocation_values = {
    VULKAN_HPP_NAMESPACE::ChromaLocation::eCositedEven,
    VULKAN_HPP_NAMESPACE::ChromaLocation::eMidpoint};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::ChromaLocation>() {
    return _ChromaLocation_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::ChromaLocation* enum_values<VULKAN_HPP_NAMESPACE::ChromaLocation>() {
    return _ChromaLocation_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::ChromaLocation>(VULKAN_HPP_NAMESPACE::ChromaLocation value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::BlendOverlapEXT, 3> _BlendOverlapEXT_values = {
    VULKAN_HPP_NAMESPACE::BlendOverlapEXT::eUncorrelated,
    VULKAN_HPP_NAMESPACE::BlendOverlapEXT::eDisjoint,
    VULKAN_HPP_NAMESPACE::BlendOverlapEXT::eConjoint};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::BlendOverlapEXT>() {
    return _BlendOverlapEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::BlendOverlapEXT* enum_values<VULKAN_HPP_NAMESPACE::BlendOverlapEXT>() {
    return _BlendOverlapEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::BlendOverlapEXT>(VULKAN_HPP_NAMESPACE::BlendOverlapEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::CoverageModulationModeNV, 4> _CoverageModulationModeNV_values = {
    VULKAN_HPP_NAMESPACE::CoverageModulationModeNV::eNone,
    VULKAN_HPP_NAMESPACE::CoverageModulationModeNV::eRgb,
    VULKAN_HPP_NAMESPACE::CoverageModulationModeNV::eAlpha,
    VULKAN_HPP_NAMESPACE::CoverageModulationModeNV::eRgba};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::CoverageModulationModeNV>() {
    return _CoverageModulationModeNV_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::CoverageModulationModeNV* enum_values<VULKAN_HPP_NAMESPACE::CoverageModulationModeNV>() {
    return _CoverageModulationModeNV_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::CoverageModulationModeNV>(VULKAN_HPP_NAMESPACE::CoverageModulationModeNV value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::CoverageReductionModeNV, 2> _CoverageReductionModeNV_values = {
    VULKAN_HPP_NAMESPACE::CoverageReductionModeNV::eMerge,
    VULKAN_HPP_NAMESPACE::CoverageReductionModeNV::eTruncate};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::CoverageReductionModeNV>() {
    return _CoverageReductionModeNV_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::CoverageReductionModeNV* enum_values<VULKAN_HPP_NAMESPACE::CoverageReductionModeNV>() {
    return _CoverageReductionModeNV_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::CoverageReductionModeNV>(VULKAN_HPP_NAMESPACE::CoverageReductionModeNV value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::ValidationCacheHeaderVersionEXT, 1> _ValidationCacheHeaderVersionEXT_values = {
    VULKAN_HPP_NAMESPACE::ValidationCacheHeaderVersionEXT::eOne};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::ValidationCacheHeaderVersionEXT>() {
    return _ValidationCacheHeaderVersionEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::ValidationCacheHeaderVersionEXT* enum_values<VULKAN_HPP_NAMESPACE::ValidationCacheHeaderVersionEXT>() {
    return _ValidationCacheHeaderVersionEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::ValidationCacheHeaderVersionEXT>(VULKAN_HPP_NAMESPACE::ValidationCacheHeaderVersionEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::ShaderInfoTypeAMD, 3> _ShaderInfoTypeAMD_values = {
    VULKAN_HPP_NAMESPACE::ShaderInfoTypeAMD::eStatistics,
    VULKAN_HPP_NAMESPACE::ShaderInfoTypeAMD::eBinary,
    VULKAN_HPP_NAMESPACE::ShaderInfoTypeAMD::eDisassembly};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::ShaderInfoTypeAMD>() {
    return _ShaderInfoTypeAMD_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::ShaderInfoTypeAMD* enum_values<VULKAN_HPP_NAMESPACE::ShaderInfoTypeAMD>() {
    return _ShaderInfoTypeAMD_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::ShaderInfoTypeAMD>(VULKAN_HPP_NAMESPACE::ShaderInfoTypeAMD value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::QueueGlobalPriorityKHR, 4> _QueueGlobalPriorityKHR_values = {
    VULKAN_HPP_NAMESPACE::QueueGlobalPriorityKHR::eLow,
    VULKAN_HPP_NAMESPACE::QueueGlobalPriorityKHR::eMedium,
    VULKAN_HPP_NAMESPACE::QueueGlobalPriorityKHR::eHigh,
    VULKAN_HPP_NAMESPACE::QueueGlobalPriorityKHR::eRealtime};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::QueueGlobalPriorityKHR>() {
    return _QueueGlobalPriorityKHR_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::QueueGlobalPriorityKHR* enum_values<VULKAN_HPP_NAMESPACE::QueueGlobalPriorityKHR>() {
    return _QueueGlobalPriorityKHR_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::QueueGlobalPriorityKHR>(VULKAN_HPP_NAMESPACE::QueueGlobalPriorityKHR value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::ConservativeRasterizationModeEXT, 3> _ConservativeRasterizationModeEXT_values = {
    VULKAN_HPP_NAMESPACE::ConservativeRasterizationModeEXT::eDisabled,
    VULKAN_HPP_NAMESPACE::ConservativeRasterizationModeEXT::eOverestimate,
    VULKAN_HPP_NAMESPACE::ConservativeRasterizationModeEXT::eUnderestimate};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::ConservativeRasterizationModeEXT>() {
    return _ConservativeRasterizationModeEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::ConservativeRasterizationModeEXT* enum_values<VULKAN_HPP_NAMESPACE::ConservativeRasterizationModeEXT>() {
    return _ConservativeRasterizationModeEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::ConservativeRasterizationModeEXT>(VULKAN_HPP_NAMESPACE::ConservativeRasterizationModeEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::VendorId, 7> _VendorId_values = {
    VULKAN_HPP_NAMESPACE::VendorId::eVIV,
    VULKAN_HPP_NAMESPACE::VendorId::eVSI,
    VULKAN_HPP_NAMESPACE::VendorId::eKazan,
    VULKAN_HPP_NAMESPACE::VendorId::eCodeplay,
    VULKAN_HPP_NAMESPACE::VendorId::eMESA,
    VULKAN_HPP_NAMESPACE::VendorId::ePocl,
    VULKAN_HPP_NAMESPACE::VendorId::eMobileye};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::VendorId>() {
    return _VendorId_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::VendorId* enum_values<VULKAN_HPP_NAMESPACE::VendorId>() {
    return _VendorId_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::VendorId>(VULKAN_HPP_NAMESPACE::VendorId value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::DriverId, 25> _DriverId_values = {
    VULKAN_HPP_NAMESPACE::DriverId::eAmdProprietary,
    VULKAN_HPP_NAMESPACE::DriverId::eAmdOpenSource,
    VULKAN_HPP_NAMESPACE::DriverId::eMesaRadv,
    VULKAN_HPP_NAMESPACE::DriverId::eNvidiaProprietary,
    VULKAN_HPP_NAMESPACE::DriverId::eIntelProprietaryWindows,
    VULKAN_HPP_NAMESPACE::DriverId::eIntelOpenSourceMESA,
    VULKAN_HPP_NAMESPACE::DriverId::eImaginationProprietary,
    VULKAN_HPP_NAMESPACE::DriverId::eQualcommProprietary,
    VULKAN_HPP_NAMESPACE::DriverId::eArmProprietary,
    VULKAN_HPP_NAMESPACE::DriverId::eGoogleSwiftshader,
    VULKAN_HPP_NAMESPACE::DriverId::eGgpProprietary,
    VULKAN_HPP_NAMESPACE::DriverId::eBroadcomProprietary,
    VULKAN_HPP_NAMESPACE::DriverId::eMesaLlvmpipe,
    VULKAN_HPP_NAMESPACE::DriverId::eMoltenvk,
    VULKAN_HPP_NAMESPACE::DriverId::eCoreaviProprietary,
    VULKAN_HPP_NAMESPACE::DriverId::eJuiceProprietary,
    VULKAN_HPP_NAMESPACE::DriverId::eVerisiliconProprietary,
    VULKAN_HPP_NAMESPACE::DriverId::eMesaTurnip,
    VULKAN_HPP_NAMESPACE::DriverId::eMesaV3Dv,
    VULKAN_HPP_NAMESPACE::DriverId::eMesaPanvk,
    VULKAN_HPP_NAMESPACE::DriverId::eSamsungProprietary,
    VULKAN_HPP_NAMESPACE::DriverId::eMesaVenus,
    VULKAN_HPP_NAMESPACE::DriverId::eMesaDozen,
    VULKAN_HPP_NAMESPACE::DriverId::eMesaNvk,
    VULKAN_HPP_NAMESPACE::DriverId::eImaginationOpenSourceMESA};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::DriverId>() {
    return _DriverId_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::DriverId* enum_values<VULKAN_HPP_NAMESPACE::DriverId>() {
    return _DriverId_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::DriverId>(VULKAN_HPP_NAMESPACE::DriverId value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::ShadingRatePaletteEntryNV, 12> _ShadingRatePaletteEntryNV_values = {
    VULKAN_HPP_NAMESPACE::ShadingRatePaletteEntryNV::eNoInvocations,
    VULKAN_HPP_NAMESPACE::ShadingRatePaletteEntryNV::e16InvocationsPerPixel,
    VULKAN_HPP_NAMESPACE::ShadingRatePaletteEntryNV::e8InvocationsPerPixel,
    VULKAN_HPP_NAMESPACE::ShadingRatePaletteEntryNV::e4InvocationsPerPixel,
    VULKAN_HPP_NAMESPACE::ShadingRatePaletteEntryNV::e2InvocationsPerPixel,
    VULKAN_HPP_NAMESPACE::ShadingRatePaletteEntryNV::e1InvocationPerPixel,
    VULKAN_HPP_NAMESPACE::ShadingRatePaletteEntryNV::e1InvocationPer2X1Pixels,
    VULKAN_HPP_NAMESPACE::ShadingRatePaletteEntryNV::e1InvocationPer1X2Pixels,
    VULKAN_HPP_NAMESPACE::ShadingRatePaletteEntryNV::e1InvocationPer2X2Pixels,
    VULKAN_HPP_NAMESPACE::ShadingRatePaletteEntryNV::e1InvocationPer4X2Pixels,
    VULKAN_HPP_NAMESPACE::ShadingRatePaletteEntryNV::e1InvocationPer2X4Pixels,
    VULKAN_HPP_NAMESPACE::ShadingRatePaletteEntryNV::e1InvocationPer4X4Pixels};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::ShadingRatePaletteEntryNV>() {
    return _ShadingRatePaletteEntryNV_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::ShadingRatePaletteEntryNV* enum_values<VULKAN_HPP_NAMESPACE::ShadingRatePaletteEntryNV>() {
    return _ShadingRatePaletteEntryNV_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::ShadingRatePaletteEntryNV>(VULKAN_HPP_NAMESPACE::ShadingRatePaletteEntryNV value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::CoarseSampleOrderTypeNV, 4> _CoarseSampleOrderTypeNV_values = {
    VULKAN_HPP_NAMESPACE::CoarseSampleOrderTypeNV::eDefault,
    VULKAN_HPP_NAMESPACE::CoarseSampleOrderTypeNV::eCustom,
    VULKAN_HPP_NAMESPACE::CoarseSampleOrderTypeNV::ePixelMajor,
    VULKAN_HPP_NAMESPACE::CoarseSampleOrderTypeNV::eSampleMajor};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::CoarseSampleOrderTypeNV>() {
    return _CoarseSampleOrderTypeNV_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::CoarseSampleOrderTypeNV* enum_values<VULKAN_HPP_NAMESPACE::CoarseSampleOrderTypeNV>() {
    return _CoarseSampleOrderTypeNV_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::CoarseSampleOrderTypeNV>(VULKAN_HPP_NAMESPACE::CoarseSampleOrderTypeNV value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::CopyAccelerationStructureModeKHR, 4> _CopyAccelerationStructureModeKHR_values = {
    VULKAN_HPP_NAMESPACE::CopyAccelerationStructureModeKHR::eClone,
    VULKAN_HPP_NAMESPACE::CopyAccelerationStructureModeKHR::eCompact,
    VULKAN_HPP_NAMESPACE::CopyAccelerationStructureModeKHR::eSerialize,
    VULKAN_HPP_NAMESPACE::CopyAccelerationStructureModeKHR::eDeserialize};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::CopyAccelerationStructureModeKHR>() {
    return _CopyAccelerationStructureModeKHR_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::CopyAccelerationStructureModeKHR* enum_values<VULKAN_HPP_NAMESPACE::CopyAccelerationStructureModeKHR>() {
    return _CopyAccelerationStructureModeKHR_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::CopyAccelerationStructureModeKHR>(VULKAN_HPP_NAMESPACE::CopyAccelerationStructureModeKHR value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::BuildAccelerationStructureModeKHR, 2> _BuildAccelerationStructureModeKHR_values = {
    VULKAN_HPP_NAMESPACE::BuildAccelerationStructureModeKHR::eBuild,
    VULKAN_HPP_NAMESPACE::BuildAccelerationStructureModeKHR::eUpdate};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::BuildAccelerationStructureModeKHR>() {
    return _BuildAccelerationStructureModeKHR_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::BuildAccelerationStructureModeKHR* enum_values<VULKAN_HPP_NAMESPACE::BuildAccelerationStructureModeKHR>() {
    return _BuildAccelerationStructureModeKHR_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::BuildAccelerationStructureModeKHR>(VULKAN_HPP_NAMESPACE::BuildAccelerationStructureModeKHR value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::AccelerationStructureTypeKHR, 3> _AccelerationStructureTypeKHR_values = {
    VULKAN_HPP_NAMESPACE::AccelerationStructureTypeKHR::eTopLevel,
    VULKAN_HPP_NAMESPACE::AccelerationStructureTypeKHR::eBottomLevel,
    VULKAN_HPP_NAMESPACE::AccelerationStructureTypeKHR::eGeneric};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::AccelerationStructureTypeKHR>() {
    return _AccelerationStructureTypeKHR_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::AccelerationStructureTypeKHR* enum_values<VULKAN_HPP_NAMESPACE::AccelerationStructureTypeKHR>() {
    return _AccelerationStructureTypeKHR_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::AccelerationStructureTypeKHR>(VULKAN_HPP_NAMESPACE::AccelerationStructureTypeKHR value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::GeometryTypeKHR, 3> _GeometryTypeKHR_values = {
    VULKAN_HPP_NAMESPACE::GeometryTypeKHR::eTriangles,
    VULKAN_HPP_NAMESPACE::GeometryTypeKHR::eAabbs,
    VULKAN_HPP_NAMESPACE::GeometryTypeKHR::eInstances};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::GeometryTypeKHR>() {
    return _GeometryTypeKHR_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::GeometryTypeKHR* enum_values<VULKAN_HPP_NAMESPACE::GeometryTypeKHR>() {
    return _GeometryTypeKHR_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::GeometryTypeKHR>(VULKAN_HPP_NAMESPACE::GeometryTypeKHR value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::AccelerationStructureMemoryRequirementsTypeNV, 3> _AccelerationStructureMemoryRequirementsTypeNV_values = {
    VULKAN_HPP_NAMESPACE::AccelerationStructureMemoryRequirementsTypeNV::eObject,
    VULKAN_HPP_NAMESPACE::AccelerationStructureMemoryRequirementsTypeNV::eBuildScratch,
    VULKAN_HPP_NAMESPACE::AccelerationStructureMemoryRequirementsTypeNV::eUpdateScratch};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::AccelerationStructureMemoryRequirementsTypeNV>() {
    return _AccelerationStructureMemoryRequirementsTypeNV_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::AccelerationStructureMemoryRequirementsTypeNV* enum_values<VULKAN_HPP_NAMESPACE::AccelerationStructureMemoryRequirementsTypeNV>() {
    return _AccelerationStructureMemoryRequirementsTypeNV_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::AccelerationStructureMemoryRequirementsTypeNV>(VULKAN_HPP_NAMESPACE::AccelerationStructureMemoryRequirementsTypeNV value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::AccelerationStructureBuildTypeKHR, 3> _AccelerationStructureBuildTypeKHR_values = {
    VULKAN_HPP_NAMESPACE::AccelerationStructureBuildTypeKHR::eHost,
    VULKAN_HPP_NAMESPACE::AccelerationStructureBuildTypeKHR::eDevice,
    VULKAN_HPP_NAMESPACE::AccelerationStructureBuildTypeKHR::eHostOrDevice};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::AccelerationStructureBuildTypeKHR>() {
    return _AccelerationStructureBuildTypeKHR_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::AccelerationStructureBuildTypeKHR* enum_values<VULKAN_HPP_NAMESPACE::AccelerationStructureBuildTypeKHR>() {
    return _AccelerationStructureBuildTypeKHR_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::AccelerationStructureBuildTypeKHR>(VULKAN_HPP_NAMESPACE::AccelerationStructureBuildTypeKHR value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::RayTracingShaderGroupTypeKHR, 3> _RayTracingShaderGroupTypeKHR_values = {
    VULKAN_HPP_NAMESPACE::RayTracingShaderGroupTypeKHR::eGeneral,
    VULKAN_HPP_NAMESPACE::RayTracingShaderGroupTypeKHR::eTrianglesHitGroup,
    VULKAN_HPP_NAMESPACE::RayTracingShaderGroupTypeKHR::eProceduralHitGroup};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::RayTracingShaderGroupTypeKHR>() {
    return _RayTracingShaderGroupTypeKHR_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::RayTracingShaderGroupTypeKHR* enum_values<VULKAN_HPP_NAMESPACE::RayTracingShaderGroupTypeKHR>() {
    return _RayTracingShaderGroupTypeKHR_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::RayTracingShaderGroupTypeKHR>(VULKAN_HPP_NAMESPACE::RayTracingShaderGroupTypeKHR value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::AccelerationStructureCompatibilityKHR, 2> _AccelerationStructureCompatibilityKHR_values = {
    VULKAN_HPP_NAMESPACE::AccelerationStructureCompatibilityKHR::eCompatible,
    VULKAN_HPP_NAMESPACE::AccelerationStructureCompatibilityKHR::eIncompatible};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::AccelerationStructureCompatibilityKHR>() {
    return _AccelerationStructureCompatibilityKHR_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::AccelerationStructureCompatibilityKHR* enum_values<VULKAN_HPP_NAMESPACE::AccelerationStructureCompatibilityKHR>() {
    return _AccelerationStructureCompatibilityKHR_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::AccelerationStructureCompatibilityKHR>(VULKAN_HPP_NAMESPACE::AccelerationStructureCompatibilityKHR value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::ShaderGroupShaderKHR, 4> _ShaderGroupShaderKHR_values = {
    VULKAN_HPP_NAMESPACE::ShaderGroupShaderKHR::eGeneral,
    VULKAN_HPP_NAMESPACE::ShaderGroupShaderKHR::eClosestHit,
    VULKAN_HPP_NAMESPACE::ShaderGroupShaderKHR::eAnyHit,
    VULKAN_HPP_NAMESPACE::ShaderGroupShaderKHR::eIntersection};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::ShaderGroupShaderKHR>() {
    return _ShaderGroupShaderKHR_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::ShaderGroupShaderKHR* enum_values<VULKAN_HPP_NAMESPACE::ShaderGroupShaderKHR>() {
    return _ShaderGroupShaderKHR_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::ShaderGroupShaderKHR>(VULKAN_HPP_NAMESPACE::ShaderGroupShaderKHR value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::MemoryOverallocationBehaviorAMD, 3> _MemoryOverallocationBehaviorAMD_values = {
    VULKAN_HPP_NAMESPACE::MemoryOverallocationBehaviorAMD::eDefault,
    VULKAN_HPP_NAMESPACE::MemoryOverallocationBehaviorAMD::eAllowed,
    VULKAN_HPP_NAMESPACE::MemoryOverallocationBehaviorAMD::eDisallowed};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::MemoryOverallocationBehaviorAMD>() {
    return _MemoryOverallocationBehaviorAMD_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::MemoryOverallocationBehaviorAMD* enum_values<VULKAN_HPP_NAMESPACE::MemoryOverallocationBehaviorAMD>() {
    return _MemoryOverallocationBehaviorAMD_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::MemoryOverallocationBehaviorAMD>(VULKAN_HPP_NAMESPACE::MemoryOverallocationBehaviorAMD value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::PerformanceCounterScopeKHR, 3> _PerformanceCounterScopeKHR_values = {
    VULKAN_HPP_NAMESPACE::PerformanceCounterScopeKHR::eCommandBuffer,
    VULKAN_HPP_NAMESPACE::PerformanceCounterScopeKHR::eRenderPass,
    VULKAN_HPP_NAMESPACE::PerformanceCounterScopeKHR::eCommand};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::PerformanceCounterScopeKHR>() {
    return _PerformanceCounterScopeKHR_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::PerformanceCounterScopeKHR* enum_values<VULKAN_HPP_NAMESPACE::PerformanceCounterScopeKHR>() {
    return _PerformanceCounterScopeKHR_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::PerformanceCounterScopeKHR>(VULKAN_HPP_NAMESPACE::PerformanceCounterScopeKHR value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::PerformanceCounterUnitKHR, 11> _PerformanceCounterUnitKHR_values = {
    VULKAN_HPP_NAMESPACE::PerformanceCounterUnitKHR::eGeneric,
    VULKAN_HPP_NAMESPACE::PerformanceCounterUnitKHR::ePercentage,
    VULKAN_HPP_NAMESPACE::PerformanceCounterUnitKHR::eNanoseconds,
    VULKAN_HPP_NAMESPACE::PerformanceCounterUnitKHR::eBytes,
    VULKAN_HPP_NAMESPACE::PerformanceCounterUnitKHR::eBytesPerSecond,
    VULKAN_HPP_NAMESPACE::PerformanceCounterUnitKHR::eKelvin,
    VULKAN_HPP_NAMESPACE::PerformanceCounterUnitKHR::eWatts,
    VULKAN_HPP_NAMESPACE::PerformanceCounterUnitKHR::eVolts,
    VULKAN_HPP_NAMESPACE::PerformanceCounterUnitKHR::eAmps,
    VULKAN_HPP_NAMESPACE::PerformanceCounterUnitKHR::eHertz,
    VULKAN_HPP_NAMESPACE::PerformanceCounterUnitKHR::eCycles};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::PerformanceCounterUnitKHR>() {
    return _PerformanceCounterUnitKHR_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::PerformanceCounterUnitKHR* enum_values<VULKAN_HPP_NAMESPACE::PerformanceCounterUnitKHR>() {
    return _PerformanceCounterUnitKHR_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::PerformanceCounterUnitKHR>(VULKAN_HPP_NAMESPACE::PerformanceCounterUnitKHR value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::PerformanceCounterStorageKHR, 6> _PerformanceCounterStorageKHR_values = {
    VULKAN_HPP_NAMESPACE::PerformanceCounterStorageKHR::eInt32,
    VULKAN_HPP_NAMESPACE::PerformanceCounterStorageKHR::eInt64,
    VULKAN_HPP_NAMESPACE::PerformanceCounterStorageKHR::eUint32,
    VULKAN_HPP_NAMESPACE::PerformanceCounterStorageKHR::eUint64,
    VULKAN_HPP_NAMESPACE::PerformanceCounterStorageKHR::eFloat32,
    VULKAN_HPP_NAMESPACE::PerformanceCounterStorageKHR::eFloat64};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::PerformanceCounterStorageKHR>() {
    return _PerformanceCounterStorageKHR_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::PerformanceCounterStorageKHR* enum_values<VULKAN_HPP_NAMESPACE::PerformanceCounterStorageKHR>() {
    return _PerformanceCounterStorageKHR_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::PerformanceCounterStorageKHR>(VULKAN_HPP_NAMESPACE::PerformanceCounterStorageKHR value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::PerformanceConfigurationTypeINTEL, 1> _PerformanceConfigurationTypeINTEL_values = {
    VULKAN_HPP_NAMESPACE::PerformanceConfigurationTypeINTEL::eCommandQueueMetricsDiscoveryActivated};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::PerformanceConfigurationTypeINTEL>() {
    return _PerformanceConfigurationTypeINTEL_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::PerformanceConfigurationTypeINTEL* enum_values<VULKAN_HPP_NAMESPACE::PerformanceConfigurationTypeINTEL>() {
    return _PerformanceConfigurationTypeINTEL_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::PerformanceConfigurationTypeINTEL>(VULKAN_HPP_NAMESPACE::PerformanceConfigurationTypeINTEL value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::QueryPoolSamplingModeINTEL, 1> _QueryPoolSamplingModeINTEL_values = {
    VULKAN_HPP_NAMESPACE::QueryPoolSamplingModeINTEL::eManual};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::QueryPoolSamplingModeINTEL>() {
    return _QueryPoolSamplingModeINTEL_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::QueryPoolSamplingModeINTEL* enum_values<VULKAN_HPP_NAMESPACE::QueryPoolSamplingModeINTEL>() {
    return _QueryPoolSamplingModeINTEL_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::QueryPoolSamplingModeINTEL>(VULKAN_HPP_NAMESPACE::QueryPoolSamplingModeINTEL value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::PerformanceOverrideTypeINTEL, 2> _PerformanceOverrideTypeINTEL_values = {
    VULKAN_HPP_NAMESPACE::PerformanceOverrideTypeINTEL::eNullHardware,
    VULKAN_HPP_NAMESPACE::PerformanceOverrideTypeINTEL::eFlushGpuCaches};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::PerformanceOverrideTypeINTEL>() {
    return _PerformanceOverrideTypeINTEL_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::PerformanceOverrideTypeINTEL* enum_values<VULKAN_HPP_NAMESPACE::PerformanceOverrideTypeINTEL>() {
    return _PerformanceOverrideTypeINTEL_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::PerformanceOverrideTypeINTEL>(VULKAN_HPP_NAMESPACE::PerformanceOverrideTypeINTEL value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::PerformanceParameterTypeINTEL, 2> _PerformanceParameterTypeINTEL_values = {
    VULKAN_HPP_NAMESPACE::PerformanceParameterTypeINTEL::eHwCountersSupported,
    VULKAN_HPP_NAMESPACE::PerformanceParameterTypeINTEL::eStreamMarkerValidBits};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::PerformanceParameterTypeINTEL>() {
    return _PerformanceParameterTypeINTEL_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::PerformanceParameterTypeINTEL* enum_values<VULKAN_HPP_NAMESPACE::PerformanceParameterTypeINTEL>() {
    return _PerformanceParameterTypeINTEL_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::PerformanceParameterTypeINTEL>(VULKAN_HPP_NAMESPACE::PerformanceParameterTypeINTEL value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::PerformanceValueTypeINTEL, 5> _PerformanceValueTypeINTEL_values = {
    VULKAN_HPP_NAMESPACE::PerformanceValueTypeINTEL::eUint32,
    VULKAN_HPP_NAMESPACE::PerformanceValueTypeINTEL::eUint64,
    VULKAN_HPP_NAMESPACE::PerformanceValueTypeINTEL::eFloat,
    VULKAN_HPP_NAMESPACE::PerformanceValueTypeINTEL::eBool,
    VULKAN_HPP_NAMESPACE::PerformanceValueTypeINTEL::eString};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::PerformanceValueTypeINTEL>() {
    return _PerformanceValueTypeINTEL_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::PerformanceValueTypeINTEL* enum_values<VULKAN_HPP_NAMESPACE::PerformanceValueTypeINTEL>() {
    return _PerformanceValueTypeINTEL_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::PerformanceValueTypeINTEL>(VULKAN_HPP_NAMESPACE::PerformanceValueTypeINTEL value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::ShaderFloatControlsIndependence, 3> _ShaderFloatControlsIndependence_values = {
    VULKAN_HPP_NAMESPACE::ShaderFloatControlsIndependence::e32BitOnly,
    VULKAN_HPP_NAMESPACE::ShaderFloatControlsIndependence::eAll,
    VULKAN_HPP_NAMESPACE::ShaderFloatControlsIndependence::eNone};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::ShaderFloatControlsIndependence>() {
    return _ShaderFloatControlsIndependence_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::ShaderFloatControlsIndependence* enum_values<VULKAN_HPP_NAMESPACE::ShaderFloatControlsIndependence>() {
    return _ShaderFloatControlsIndependence_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::ShaderFloatControlsIndependence>(VULKAN_HPP_NAMESPACE::ShaderFloatControlsIndependence value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::PipelineExecutableStatisticFormatKHR, 4> _PipelineExecutableStatisticFormatKHR_values = {
    VULKAN_HPP_NAMESPACE::PipelineExecutableStatisticFormatKHR::eBool32,
    VULKAN_HPP_NAMESPACE::PipelineExecutableStatisticFormatKHR::eInt64,
    VULKAN_HPP_NAMESPACE::PipelineExecutableStatisticFormatKHR::eUint64,
    VULKAN_HPP_NAMESPACE::PipelineExecutableStatisticFormatKHR::eFloat64};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::PipelineExecutableStatisticFormatKHR>() {
    return _PipelineExecutableStatisticFormatKHR_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::PipelineExecutableStatisticFormatKHR* enum_values<VULKAN_HPP_NAMESPACE::PipelineExecutableStatisticFormatKHR>() {
    return _PipelineExecutableStatisticFormatKHR_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::PipelineExecutableStatisticFormatKHR>(VULKAN_HPP_NAMESPACE::PipelineExecutableStatisticFormatKHR value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::LineRasterizationModeEXT, 4> _LineRasterizationModeEXT_values = {
    VULKAN_HPP_NAMESPACE::LineRasterizationModeEXT::eDefault,
    VULKAN_HPP_NAMESPACE::LineRasterizationModeEXT::eRectangular,
    VULKAN_HPP_NAMESPACE::LineRasterizationModeEXT::eBresenham,
    VULKAN_HPP_NAMESPACE::LineRasterizationModeEXT::eRectangularSmooth};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::LineRasterizationModeEXT>() {
    return _LineRasterizationModeEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::LineRasterizationModeEXT* enum_values<VULKAN_HPP_NAMESPACE::LineRasterizationModeEXT>() {
    return _LineRasterizationModeEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::LineRasterizationModeEXT>(VULKAN_HPP_NAMESPACE::LineRasterizationModeEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::FragmentShadingRateCombinerOpKHR, 5> _FragmentShadingRateCombinerOpKHR_values = {
    VULKAN_HPP_NAMESPACE::FragmentShadingRateCombinerOpKHR::eKeep,
    VULKAN_HPP_NAMESPACE::FragmentShadingRateCombinerOpKHR::eReplace,
    VULKAN_HPP_NAMESPACE::FragmentShadingRateCombinerOpKHR::eMin,
    VULKAN_HPP_NAMESPACE::FragmentShadingRateCombinerOpKHR::eMax,
    VULKAN_HPP_NAMESPACE::FragmentShadingRateCombinerOpKHR::eMul};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::FragmentShadingRateCombinerOpKHR>() {
    return _FragmentShadingRateCombinerOpKHR_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::FragmentShadingRateCombinerOpKHR* enum_values<VULKAN_HPP_NAMESPACE::FragmentShadingRateCombinerOpKHR>() {
    return _FragmentShadingRateCombinerOpKHR_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::FragmentShadingRateCombinerOpKHR>(VULKAN_HPP_NAMESPACE::FragmentShadingRateCombinerOpKHR value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::FragmentShadingRateNV, 12> _FragmentShadingRateNV_values = {
    VULKAN_HPP_NAMESPACE::FragmentShadingRateNV::e1InvocationPerPixel,
    VULKAN_HPP_NAMESPACE::FragmentShadingRateNV::e1InvocationPer1X2Pixels,
    VULKAN_HPP_NAMESPACE::FragmentShadingRateNV::e1InvocationPer2X1Pixels,
    VULKAN_HPP_NAMESPACE::FragmentShadingRateNV::e1InvocationPer2X2Pixels,
    VULKAN_HPP_NAMESPACE::FragmentShadingRateNV::e1InvocationPer2X4Pixels,
    VULKAN_HPP_NAMESPACE::FragmentShadingRateNV::e1InvocationPer4X2Pixels,
    VULKAN_HPP_NAMESPACE::FragmentShadingRateNV::e1InvocationPer4X4Pixels,
    VULKAN_HPP_NAMESPACE::FragmentShadingRateNV::e2InvocationsPerPixel,
    VULKAN_HPP_NAMESPACE::FragmentShadingRateNV::e4InvocationsPerPixel,
    VULKAN_HPP_NAMESPACE::FragmentShadingRateNV::e8InvocationsPerPixel,
    VULKAN_HPP_NAMESPACE::FragmentShadingRateNV::e16InvocationsPerPixel,
    VULKAN_HPP_NAMESPACE::FragmentShadingRateNV::eNoInvocations};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::FragmentShadingRateNV>() {
    return _FragmentShadingRateNV_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::FragmentShadingRateNV* enum_values<VULKAN_HPP_NAMESPACE::FragmentShadingRateNV>() {
    return _FragmentShadingRateNV_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::FragmentShadingRateNV>(VULKAN_HPP_NAMESPACE::FragmentShadingRateNV value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::FragmentShadingRateTypeNV, 2> _FragmentShadingRateTypeNV_values = {
    VULKAN_HPP_NAMESPACE::FragmentShadingRateTypeNV::eFragmentSize,
    VULKAN_HPP_NAMESPACE::FragmentShadingRateTypeNV::eEnums};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::FragmentShadingRateTypeNV>() {
    return _FragmentShadingRateTypeNV_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::FragmentShadingRateTypeNV* enum_values<VULKAN_HPP_NAMESPACE::FragmentShadingRateTypeNV>() {
    return _FragmentShadingRateTypeNV_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::FragmentShadingRateTypeNV>(VULKAN_HPP_NAMESPACE::FragmentShadingRateTypeNV value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::SubpassMergeStatusEXT, 14> _SubpassMergeStatusEXT_values = {
    VULKAN_HPP_NAMESPACE::SubpassMergeStatusEXT::eMerged,
    VULKAN_HPP_NAMESPACE::SubpassMergeStatusEXT::eDisallowed,
    VULKAN_HPP_NAMESPACE::SubpassMergeStatusEXT::eNotMergedSideEffects,
    VULKAN_HPP_NAMESPACE::SubpassMergeStatusEXT::eNotMergedSamplesMismatch,
    VULKAN_HPP_NAMESPACE::SubpassMergeStatusEXT::eNotMergedViewsMismatch,
    VULKAN_HPP_NAMESPACE::SubpassMergeStatusEXT::eNotMergedAliasing,
    VULKAN_HPP_NAMESPACE::SubpassMergeStatusEXT::eNotMergedDependencies,
    VULKAN_HPP_NAMESPACE::SubpassMergeStatusEXT::eNotMergedIncompatibleInputAttachment,
    VULKAN_HPP_NAMESPACE::SubpassMergeStatusEXT::eNotMergedTooManyAttachments,
    VULKAN_HPP_NAMESPACE::SubpassMergeStatusEXT::eNotMergedInsufficientStorage,
    VULKAN_HPP_NAMESPACE::SubpassMergeStatusEXT::eNotMergedDepthStencilCount,
    VULKAN_HPP_NAMESPACE::SubpassMergeStatusEXT::eNotMergedResolveAttachmentReuse,
    VULKAN_HPP_NAMESPACE::SubpassMergeStatusEXT::eNotMergedSingleSubpass,
    VULKAN_HPP_NAMESPACE::SubpassMergeStatusEXT::eNotMergedUnspecified};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::SubpassMergeStatusEXT>() {
    return _SubpassMergeStatusEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::SubpassMergeStatusEXT* enum_values<VULKAN_HPP_NAMESPACE::SubpassMergeStatusEXT>() {
    return _SubpassMergeStatusEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::SubpassMergeStatusEXT>(VULKAN_HPP_NAMESPACE::SubpassMergeStatusEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::ProvokingVertexModeEXT, 2> _ProvokingVertexModeEXT_values = {
    VULKAN_HPP_NAMESPACE::ProvokingVertexModeEXT::eFirstVertex,
    VULKAN_HPP_NAMESPACE::ProvokingVertexModeEXT::eLastVertex};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::ProvokingVertexModeEXT>() {
    return _ProvokingVertexModeEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::ProvokingVertexModeEXT* enum_values<VULKAN_HPP_NAMESPACE::ProvokingVertexModeEXT>() {
    return _ProvokingVertexModeEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::ProvokingVertexModeEXT>(VULKAN_HPP_NAMESPACE::ProvokingVertexModeEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::AccelerationStructureMotionInstanceTypeNV, 3> _AccelerationStructureMotionInstanceTypeNV_values = {
    VULKAN_HPP_NAMESPACE::AccelerationStructureMotionInstanceTypeNV::eStatic,
    VULKAN_HPP_NAMESPACE::AccelerationStructureMotionInstanceTypeNV::eMatrixMotion,
    VULKAN_HPP_NAMESPACE::AccelerationStructureMotionInstanceTypeNV::eSrtMotion};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::AccelerationStructureMotionInstanceTypeNV>() {
    return _AccelerationStructureMotionInstanceTypeNV_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::AccelerationStructureMotionInstanceTypeNV* enum_values<VULKAN_HPP_NAMESPACE::AccelerationStructureMotionInstanceTypeNV>() {
    return _AccelerationStructureMotionInstanceTypeNV_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::AccelerationStructureMotionInstanceTypeNV>(VULKAN_HPP_NAMESPACE::AccelerationStructureMotionInstanceTypeNV value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::DeviceAddressBindingTypeEXT, 2> _DeviceAddressBindingTypeEXT_values = {
    VULKAN_HPP_NAMESPACE::DeviceAddressBindingTypeEXT::eBind,
    VULKAN_HPP_NAMESPACE::DeviceAddressBindingTypeEXT::eUnbind};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::DeviceAddressBindingTypeEXT>() {
    return _DeviceAddressBindingTypeEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::DeviceAddressBindingTypeEXT* enum_values<VULKAN_HPP_NAMESPACE::DeviceAddressBindingTypeEXT>() {
    return _DeviceAddressBindingTypeEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::DeviceAddressBindingTypeEXT>(VULKAN_HPP_NAMESPACE::DeviceAddressBindingTypeEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::QueryResultStatusKHR, 3> _QueryResultStatusKHR_values = {
    VULKAN_HPP_NAMESPACE::QueryResultStatusKHR::eError,
    VULKAN_HPP_NAMESPACE::QueryResultStatusKHR::eNotReady,
    VULKAN_HPP_NAMESPACE::QueryResultStatusKHR::eComplete};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::QueryResultStatusKHR>() {
    return _QueryResultStatusKHR_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::QueryResultStatusKHR* enum_values<VULKAN_HPP_NAMESPACE::QueryResultStatusKHR>() {
    return _QueryResultStatusKHR_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::QueryResultStatusKHR>(VULKAN_HPP_NAMESPACE::QueryResultStatusKHR value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::VideoEncodeTuningModeKHR, 5> _VideoEncodeTuningModeKHR_values = {
    VULKAN_HPP_NAMESPACE::VideoEncodeTuningModeKHR::eDefault,
    VULKAN_HPP_NAMESPACE::VideoEncodeTuningModeKHR::eHighQuality,
    VULKAN_HPP_NAMESPACE::VideoEncodeTuningModeKHR::eLowLatency,
    VULKAN_HPP_NAMESPACE::VideoEncodeTuningModeKHR::eUltraLowLatency,
    VULKAN_HPP_NAMESPACE::VideoEncodeTuningModeKHR::eLossless};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::VideoEncodeTuningModeKHR>() {
    return _VideoEncodeTuningModeKHR_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::VideoEncodeTuningModeKHR* enum_values<VULKAN_HPP_NAMESPACE::VideoEncodeTuningModeKHR>() {
    return _VideoEncodeTuningModeKHR_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::VideoEncodeTuningModeKHR>(VULKAN_HPP_NAMESPACE::VideoEncodeTuningModeKHR value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::PipelineRobustnessBufferBehaviorEXT, 4> _PipelineRobustnessBufferBehaviorEXT_values = {
    VULKAN_HPP_NAMESPACE::PipelineRobustnessBufferBehaviorEXT::eDeviceDefault,
    VULKAN_HPP_NAMESPACE::PipelineRobustnessBufferBehaviorEXT::eDisabled,
    VULKAN_HPP_NAMESPACE::PipelineRobustnessBufferBehaviorEXT::eRobustBufferAccess,
    VULKAN_HPP_NAMESPACE::PipelineRobustnessBufferBehaviorEXT::eRobustBufferAccess2};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::PipelineRobustnessBufferBehaviorEXT>() {
    return _PipelineRobustnessBufferBehaviorEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::PipelineRobustnessBufferBehaviorEXT* enum_values<VULKAN_HPP_NAMESPACE::PipelineRobustnessBufferBehaviorEXT>() {
    return _PipelineRobustnessBufferBehaviorEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::PipelineRobustnessBufferBehaviorEXT>(VULKAN_HPP_NAMESPACE::PipelineRobustnessBufferBehaviorEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::PipelineRobustnessImageBehaviorEXT, 4> _PipelineRobustnessImageBehaviorEXT_values = {
    VULKAN_HPP_NAMESPACE::PipelineRobustnessImageBehaviorEXT::eDeviceDefault,
    VULKAN_HPP_NAMESPACE::PipelineRobustnessImageBehaviorEXT::eDisabled,
    VULKAN_HPP_NAMESPACE::PipelineRobustnessImageBehaviorEXT::eRobustImageAccess,
    VULKAN_HPP_NAMESPACE::PipelineRobustnessImageBehaviorEXT::eRobustImageAccess2};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::PipelineRobustnessImageBehaviorEXT>() {
    return _PipelineRobustnessImageBehaviorEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::PipelineRobustnessImageBehaviorEXT* enum_values<VULKAN_HPP_NAMESPACE::PipelineRobustnessImageBehaviorEXT>() {
    return _PipelineRobustnessImageBehaviorEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::PipelineRobustnessImageBehaviorEXT>(VULKAN_HPP_NAMESPACE::PipelineRobustnessImageBehaviorEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::OpticalFlowPerformanceLevelNV, 4> _OpticalFlowPerformanceLevelNV_values = {
    VULKAN_HPP_NAMESPACE::OpticalFlowPerformanceLevelNV::eUnknown,
    VULKAN_HPP_NAMESPACE::OpticalFlowPerformanceLevelNV::eSlow,
    VULKAN_HPP_NAMESPACE::OpticalFlowPerformanceLevelNV::eMedium,
    VULKAN_HPP_NAMESPACE::OpticalFlowPerformanceLevelNV::eFast};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::OpticalFlowPerformanceLevelNV>() {
    return _OpticalFlowPerformanceLevelNV_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::OpticalFlowPerformanceLevelNV* enum_values<VULKAN_HPP_NAMESPACE::OpticalFlowPerformanceLevelNV>() {
    return _OpticalFlowPerformanceLevelNV_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::OpticalFlowPerformanceLevelNV>(VULKAN_HPP_NAMESPACE::OpticalFlowPerformanceLevelNV value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::OpticalFlowSessionBindingPointNV, 9> _OpticalFlowSessionBindingPointNV_values = {
    VULKAN_HPP_NAMESPACE::OpticalFlowSessionBindingPointNV::eUnknown,
    VULKAN_HPP_NAMESPACE::OpticalFlowSessionBindingPointNV::eInput,
    VULKAN_HPP_NAMESPACE::OpticalFlowSessionBindingPointNV::eReference,
    VULKAN_HPP_NAMESPACE::OpticalFlowSessionBindingPointNV::eHint,
    VULKAN_HPP_NAMESPACE::OpticalFlowSessionBindingPointNV::eFlowVector,
    VULKAN_HPP_NAMESPACE::OpticalFlowSessionBindingPointNV::eBackwardFlowVector,
    VULKAN_HPP_NAMESPACE::OpticalFlowSessionBindingPointNV::eCost,
    VULKAN_HPP_NAMESPACE::OpticalFlowSessionBindingPointNV::eBackwardCost,
    VULKAN_HPP_NAMESPACE::OpticalFlowSessionBindingPointNV::eGlobalFlow};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::OpticalFlowSessionBindingPointNV>() {
    return _OpticalFlowSessionBindingPointNV_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::OpticalFlowSessionBindingPointNV* enum_values<VULKAN_HPP_NAMESPACE::OpticalFlowSessionBindingPointNV>() {
    return _OpticalFlowSessionBindingPointNV_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::OpticalFlowSessionBindingPointNV>(VULKAN_HPP_NAMESPACE::OpticalFlowSessionBindingPointNV value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::MicromapTypeEXT, 1> _MicromapTypeEXT_values = {
    VULKAN_HPP_NAMESPACE::MicromapTypeEXT::eOpacityMicromap};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::MicromapTypeEXT>() {
    return _MicromapTypeEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::MicromapTypeEXT* enum_values<VULKAN_HPP_NAMESPACE::MicromapTypeEXT>() {
    return _MicromapTypeEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::MicromapTypeEXT>(VULKAN_HPP_NAMESPACE::MicromapTypeEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::CopyMicromapModeEXT, 4> _CopyMicromapModeEXT_values = {
    VULKAN_HPP_NAMESPACE::CopyMicromapModeEXT::eClone,
    VULKAN_HPP_NAMESPACE::CopyMicromapModeEXT::eSerialize,
    VULKAN_HPP_NAMESPACE::CopyMicromapModeEXT::eDeserialize,
    VULKAN_HPP_NAMESPACE::CopyMicromapModeEXT::eCompact};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::CopyMicromapModeEXT>() {
    return _CopyMicromapModeEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::CopyMicromapModeEXT* enum_values<VULKAN_HPP_NAMESPACE::CopyMicromapModeEXT>() {
    return _CopyMicromapModeEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::CopyMicromapModeEXT>(VULKAN_HPP_NAMESPACE::CopyMicromapModeEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::BuildMicromapModeEXT, 1> _BuildMicromapModeEXT_values = {
    VULKAN_HPP_NAMESPACE::BuildMicromapModeEXT::eBuild};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::BuildMicromapModeEXT>() {
    return _BuildMicromapModeEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::BuildMicromapModeEXT* enum_values<VULKAN_HPP_NAMESPACE::BuildMicromapModeEXT>() {
    return _BuildMicromapModeEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::BuildMicromapModeEXT>(VULKAN_HPP_NAMESPACE::BuildMicromapModeEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::OpacityMicromapFormatEXT, 2> _OpacityMicromapFormatEXT_values = {
    VULKAN_HPP_NAMESPACE::OpacityMicromapFormatEXT::e2State,
    VULKAN_HPP_NAMESPACE::OpacityMicromapFormatEXT::e4State};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::OpacityMicromapFormatEXT>() {
    return _OpacityMicromapFormatEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::OpacityMicromapFormatEXT* enum_values<VULKAN_HPP_NAMESPACE::OpacityMicromapFormatEXT>() {
    return _OpacityMicromapFormatEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::OpacityMicromapFormatEXT>(VULKAN_HPP_NAMESPACE::OpacityMicromapFormatEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::OpacityMicromapSpecialIndexEXT, 4> _OpacityMicromapSpecialIndexEXT_values = {
    VULKAN_HPP_NAMESPACE::OpacityMicromapSpecialIndexEXT::eFullyTransparent,
    VULKAN_HPP_NAMESPACE::OpacityMicromapSpecialIndexEXT::eFullyOpaque,
    VULKAN_HPP_NAMESPACE::OpacityMicromapSpecialIndexEXT::eFullyUnknownTransparent,
    VULKAN_HPP_NAMESPACE::OpacityMicromapSpecialIndexEXT::eFullyUnknownOpaque};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::OpacityMicromapSpecialIndexEXT>() {
    return _OpacityMicromapSpecialIndexEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::OpacityMicromapSpecialIndexEXT* enum_values<VULKAN_HPP_NAMESPACE::OpacityMicromapSpecialIndexEXT>() {
    return _OpacityMicromapSpecialIndexEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::OpacityMicromapSpecialIndexEXT>(VULKAN_HPP_NAMESPACE::OpacityMicromapSpecialIndexEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::DepthBiasRepresentationEXT, 3> _DepthBiasRepresentationEXT_values = {
    VULKAN_HPP_NAMESPACE::DepthBiasRepresentationEXT::eLeastRepresentableValueFormat,
    VULKAN_HPP_NAMESPACE::DepthBiasRepresentationEXT::eLeastRepresentableValueForceUnorm,
    VULKAN_HPP_NAMESPACE::DepthBiasRepresentationEXT::eFloat};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::DepthBiasRepresentationEXT>() {
    return _DepthBiasRepresentationEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::DepthBiasRepresentationEXT* enum_values<VULKAN_HPP_NAMESPACE::DepthBiasRepresentationEXT>() {
    return _DepthBiasRepresentationEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::DepthBiasRepresentationEXT>(VULKAN_HPP_NAMESPACE::DepthBiasRepresentationEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::DeviceFaultAddressTypeEXT, 7> _DeviceFaultAddressTypeEXT_values = {
    VULKAN_HPP_NAMESPACE::DeviceFaultAddressTypeEXT::eNone,
    VULKAN_HPP_NAMESPACE::DeviceFaultAddressTypeEXT::eReadInvalid,
    VULKAN_HPP_NAMESPACE::DeviceFaultAddressTypeEXT::eWriteInvalid,
    VULKAN_HPP_NAMESPACE::DeviceFaultAddressTypeEXT::eExecuteInvalid,
    VULKAN_HPP_NAMESPACE::DeviceFaultAddressTypeEXT::eInstructionPointerUnknown,
    VULKAN_HPP_NAMESPACE::DeviceFaultAddressTypeEXT::eInstructionPointerInvalid,
    VULKAN_HPP_NAMESPACE::DeviceFaultAddressTypeEXT::eInstructionPointerFault};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::DeviceFaultAddressTypeEXT>() {
    return _DeviceFaultAddressTypeEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::DeviceFaultAddressTypeEXT* enum_values<VULKAN_HPP_NAMESPACE::DeviceFaultAddressTypeEXT>() {
    return _DeviceFaultAddressTypeEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::DeviceFaultAddressTypeEXT>(VULKAN_HPP_NAMESPACE::DeviceFaultAddressTypeEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::DeviceFaultVendorBinaryHeaderVersionEXT, 1> _DeviceFaultVendorBinaryHeaderVersionEXT_values = {
    VULKAN_HPP_NAMESPACE::DeviceFaultVendorBinaryHeaderVersionEXT::eOne};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::DeviceFaultVendorBinaryHeaderVersionEXT>() {
    return _DeviceFaultVendorBinaryHeaderVersionEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::DeviceFaultVendorBinaryHeaderVersionEXT* enum_values<VULKAN_HPP_NAMESPACE::DeviceFaultVendorBinaryHeaderVersionEXT>() {
    return _DeviceFaultVendorBinaryHeaderVersionEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::DeviceFaultVendorBinaryHeaderVersionEXT>(VULKAN_HPP_NAMESPACE::DeviceFaultVendorBinaryHeaderVersionEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::ShaderCodeTypeEXT, 2> _ShaderCodeTypeEXT_values = {
    VULKAN_HPP_NAMESPACE::ShaderCodeTypeEXT::eBinary,
    VULKAN_HPP_NAMESPACE::ShaderCodeTypeEXT::eSpirv};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::ShaderCodeTypeEXT>() {
    return _ShaderCodeTypeEXT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::ShaderCodeTypeEXT* enum_values<VULKAN_HPP_NAMESPACE::ShaderCodeTypeEXT>() {
    return _ShaderCodeTypeEXT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::ShaderCodeTypeEXT>(VULKAN_HPP_NAMESPACE::ShaderCodeTypeEXT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::ScopeKHR, 4> _ScopeKHR_values = {
    VULKAN_HPP_NAMESPACE::ScopeKHR::eDevice,
    VULKAN_HPP_NAMESPACE::ScopeKHR::eWorkgroup,
    VULKAN_HPP_NAMESPACE::ScopeKHR::eSubgroup,
    VULKAN_HPP_NAMESPACE::ScopeKHR::eQueueFamily};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::ScopeKHR>() {
    return _ScopeKHR_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::ScopeKHR* enum_values<VULKAN_HPP_NAMESPACE::ScopeKHR>() {
    return _ScopeKHR_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::ScopeKHR>(VULKAN_HPP_NAMESPACE::ScopeKHR value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::ComponentTypeKHR, 11> _ComponentTypeKHR_values = {
    VULKAN_HPP_NAMESPACE::ComponentTypeKHR::eFloat16,
    VULKAN_HPP_NAMESPACE::ComponentTypeKHR::eFloat32,
    VULKAN_HPP_NAMESPACE::ComponentTypeKHR::eFloat64,
    VULKAN_HPP_NAMESPACE::ComponentTypeKHR::eSint8,
    VULKAN_HPP_NAMESPACE::ComponentTypeKHR::eSint16,
    VULKAN_HPP_NAMESPACE::ComponentTypeKHR::eSint32,
    VULKAN_HPP_NAMESPACE::ComponentTypeKHR::eSint64,
    VULKAN_HPP_NAMESPACE::ComponentTypeKHR::eUint8,
    VULKAN_HPP_NAMESPACE::ComponentTypeKHR::eUint16,
    VULKAN_HPP_NAMESPACE::ComponentTypeKHR::eUint32,
    VULKAN_HPP_NAMESPACE::ComponentTypeKHR::eUint64};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::ComponentTypeKHR>() {
    return _ComponentTypeKHR_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::ComponentTypeKHR* enum_values<VULKAN_HPP_NAMESPACE::ComponentTypeKHR>() {
    return _ComponentTypeKHR_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::ComponentTypeKHR>(VULKAN_HPP_NAMESPACE::ComponentTypeKHR value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::CubicFilterWeightsQCOM, 4> _CubicFilterWeightsQCOM_values = {
    VULKAN_HPP_NAMESPACE::CubicFilterWeightsQCOM::eCatmullRom,
    VULKAN_HPP_NAMESPACE::CubicFilterWeightsQCOM::eZeroTangentCardinal,
    VULKAN_HPP_NAMESPACE::CubicFilterWeightsQCOM::eBSpline,
    VULKAN_HPP_NAMESPACE::CubicFilterWeightsQCOM::eMitchellNetravali};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::CubicFilterWeightsQCOM>() {
    return _CubicFilterWeightsQCOM_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::CubicFilterWeightsQCOM* enum_values<VULKAN_HPP_NAMESPACE::CubicFilterWeightsQCOM>() {
    return _CubicFilterWeightsQCOM_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::CubicFilterWeightsQCOM>(VULKAN_HPP_NAMESPACE::CubicFilterWeightsQCOM value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::BlockMatchWindowCompareModeQCOM, 2> _BlockMatchWindowCompareModeQCOM_values = {
    VULKAN_HPP_NAMESPACE::BlockMatchWindowCompareModeQCOM::eMin,
    VULKAN_HPP_NAMESPACE::BlockMatchWindowCompareModeQCOM::eMax};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::BlockMatchWindowCompareModeQCOM>() {
    return _BlockMatchWindowCompareModeQCOM_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::BlockMatchWindowCompareModeQCOM* enum_values<VULKAN_HPP_NAMESPACE::BlockMatchWindowCompareModeQCOM>() {
    return _BlockMatchWindowCompareModeQCOM_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::BlockMatchWindowCompareModeQCOM>(VULKAN_HPP_NAMESPACE::BlockMatchWindowCompareModeQCOM value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::LayeredDriverUnderlyingApiMSFT, 2> _LayeredDriverUnderlyingApiMSFT_values = {
    VULKAN_HPP_NAMESPACE::LayeredDriverUnderlyingApiMSFT::eNone,
    VULKAN_HPP_NAMESPACE::LayeredDriverUnderlyingApiMSFT::eD3D12};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::LayeredDriverUnderlyingApiMSFT>() {
    return _LayeredDriverUnderlyingApiMSFT_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::LayeredDriverUnderlyingApiMSFT* enum_values<VULKAN_HPP_NAMESPACE::LayeredDriverUnderlyingApiMSFT>() {
    return _LayeredDriverUnderlyingApiMSFT_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::LayeredDriverUnderlyingApiMSFT>(VULKAN_HPP_NAMESPACE::LayeredDriverUnderlyingApiMSFT value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::LatencyMarkerNV, 12> _LatencyMarkerNV_values = {
    VULKAN_HPP_NAMESPACE::LatencyMarkerNV::eSimulationStart,
    VULKAN_HPP_NAMESPACE::LatencyMarkerNV::eSimulationEnd,
    VULKAN_HPP_NAMESPACE::LatencyMarkerNV::eRendersubmitStart,
    VULKAN_HPP_NAMESPACE::LatencyMarkerNV::eRendersubmitEnd,
    VULKAN_HPP_NAMESPACE::LatencyMarkerNV::ePresentStart,
    VULKAN_HPP_NAMESPACE::LatencyMarkerNV::ePresentEnd,
    VULKAN_HPP_NAMESPACE::LatencyMarkerNV::eInputSample,
    VULKAN_HPP_NAMESPACE::LatencyMarkerNV::eTriggerFlash,
    VULKAN_HPP_NAMESPACE::LatencyMarkerNV::eOutOfBandRendersubmitStart,
    VULKAN_HPP_NAMESPACE::LatencyMarkerNV::eOutOfBandRendersubmitEnd,
    VULKAN_HPP_NAMESPACE::LatencyMarkerNV::eOutOfBandPresentStart,
    VULKAN_HPP_NAMESPACE::LatencyMarkerNV::eOutOfBandPresentEnd};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::LatencyMarkerNV>() {
    return _LatencyMarkerNV_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::LatencyMarkerNV* enum_values<VULKAN_HPP_NAMESPACE::LatencyMarkerNV>() {
    return _LatencyMarkerNV_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::LatencyMarkerNV>(VULKAN_HPP_NAMESPACE::LatencyMarkerNV value) {
    return vk::to_string(value);
}

static constexpr std::array<VULKAN_HPP_NAMESPACE::OutOfBandQueueTypeNV, 2> _OutOfBandQueueTypeNV_values = {
    VULKAN_HPP_NAMESPACE::OutOfBandQueueTypeNV::eRender,
    VULKAN_HPP_NAMESPACE::OutOfBandQueueTypeNV::ePresent};

template<> uint32_t enum_size<VULKAN_HPP_NAMESPACE::OutOfBandQueueTypeNV>() {
    return _OutOfBandQueueTypeNV_values.size();
}

template<> const VULKAN_HPP_NAMESPACE::OutOfBandQueueTypeNV* enum_values<VULKAN_HPP_NAMESPACE::OutOfBandQueueTypeNV>() {
    return _OutOfBandQueueTypeNV_values.data();
}

template<> std::string enum_to_string<VULKAN_HPP_NAMESPACE::OutOfBandQueueTypeNV>(VULKAN_HPP_NAMESPACE::OutOfBandQueueTypeNV value) {
    return vk::to_string(value);
}


}
