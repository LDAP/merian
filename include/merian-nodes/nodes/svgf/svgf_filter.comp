#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_control_flow_attributes : enable
#extension GL_EXT_shared_memory_block : enable

#include "config.h"
#include "svgf_graph_layout.glsl"
#include "merian-shaders/color/colors_yuv.glsl"
#include "merian-shaders/normal_encode.glsl"
#include "merian-shaders/textures.glsl"

layout(set = 1, binding = 0) uniform sampler2D img_filter_in;
layout(set = 1, binding = 1) uniform writeonly restrict image2D img_filter_out;
layout(set = 1, binding = 2) uniform usampler2D img_gbuf_in;
layout(set = 1, binding = 3) uniform writeonly restrict uimage2D img_gbuf_out;

layout (constant_id = 2) const int GAP = 1;
layout (constant_id = 3) const int FILTER_TYPE = 0;
layout (constant_id = 4) const int ITERATION = 0;
layout (constant_id = 5) const int LAST_ITERATION = 0;

// the reference implementation does that but it looks better without
// #define FILTER_VARIANCE

// defined by compiler:
// #define KALEIDOSCOPE
// #define KALEIDOSCOPE_USE_SHMEM

// commet to disable; two variants to reconstruct (0, 1) Reiner recommends using 1
// #define KALEIDOSCOPE_USE_MIRRORING 1

layout(push_constant, std140) uniform push_t {
    float param_z;
    float param_n;
    float param_l;
    float z_bias_normals;
    float z_bias_depth;
} params;

// --------------------------------------------------------------

ivec2 ipos;

#ifdef KALEIDOSCOPE_USE_SHMEM
  ivec2 ipos_shared;
#endif // KALEIDOSCOPE_USE_SHMEM

vec4 filter_irr_var;
float filter_w;

vec2 c_grad_z;
float c_z;
vec3 c_n;

float c_l;
float sigma_l;

float z_bias_depth_mix;
float z_bias_normals_mix;

// --------------------------------------------------------------

#ifdef FILTER_VARIANCE

float get_sigma_l(float center, ivec2 ipos) {
  const float gaussian_kernel[3][3] = {
    { 1.0 / 16.0, 1.0 / 8.0, 1.0 / 16.0 },
    { 1.0 / 8.0,  1.0 / 4.0, 1.0 / 8.0  },
    { 1.0 / 16.0, 1.0 / 8.0, 1.0 / 16.0 }
  };

  float sum = center * gaussian_kernel[1][1];
  const int r = 1;
  for(int yy = -r; yy <= r; yy++) {
    for(int xx = -r; xx <= r; xx++) {
      if(xx != 0 || yy != 0) {
        const ivec2 p = ipos + ivec2(xx, yy);
        const float v = texelFetch(img_filter_in, p, 0).a;
        const float w = gaussian_kernel[xx + 1][yy + 1];
        sum += v * w;
      }
    }
  }

  return sqrt(max(sum, 0.0));
}

#endif // FILTER_VARIANCE


#ifdef KALEIDOSCOPE
#ifdef KALEIDOSCOPE_USE_SHMEM

#define WORKGROUP_SIZE_X gl_WorkGroupSize.x
#define WORKGROUP_SIZE_Y gl_WorkGroupSize.y

#define SHARED_SIZE_X (WORKGROUP_SIZE_X + FILTER_HALO_SIZE * 2)
#define SHARED_SIZE_Y (WORKGROUP_SIZE_Y + FILTER_HALO_SIZE * 2)

// remember to update config.h if anything is changed here!
// FILTER_SHARED_MEMORY_PER_PIXEL = 2 * 4 * 4
// total shared size: SHARED_SIZE_X * SHARED_SIZE_Y * FILTER_SHARED_MEMORY_PER_PIXEL
layout(std430, row_major) shared f32vec4[SHARED_SIZE_Y][SHARED_SIZE_X] SHARED_TILE_u32vec4_A; // (irr, var)
layout(std430, row_major) shared f32vec4[SHARED_SIZE_Y][SHARED_SIZE_X] SHARED_TILE_u32vec4_B; // (normal, linear_z)

void shmem_read(const ivec2 pos, out vec4 gbuf, out vec4 irrfilter) {
  irrfilter = SHARED_TILE_u32vec4_A[pos.y][pos.x];
  gbuf = SHARED_TILE_u32vec4_B[pos.y][pos.x];
}

void shmem_write(const ivec2 pos, const vec4 irrfilter, const vec3 n, const float z) {
  SHARED_TILE_u32vec4_A[pos.y][pos.x] = irrfilter;
  SHARED_TILE_u32vec4_B[pos.y][pos.x] = vec4(n, z);
}

#endif // KALEIDOSCOPE_USE_SHMEM
#endif // KALEIDOSCOPE

// --------------------------------------------------------------


void tap(in ivec2 offset,
         const float kernel_weight) {

#ifdef KALEIDOSCOPE
  
  #ifdef KALEIDOSCOPE_USE_SHMEM
    vec4  p_irr_var; vec4 _gbuf;
    shmem_read(ipos_shared + offset, _gbuf, p_irr_var);
    const vec3  p_n         = _gbuf.xyz;
    const float p_z         = _gbuf.w;
  #else
    const vec4  p_irr_var   = texelFetch(img_filter_in, ipos + offset, 0); 
    const vec3  p_n         = geo_decode_normal(texelFetch(img_gbuf_in, ipos + offset, 0).x);
    const float p_z         = uintBitsToFloat(texelFetch(img_gbuf_in, ipos + offset, 0).y);
  #endif

  offset *= GAP;
#else
  offset *= GAP;

  const vec4  p_irr_var   = texelFetch(img_filter_in, ipos + offset, 0); 
  const vec3  p_n         = gbuffer_get_normal_pixel(gbuffer, ipos + offset);
  const float p_z         = gbuffer_get_linear_z_pixel(gbuffer, ipos + offset);
#endif

  const float p_l         = yuv_luminance(p_irr_var.rgb);
  const float w_l = abs(p_l - c_l) / (sigma_l + 1e-10);

  float w_z = exp(-10 * abs(c_z + dot(c_grad_z, offset) - p_z) / params.param_z);
  w_z = mix(w_z, 1.0, z_bias_depth_mix);

  // was: pow(max(0, dot(p_n, c_n)), params.param_n); 
  float w_n = smoothstep(params.param_n, 1.0, dot(p_n, c_n));
  w_n = mix(w_n, 1.0, z_bias_normals_mix);

  const float w = exp(-w_l * w_l) * w_z * w_n * kernel_weight; 

  filter_irr_var.rgb += p_irr_var.rgb * w; 
  filter_irr_var.a   += p_irr_var.a * w * w; 
  filter_w           += w; 
}

void
main() {

#ifdef KALEIDOSCOPE
  #ifdef KALEIDOSCOPE_USE_SHMEM

    ipos = ivec2(gl_GlobalInvocationID);
    ipos_shared = ivec2(gl_LocalInvocationID) + FILTER_HALO_SIZE;

    filter_irr_var = texelFetch(img_filter_in, ipos, 0);
    const uvec3 c_gbuf = texelFetch(img_gbuf_in, ipos, 0).rgb;
    c_n = geo_decode_normal(c_gbuf.x);
    c_z = uintBitsToFloat(c_gbuf.y);
    c_grad_z = unpackFloat2x16(c_gbuf.z);

    {
      // center
      shmem_write(ipos_shared, filter_irr_var, c_n, c_z);

      // halo
      // |TL| TC |TR|
      // |L | C  |R |
      // |BL| BC |BR|

      ivec2 local_tile_offset;
      ivec2 lid;

      const uint split_size = FILTER_HALO_SIZE * (FILTER_HALO_SIZE + WORKGROUP_SIZE_X);
      const uint split_size_half = split_size / FILTER_HALO_SIZE;
      const ivec2 global_tile_offset = ivec2(gl_WorkGroupSize.xy * gl_WorkGroupID.xy) - FILTER_HALO_SIZE;

      if (gl_LocalInvocationIndex < 1 * split_size) {
        // load top (TL, TC)
        const uint index = gl_LocalInvocationIndex - 0 * split_size;
        lid = ivec2(index % split_size_half, index / split_size_half);
        local_tile_offset = ivec2(0);
      } else if (gl_LocalInvocationIndex < 2 * split_size) {
        // load right (TR, R) 
        const uint index = gl_LocalInvocationIndex - 1 * split_size;
        lid = ivec2(index / split_size_half, index % split_size_half);
        local_tile_offset = ivec2(FILTER_HALO_SIZE + WORKGROUP_SIZE_X, 0);
      } else if (gl_LocalInvocationIndex < 3 * split_size) {
        // load bottom (BR, BC)
        const uint index = gl_LocalInvocationIndex - 2 * split_size;
        lid = ivec2(index % split_size_half, index / split_size_half);
        local_tile_offset = ivec2(FILTER_HALO_SIZE, FILTER_HALO_SIZE + WORKGROUP_SIZE_X);
      } else if (gl_LocalInvocationIndex < 4 * split_size) {
        // load left (BL, L)
        const uint index = gl_LocalInvocationIndex - 3 * split_size;
        lid = ivec2(index / split_size_half, index % split_size_half);
        local_tile_offset = ivec2(0, FILTER_HALO_SIZE);
      }

      if (gl_LocalInvocationIndex < 4 * split_size) {
          const ivec2 global_read = merian_tex_mirror_repeat(global_tile_offset + local_tile_offset + lid, textureSize(img_filter_in, 0));

          const uvec3 p_gbuf = texelFetch(img_gbuf_in, global_read, 0).rgb;
          shmem_write(local_tile_offset + lid, texelFetch(img_filter_in, global_read, 0),
                                               geo_decode_normal(p_gbuf.x),
                                               uintBitsToFloat(p_gbuf.y));
      }
    }
    
    barrier();

    if (any(greaterThanEqual(ipos, imageSize(img_filter_out)))) return;
  #else // NO KALEIDOSCOPE_SHMEM:
    ipos = ivec2(gl_GlobalInvocationID);
    if (any(greaterThanEqual(ipos, imageSize(img_filter_out)))) return;

    filter_irr_var = texelFetch(img_filter_in, ipos, 0);
    const uvec3 c_gbuf = texelFetch(img_gbuf_in, ipos, 0).rgb;
    c_n = geo_decode_normal(c_gbuf.x);
    c_z = uintBitsToFloat(c_gbuf.y);
    c_grad_z = unpackFloat2x16(c_gbuf.z);
  #endif
#else // NO KALEIDOSCOPE:
  ipos = ivec2(gl_GlobalInvocationID);
  if (any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  filter_irr_var = texelFetch(img_filter_in, ipos, 0);
  const GBuffer c_gbuf = gbuffer_load_pixel(gbuffer, ipos);
  c_n = gbuffer_get_normal(c_gbuf);
  c_z = gbuffer_get_linear_z(c_gbuf);
  c_grad_z = gbuffer_get_grad_z(c_gbuf);;
#endif


  c_l = yuv_luminance(filter_irr_var.rgb);

  if (params.z_bias_normals > 0)
    z_bias_normals_mix = smoothstep(0, params.z_bias_normals, c_z);
  else
    z_bias_normals_mix = 0;

  if (params.z_bias_depth > 0)
    z_bias_depth_mix = smoothstep(0, params.z_bias_depth, c_z);
  else
    z_bias_depth_mix = 0;



#ifdef FILTER_VARIANCE
    sigma_l = get_sigma_l(filter_irr_var.a, ipos) * params.param_l;
#else
    sigma_l = sqrt(filter_irr_var.a) * params.param_l;
#endif

  filter_w = 1.0;

  if (c_z > 0) {

    switch (FILTER_TYPE) {
      case 0: {
        // atrous
        const float kernel[] = {1., 2. / 3., 1. / 6.};
        [[unroll]]
        for (int j = -2; j <= 2; j++) {
          [[unroll]]
          for (int i = -2; i <= 2; i++) {
            if (i != 0 || j != 0) {
              const float weight = kernel[abs(i)] * kernel[abs(j)];
              tap(ivec2(i,  j), weight);
            }
          }
        }
        break;
      }

      case 1: {
        // box3
        const int r = 1;
        [[unroll]]
        for (int yy = -r; yy <= r; yy++) {
          [[unroll]]
          for (int xx = -r; xx <= r; xx++) {
            if (xx != 0 || yy != 0) {
              tap(ivec2(xx, yy), 1.0);
            }
          }
        }
        break;
      }

      case 2: {
        // subsampled
        if ((ITERATION & 1) == 0) {
          tap(ivec2(-2,  0), 1.0);
          tap(ivec2( 2,  0), 1.0);
        } else {
          tap(ivec2( 0, -2), 1.0);
          tap(ivec2( 0,  2), 1.0);
        }

        tap(ivec2(-1,  1), 1.0);
        tap(ivec2( 1,  1), 1.0);
        tap(ivec2(-1, -1), 1.0);
        tap(ivec2( 1, -1), 1.0);
        break;
      }
    }

    filter_irr_var.rgb /= filter_w;
    filter_irr_var.a   /= filter_w * filter_w;
  }

// --------------------------------------------------------------
// Reiners Kaladoscope SVGF
#ifdef KALEIDOSCOPE
  if (ITERATION != LAST_ITERATION) {
    ivec2 hid = ipos / 2;
    ivec2 odd = ipos & 1;
    ivec2 viewport_size_half = imageSize(img_filter_out) / 2;
    
    #ifdef KALEIDOSCOPE_USE_MIRRORING
      if (ITERATION == 0) {  
        if(odd.x > 0) {
           hid.x = viewport_size_half.x - hid.x - 1;
        }
        if(odd.y > 0) {
           hid.y = viewport_size_half.y - hid.y - 1;
        }
      }
    #endif

    ipos = hid + odd*(viewport_size_half);
    imageStore(img_gbuf_out, ipos, uvec4(c_gbuf, 0));
  } else {
    ivec2 viewport_size = imageSize(img_filter_out);
    int32_t wcnt = 1 << ITERATION;
    ivec2 sizew = viewport_size / wcnt;
    ivec2 o = ipos / sizew;
    ivec2 wid = ipos - sizew*o;
    
    #if defined(KALEIDOSCOPE_USE_MIRRORING) && KALEIDOSCOPE_USE_MIRRORING == 0
      ivec2 odd = o & 1;
      if(odd.x > 0) {
         wid.x = sizew.x - wid.x - 1;
         o.x = wcnt - o.x;
      }
      if(odd.y > 0) {
         wid.y = sizew.y - wid.y - 1;
         o.y = wcnt - o.y;
      }
    #endif

    ipos = o + wid * wcnt;

    #if defined(KALEIDOSCOPE_USE_MIRRORING) && KALEIDOSCOPE_USE_MIRRORING == 1
      if (ITERATION != 0 /* skip if we're doing exactly one iteration */) {
        ivec2 hid = ipos / 2;
        ivec2 odd = ipos & 1;
        ivec2 viewport_size_half = imageSize(img_filter_out) / 2;
        if(odd.x > 0) {
          hid.x = viewport_size_half.x - hid.x - 1;
        }
        if(odd.y > 0) {
          hid.y = viewport_size_half.y - hid.y - 1;
        }
        ipos = hid * 2 + odd;
      }
    #endif

  }
#endif

  imageStore(img_filter_out, ipos, filter_irr_var);
}

